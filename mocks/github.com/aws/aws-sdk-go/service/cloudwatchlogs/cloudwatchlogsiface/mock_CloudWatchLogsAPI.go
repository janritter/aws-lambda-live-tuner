// Code generated by mockery v2.32.4. DO NOT EDIT.

package cloudwatchlogsiface

import (
	cloudwatchlogs "github.com/aws/aws-sdk-go/service/cloudwatchlogs"

	context "context"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// MockCloudWatchLogsAPI is an autogenerated mock type for the CloudWatchLogsAPI type
type MockCloudWatchLogsAPI struct {
	mock.Mock
}

type MockCloudWatchLogsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCloudWatchLogsAPI) EXPECT() *MockCloudWatchLogsAPI_Expecter {
	return &MockCloudWatchLogsAPI_Expecter{mock: &_m.Mock}
}

// AssociateKmsKey provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) AssociateKmsKey(_a0 *cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.AssociateKmsKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.AssociateKmsKeyInput) *cloudwatchlogs.AssociateKmsKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.AssociateKmsKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.AssociateKmsKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_AssociateKmsKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociateKmsKey'
type MockCloudWatchLogsAPI_AssociateKmsKey_Call struct {
	*mock.Call
}

// AssociateKmsKey is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.AssociateKmsKeyInput
func (_e *MockCloudWatchLogsAPI_Expecter) AssociateKmsKey(_a0 interface{}) *MockCloudWatchLogsAPI_AssociateKmsKey_Call {
	return &MockCloudWatchLogsAPI_AssociateKmsKey_Call{Call: _e.mock.On("AssociateKmsKey", _a0)}
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKey_Call) Run(run func(_a0 *cloudwatchlogs.AssociateKmsKeyInput)) *MockCloudWatchLogsAPI_AssociateKmsKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.AssociateKmsKeyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKey_Call) Return(_a0 *cloudwatchlogs.AssociateKmsKeyOutput, _a1 error) *MockCloudWatchLogsAPI_AssociateKmsKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKey_Call) RunAndReturn(run func(*cloudwatchlogs.AssociateKmsKeyInput) (*cloudwatchlogs.AssociateKmsKeyOutput, error)) *MockCloudWatchLogsAPI_AssociateKmsKey_Call {
	_c.Call.Return(run)
	return _c
}

// AssociateKmsKeyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) AssociateKmsKeyRequest(_a0 *cloudwatchlogs.AssociateKmsKeyInput) (*request.Request, *cloudwatchlogs.AssociateKmsKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.AssociateKmsKeyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.AssociateKmsKeyInput) (*request.Request, *cloudwatchlogs.AssociateKmsKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.AssociateKmsKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.AssociateKmsKeyInput) *cloudwatchlogs.AssociateKmsKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.AssociateKmsKeyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociateKmsKeyRequest'
type MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call struct {
	*mock.Call
}

// AssociateKmsKeyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.AssociateKmsKeyInput
func (_e *MockCloudWatchLogsAPI_Expecter) AssociateKmsKeyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call {
	return &MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call{Call: _e.mock.On("AssociateKmsKeyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call) Run(run func(_a0 *cloudwatchlogs.AssociateKmsKeyInput)) *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.AssociateKmsKeyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.AssociateKmsKeyOutput) *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.AssociateKmsKeyInput) (*request.Request, *cloudwatchlogs.AssociateKmsKeyOutput)) *MockCloudWatchLogsAPI_AssociateKmsKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AssociateKmsKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) AssociateKmsKeyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.AssociateKmsKeyInput, _a2 ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.AssociateKmsKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.AssociateKmsKeyInput, ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.AssociateKmsKeyInput, ...request.Option) *cloudwatchlogs.AssociateKmsKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.AssociateKmsKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.AssociateKmsKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssociateKmsKeyWithContext'
type MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call struct {
	*mock.Call
}

// AssociateKmsKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.AssociateKmsKeyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) AssociateKmsKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call {
	return &MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call{Call: _e.mock.On("AssociateKmsKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.AssociateKmsKeyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.AssociateKmsKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call) Return(_a0 *cloudwatchlogs.AssociateKmsKeyOutput, _a1 error) *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.AssociateKmsKeyInput, ...request.Option) (*cloudwatchlogs.AssociateKmsKeyOutput, error)) *MockCloudWatchLogsAPI_AssociateKmsKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CancelExportTask provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CancelExportTask(_a0 *cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CancelExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CancelExportTaskInput) *cloudwatchlogs.CancelExportTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CancelExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CancelExportTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CancelExportTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelExportTask'
type MockCloudWatchLogsAPI_CancelExportTask_Call struct {
	*mock.Call
}

// CancelExportTask is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CancelExportTaskInput
func (_e *MockCloudWatchLogsAPI_Expecter) CancelExportTask(_a0 interface{}) *MockCloudWatchLogsAPI_CancelExportTask_Call {
	return &MockCloudWatchLogsAPI_CancelExportTask_Call{Call: _e.mock.On("CancelExportTask", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CancelExportTask_Call) Run(run func(_a0 *cloudwatchlogs.CancelExportTaskInput)) *MockCloudWatchLogsAPI_CancelExportTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CancelExportTaskInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CancelExportTask_Call) Return(_a0 *cloudwatchlogs.CancelExportTaskOutput, _a1 error) *MockCloudWatchLogsAPI_CancelExportTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CancelExportTask_Call) RunAndReturn(run func(*cloudwatchlogs.CancelExportTaskInput) (*cloudwatchlogs.CancelExportTaskOutput, error)) *MockCloudWatchLogsAPI_CancelExportTask_Call {
	_c.Call.Return(run)
	return _c
}

// CancelExportTaskRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CancelExportTaskRequest(_a0 *cloudwatchlogs.CancelExportTaskInput) (*request.Request, *cloudwatchlogs.CancelExportTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.CancelExportTaskOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CancelExportTaskInput) (*request.Request, *cloudwatchlogs.CancelExportTaskOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CancelExportTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CancelExportTaskInput) *cloudwatchlogs.CancelExportTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CancelExportTaskOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CancelExportTaskRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelExportTaskRequest'
type MockCloudWatchLogsAPI_CancelExportTaskRequest_Call struct {
	*mock.Call
}

// CancelExportTaskRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CancelExportTaskInput
func (_e *MockCloudWatchLogsAPI_Expecter) CancelExportTaskRequest(_a0 interface{}) *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call {
	return &MockCloudWatchLogsAPI_CancelExportTaskRequest_Call{Call: _e.mock.On("CancelExportTaskRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call) Run(run func(_a0 *cloudwatchlogs.CancelExportTaskInput)) *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CancelExportTaskInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.CancelExportTaskOutput) *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call) RunAndReturn(run func(*cloudwatchlogs.CancelExportTaskInput) (*request.Request, *cloudwatchlogs.CancelExportTaskOutput)) *MockCloudWatchLogsAPI_CancelExportTaskRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CancelExportTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) CancelExportTaskWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CancelExportTaskInput, _a2 ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CancelExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CancelExportTaskInput, ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CancelExportTaskInput, ...request.Option) *cloudwatchlogs.CancelExportTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CancelExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CancelExportTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelExportTaskWithContext'
type MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call struct {
	*mock.Call
}

// CancelExportTaskWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.CancelExportTaskInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) CancelExportTaskWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call {
	return &MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call{Call: _e.mock.On("CancelExportTaskWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.CancelExportTaskInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.CancelExportTaskInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call) Return(_a0 *cloudwatchlogs.CancelExportTaskOutput, _a1 error) *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.CancelExportTaskInput, ...request.Option) (*cloudwatchlogs.CancelExportTaskOutput, error)) *MockCloudWatchLogsAPI_CancelExportTaskWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExportTask provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CreateExportTask(_a0 *cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateExportTaskInput) *cloudwatchlogs.CreateExportTaskOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateExportTaskInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateExportTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExportTask'
type MockCloudWatchLogsAPI_CreateExportTask_Call struct {
	*mock.Call
}

// CreateExportTask is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CreateExportTaskInput
func (_e *MockCloudWatchLogsAPI_Expecter) CreateExportTask(_a0 interface{}) *MockCloudWatchLogsAPI_CreateExportTask_Call {
	return &MockCloudWatchLogsAPI_CreateExportTask_Call{Call: _e.mock.On("CreateExportTask", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CreateExportTask_Call) Run(run func(_a0 *cloudwatchlogs.CreateExportTaskInput)) *MockCloudWatchLogsAPI_CreateExportTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CreateExportTaskInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateExportTask_Call) Return(_a0 *cloudwatchlogs.CreateExportTaskOutput, _a1 error) *MockCloudWatchLogsAPI_CreateExportTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateExportTask_Call) RunAndReturn(run func(*cloudwatchlogs.CreateExportTaskInput) (*cloudwatchlogs.CreateExportTaskOutput, error)) *MockCloudWatchLogsAPI_CreateExportTask_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExportTaskRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CreateExportTaskRequest(_a0 *cloudwatchlogs.CreateExportTaskInput) (*request.Request, *cloudwatchlogs.CreateExportTaskOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.CreateExportTaskOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateExportTaskInput) (*request.Request, *cloudwatchlogs.CreateExportTaskOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateExportTaskInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateExportTaskInput) *cloudwatchlogs.CreateExportTaskOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateExportTaskOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateExportTaskRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExportTaskRequest'
type MockCloudWatchLogsAPI_CreateExportTaskRequest_Call struct {
	*mock.Call
}

// CreateExportTaskRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CreateExportTaskInput
func (_e *MockCloudWatchLogsAPI_Expecter) CreateExportTaskRequest(_a0 interface{}) *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call {
	return &MockCloudWatchLogsAPI_CreateExportTaskRequest_Call{Call: _e.mock.On("CreateExportTaskRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call) Run(run func(_a0 *cloudwatchlogs.CreateExportTaskInput)) *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CreateExportTaskInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.CreateExportTaskOutput) *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call) RunAndReturn(run func(*cloudwatchlogs.CreateExportTaskInput) (*request.Request, *cloudwatchlogs.CreateExportTaskOutput)) *MockCloudWatchLogsAPI_CreateExportTaskRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExportTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) CreateExportTaskWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateExportTaskInput, _a2 ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateExportTaskInput, ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateExportTaskInput, ...request.Option) *cloudwatchlogs.CreateExportTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateExportTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExportTaskWithContext'
type MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call struct {
	*mock.Call
}

// CreateExportTaskWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.CreateExportTaskInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) CreateExportTaskWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call {
	return &MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call{Call: _e.mock.On("CreateExportTaskWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.CreateExportTaskInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.CreateExportTaskInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call) Return(_a0 *cloudwatchlogs.CreateExportTaskOutput, _a1 error) *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.CreateExportTaskInput, ...request.Option) (*cloudwatchlogs.CreateExportTaskOutput, error)) *MockCloudWatchLogsAPI_CreateExportTaskWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogGroup provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CreateLogGroup(_a0 *cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogGroupInput) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateLogGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogGroup'
type MockCloudWatchLogsAPI_CreateLogGroup_Call struct {
	*mock.Call
}

// CreateLogGroup is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CreateLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) CreateLogGroup(_a0 interface{}) *MockCloudWatchLogsAPI_CreateLogGroup_Call {
	return &MockCloudWatchLogsAPI_CreateLogGroup_Call{Call: _e.mock.On("CreateLogGroup", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroup_Call) Run(run func(_a0 *cloudwatchlogs.CreateLogGroupInput)) *MockCloudWatchLogsAPI_CreateLogGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CreateLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroup_Call) Return(_a0 *cloudwatchlogs.CreateLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_CreateLogGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroup_Call) RunAndReturn(run func(*cloudwatchlogs.CreateLogGroupInput) (*cloudwatchlogs.CreateLogGroupOutput, error)) *MockCloudWatchLogsAPI_CreateLogGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogGroupRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CreateLogGroupRequest(_a0 *cloudwatchlogs.CreateLogGroupInput) (*request.Request, *cloudwatchlogs.CreateLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.CreateLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogGroupInput) (*request.Request, *cloudwatchlogs.CreateLogGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogGroupInput) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateLogGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogGroupRequest'
type MockCloudWatchLogsAPI_CreateLogGroupRequest_Call struct {
	*mock.Call
}

// CreateLogGroupRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CreateLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) CreateLogGroupRequest(_a0 interface{}) *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call {
	return &MockCloudWatchLogsAPI_CreateLogGroupRequest_Call{Call: _e.mock.On("CreateLogGroupRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call) Run(run func(_a0 *cloudwatchlogs.CreateLogGroupInput)) *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CreateLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.CreateLogGroupOutput) *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call) RunAndReturn(run func(*cloudwatchlogs.CreateLogGroupInput) (*request.Request, *cloudwatchlogs.CreateLogGroupOutput)) *MockCloudWatchLogsAPI_CreateLogGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) CreateLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...request.Option) *cloudwatchlogs.CreateLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogGroupWithContext'
type MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call struct {
	*mock.Call
}

// CreateLogGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.CreateLogGroupInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) CreateLogGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call {
	return &MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call{Call: _e.mock.On("CreateLogGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogGroupInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.CreateLogGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call) Return(_a0 *cloudwatchlogs.CreateLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.CreateLogGroupInput, ...request.Option) (*cloudwatchlogs.CreateLogGroupOutput, error)) *MockCloudWatchLogsAPI_CreateLogGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogStream provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CreateLogStream(_a0 *cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.CreateLogStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogStreamInput) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateLogStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogStream'
type MockCloudWatchLogsAPI_CreateLogStream_Call struct {
	*mock.Call
}

// CreateLogStream is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CreateLogStreamInput
func (_e *MockCloudWatchLogsAPI_Expecter) CreateLogStream(_a0 interface{}) *MockCloudWatchLogsAPI_CreateLogStream_Call {
	return &MockCloudWatchLogsAPI_CreateLogStream_Call{Call: _e.mock.On("CreateLogStream", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CreateLogStream_Call) Run(run func(_a0 *cloudwatchlogs.CreateLogStreamInput)) *MockCloudWatchLogsAPI_CreateLogStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CreateLogStreamInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogStream_Call) Return(_a0 *cloudwatchlogs.CreateLogStreamOutput, _a1 error) *MockCloudWatchLogsAPI_CreateLogStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogStream_Call) RunAndReturn(run func(*cloudwatchlogs.CreateLogStreamInput) (*cloudwatchlogs.CreateLogStreamOutput, error)) *MockCloudWatchLogsAPI_CreateLogStream_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogStreamRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) CreateLogStreamRequest(_a0 *cloudwatchlogs.CreateLogStreamInput) (*request.Request, *cloudwatchlogs.CreateLogStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.CreateLogStreamOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogStreamInput) (*request.Request, *cloudwatchlogs.CreateLogStreamOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.CreateLogStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.CreateLogStreamInput) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateLogStreamRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogStreamRequest'
type MockCloudWatchLogsAPI_CreateLogStreamRequest_Call struct {
	*mock.Call
}

// CreateLogStreamRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.CreateLogStreamInput
func (_e *MockCloudWatchLogsAPI_Expecter) CreateLogStreamRequest(_a0 interface{}) *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call {
	return &MockCloudWatchLogsAPI_CreateLogStreamRequest_Call{Call: _e.mock.On("CreateLogStreamRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call) Run(run func(_a0 *cloudwatchlogs.CreateLogStreamInput)) *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.CreateLogStreamInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.CreateLogStreamOutput) *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call) RunAndReturn(run func(*cloudwatchlogs.CreateLogStreamInput) (*request.Request, *cloudwatchlogs.CreateLogStreamOutput)) *MockCloudWatchLogsAPI_CreateLogStreamRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLogStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) CreateLogStreamWithContext(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogStreamInput, _a2 ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.CreateLogStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...request.Option) *cloudwatchlogs.CreateLogStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.CreateLogStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogStreamWithContext'
type MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call struct {
	*mock.Call
}

// CreateLogStreamWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.CreateLogStreamInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) CreateLogStreamWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call {
	return &MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call{Call: _e.mock.On("CreateLogStreamWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.CreateLogStreamInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.CreateLogStreamInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call) Return(_a0 *cloudwatchlogs.CreateLogStreamOutput, _a1 error) *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.CreateLogStreamInput, ...request.Option) (*cloudwatchlogs.CreateLogStreamOutput, error)) *MockCloudWatchLogsAPI_CreateLogStreamWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteAccountPolicy(_a0 *cloudwatchlogs.DeleteAccountPolicyInput) (*cloudwatchlogs.DeleteAccountPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteAccountPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteAccountPolicyInput) (*cloudwatchlogs.DeleteAccountPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteAccountPolicyInput) *cloudwatchlogs.DeleteAccountPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteAccountPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteAccountPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteAccountPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountPolicy'
type MockCloudWatchLogsAPI_DeleteAccountPolicy_Call struct {
	*mock.Call
}

// DeleteAccountPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteAccountPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteAccountPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call {
	return &MockCloudWatchLogsAPI_DeleteAccountPolicy_Call{Call: _e.mock.On("DeleteAccountPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call) Run(run func(_a0 *cloudwatchlogs.DeleteAccountPolicyInput)) *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteAccountPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call) Return(_a0 *cloudwatchlogs.DeleteAccountPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteAccountPolicyInput) (*cloudwatchlogs.DeleteAccountPolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteAccountPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteAccountPolicyRequest(_a0 *cloudwatchlogs.DeleteAccountPolicyInput) (*request.Request, *cloudwatchlogs.DeleteAccountPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteAccountPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteAccountPolicyInput) (*request.Request, *cloudwatchlogs.DeleteAccountPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteAccountPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteAccountPolicyInput) *cloudwatchlogs.DeleteAccountPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteAccountPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountPolicyRequest'
type MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call struct {
	*mock.Call
}

// DeleteAccountPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteAccountPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteAccountPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call{Call: _e.mock.On("DeleteAccountPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteAccountPolicyInput)) *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteAccountPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteAccountPolicyOutput) *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteAccountPolicyInput) (*request.Request, *cloudwatchlogs.DeleteAccountPolicyOutput)) *MockCloudWatchLogsAPI_DeleteAccountPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAccountPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteAccountPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteAccountPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteAccountPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteAccountPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteAccountPolicyInput, ...request.Option) (*cloudwatchlogs.DeleteAccountPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteAccountPolicyInput, ...request.Option) *cloudwatchlogs.DeleteAccountPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteAccountPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteAccountPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAccountPolicyWithContext'
type MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call struct {
	*mock.Call
}

// DeleteAccountPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteAccountPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteAccountPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call{Call: _e.mock.On("DeleteAccountPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteAccountPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteAccountPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteAccountPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteAccountPolicyInput, ...request.Option) (*cloudwatchlogs.DeleteAccountPolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteAccountPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataProtectionPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteDataProtectionPolicy(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) *cloudwatchlogs.DeleteDataProtectionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataProtectionPolicy'
type MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call struct {
	*mock.Call
}

// DeleteDataProtectionPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteDataProtectionPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call {
	return &MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call{Call: _e.mock.On("DeleteDataProtectionPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call) Run(run func(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput)) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteDataProtectionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call) Return(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataProtectionPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteDataProtectionPolicyRequest(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteDataProtectionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteDataProtectionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) *cloudwatchlogs.DeleteDataProtectionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDataProtectionPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataProtectionPolicyRequest'
type MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call struct {
	*mock.Call
}

// DeleteDataProtectionPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteDataProtectionPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call{Call: _e.mock.On("DeleteDataProtectionPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyInput)) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteDataProtectionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteDataProtectionPolicyOutput) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteDataProtectionPolicyOutput)) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDataProtectionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteDataProtectionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDataProtectionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDataProtectionPolicyInput, ...request.Option) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDataProtectionPolicyInput, ...request.Option) *cloudwatchlogs.DeleteDataProtectionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDataProtectionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDataProtectionPolicyWithContext'
type MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call struct {
	*mock.Call
}

// DeleteDataProtectionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteDataProtectionPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteDataProtectionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call{Call: _e.mock.On("DeleteDataProtectionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDataProtectionPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteDataProtectionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteDataProtectionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteDataProtectionPolicyInput, ...request.Option) (*cloudwatchlogs.DeleteDataProtectionPolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteDataProtectionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDestination provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteDestination(_a0 *cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDestinationInput) *cloudwatchlogs.DeleteDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDestination'
type MockCloudWatchLogsAPI_DeleteDestination_Call struct {
	*mock.Call
}

// DeleteDestination is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteDestinationInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteDestination(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteDestination_Call {
	return &MockCloudWatchLogsAPI_DeleteDestination_Call{Call: _e.mock.On("DeleteDestination", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteDestination_Call) Run(run func(_a0 *cloudwatchlogs.DeleteDestinationInput)) *MockCloudWatchLogsAPI_DeleteDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteDestinationInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDestination_Call) Return(_a0 *cloudwatchlogs.DeleteDestinationOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDestination_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteDestinationInput) (*cloudwatchlogs.DeleteDestinationOutput, error)) *MockCloudWatchLogsAPI_DeleteDestination_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDestinationRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteDestinationRequest(_a0 *cloudwatchlogs.DeleteDestinationInput) (*request.Request, *cloudwatchlogs.DeleteDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDestinationInput) (*request.Request, *cloudwatchlogs.DeleteDestinationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteDestinationInput) *cloudwatchlogs.DeleteDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteDestinationOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteDestinationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDestinationRequest'
type MockCloudWatchLogsAPI_DeleteDestinationRequest_Call struct {
	*mock.Call
}

// DeleteDestinationRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteDestinationInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteDestinationRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteDestinationRequest_Call{Call: _e.mock.On("DeleteDestinationRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteDestinationInput)) *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteDestinationInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteDestinationOutput) *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteDestinationInput) (*request.Request, *cloudwatchlogs.DeleteDestinationOutput)) *MockCloudWatchLogsAPI_DeleteDestinationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDestinationInput, ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteDestinationInput, ...request.Option) *cloudwatchlogs.DeleteDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteDestinationWithContext'
type MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call struct {
	*mock.Call
}

// DeleteDestinationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteDestinationInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteDestinationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call{Call: _e.mock.On("DeleteDestinationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteDestinationInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteDestinationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteDestinationOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteDestinationInput, ...request.Option) (*cloudwatchlogs.DeleteDestinationOutput, error)) *MockCloudWatchLogsAPI_DeleteDestinationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogGroup provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteLogGroup(_a0 *cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogGroupInput) *cloudwatchlogs.DeleteLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteLogGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogGroup'
type MockCloudWatchLogsAPI_DeleteLogGroup_Call struct {
	*mock.Call
}

// DeleteLogGroup is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteLogGroup(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteLogGroup_Call {
	return &MockCloudWatchLogsAPI_DeleteLogGroup_Call{Call: _e.mock.On("DeleteLogGroup", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroup_Call) Run(run func(_a0 *cloudwatchlogs.DeleteLogGroupInput)) *MockCloudWatchLogsAPI_DeleteLogGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroup_Call) Return(_a0 *cloudwatchlogs.DeleteLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteLogGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroup_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteLogGroupInput) (*cloudwatchlogs.DeleteLogGroupOutput, error)) *MockCloudWatchLogsAPI_DeleteLogGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogGroupRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteLogGroupRequest(_a0 *cloudwatchlogs.DeleteLogGroupInput) (*request.Request, *cloudwatchlogs.DeleteLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogGroupInput) (*request.Request, *cloudwatchlogs.DeleteLogGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogGroupInput) *cloudwatchlogs.DeleteLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteLogGroupOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogGroupRequest'
type MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call struct {
	*mock.Call
}

// DeleteLogGroupRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteLogGroupRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call{Call: _e.mock.On("DeleteLogGroupRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteLogGroupInput)) *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteLogGroupOutput) *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteLogGroupInput) (*request.Request, *cloudwatchlogs.DeleteLogGroupOutput)) *MockCloudWatchLogsAPI_DeleteLogGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogGroupInput, ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogGroupInput, ...request.Option) *cloudwatchlogs.DeleteLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogGroupWithContext'
type MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call struct {
	*mock.Call
}

// DeleteLogGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteLogGroupInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteLogGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call{Call: _e.mock.On("DeleteLogGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogGroupInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteLogGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteLogGroupInput, ...request.Option) (*cloudwatchlogs.DeleteLogGroupOutput, error)) *MockCloudWatchLogsAPI_DeleteLogGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogStream provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteLogStream(_a0 *cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteLogStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogStreamInput) *cloudwatchlogs.DeleteLogStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteLogStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogStream'
type MockCloudWatchLogsAPI_DeleteLogStream_Call struct {
	*mock.Call
}

// DeleteLogStream is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteLogStreamInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteLogStream(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteLogStream_Call {
	return &MockCloudWatchLogsAPI_DeleteLogStream_Call{Call: _e.mock.On("DeleteLogStream", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStream_Call) Run(run func(_a0 *cloudwatchlogs.DeleteLogStreamInput)) *MockCloudWatchLogsAPI_DeleteLogStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteLogStreamInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStream_Call) Return(_a0 *cloudwatchlogs.DeleteLogStreamOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteLogStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStream_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteLogStreamInput) (*cloudwatchlogs.DeleteLogStreamOutput, error)) *MockCloudWatchLogsAPI_DeleteLogStream_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogStreamRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteLogStreamRequest(_a0 *cloudwatchlogs.DeleteLogStreamInput) (*request.Request, *cloudwatchlogs.DeleteLogStreamOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteLogStreamOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogStreamInput) (*request.Request, *cloudwatchlogs.DeleteLogStreamOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteLogStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteLogStreamInput) *cloudwatchlogs.DeleteLogStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteLogStreamOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogStreamRequest'
type MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call struct {
	*mock.Call
}

// DeleteLogStreamRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteLogStreamInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteLogStreamRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call{Call: _e.mock.On("DeleteLogStreamRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteLogStreamInput)) *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteLogStreamInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteLogStreamOutput) *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteLogStreamInput) (*request.Request, *cloudwatchlogs.DeleteLogStreamOutput)) *MockCloudWatchLogsAPI_DeleteLogStreamRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLogStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteLogStreamWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogStreamInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteLogStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogStreamInput, ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteLogStreamInput, ...request.Option) *cloudwatchlogs.DeleteLogStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteLogStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteLogStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogStreamWithContext'
type MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call struct {
	*mock.Call
}

// DeleteLogStreamWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteLogStreamInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteLogStreamWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call{Call: _e.mock.On("DeleteLogStreamWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteLogStreamInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteLogStreamInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteLogStreamOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteLogStreamInput, ...request.Option) (*cloudwatchlogs.DeleteLogStreamOutput, error)) *MockCloudWatchLogsAPI_DeleteLogStreamWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricFilter provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteMetricFilter(_a0 *cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteMetricFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteMetricFilterInput) *cloudwatchlogs.DeleteMetricFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteMetricFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteMetricFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteMetricFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricFilter'
type MockCloudWatchLogsAPI_DeleteMetricFilter_Call struct {
	*mock.Call
}

// DeleteMetricFilter is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteMetricFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteMetricFilter(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteMetricFilter_Call {
	return &MockCloudWatchLogsAPI_DeleteMetricFilter_Call{Call: _e.mock.On("DeleteMetricFilter", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilter_Call) Run(run func(_a0 *cloudwatchlogs.DeleteMetricFilterInput)) *MockCloudWatchLogsAPI_DeleteMetricFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteMetricFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilter_Call) Return(_a0 *cloudwatchlogs.DeleteMetricFilterOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteMetricFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilter_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteMetricFilterInput) (*cloudwatchlogs.DeleteMetricFilterOutput, error)) *MockCloudWatchLogsAPI_DeleteMetricFilter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricFilterRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteMetricFilterRequest(_a0 *cloudwatchlogs.DeleteMetricFilterInput) (*request.Request, *cloudwatchlogs.DeleteMetricFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteMetricFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteMetricFilterInput) (*request.Request, *cloudwatchlogs.DeleteMetricFilterOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteMetricFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteMetricFilterInput) *cloudwatchlogs.DeleteMetricFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteMetricFilterOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricFilterRequest'
type MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call struct {
	*mock.Call
}

// DeleteMetricFilterRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteMetricFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteMetricFilterRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call{Call: _e.mock.On("DeleteMetricFilterRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteMetricFilterInput)) *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteMetricFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteMetricFilterOutput) *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteMetricFilterInput) (*request.Request, *cloudwatchlogs.DeleteMetricFilterOutput)) *MockCloudWatchLogsAPI_DeleteMetricFilterRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMetricFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteMetricFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteMetricFilterInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteMetricFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteMetricFilterInput, ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteMetricFilterInput, ...request.Option) *cloudwatchlogs.DeleteMetricFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteMetricFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteMetricFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMetricFilterWithContext'
type MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call struct {
	*mock.Call
}

// DeleteMetricFilterWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteMetricFilterInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteMetricFilterWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call{Call: _e.mock.On("DeleteMetricFilterWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteMetricFilterInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteMetricFilterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteMetricFilterOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteMetricFilterInput, ...request.Option) (*cloudwatchlogs.DeleteMetricFilterOutput, error)) *MockCloudWatchLogsAPI_DeleteMetricFilterWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQueryDefinition provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteQueryDefinition(_a0 *cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteQueryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) *cloudwatchlogs.DeleteQueryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteQueryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteQueryDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQueryDefinition'
type MockCloudWatchLogsAPI_DeleteQueryDefinition_Call struct {
	*mock.Call
}

// DeleteQueryDefinition is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteQueryDefinitionInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteQueryDefinition(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call {
	return &MockCloudWatchLogsAPI_DeleteQueryDefinition_Call{Call: _e.mock.On("DeleteQueryDefinition", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call) Run(run func(_a0 *cloudwatchlogs.DeleteQueryDefinitionInput)) *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteQueryDefinitionInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call) Return(_a0 *cloudwatchlogs.DeleteQueryDefinitionOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteQueryDefinitionInput) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)) *MockCloudWatchLogsAPI_DeleteQueryDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQueryDefinitionRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteQueryDefinitionRequest(_a0 *cloudwatchlogs.DeleteQueryDefinitionInput) (*request.Request, *cloudwatchlogs.DeleteQueryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteQueryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) (*request.Request, *cloudwatchlogs.DeleteQueryDefinitionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteQueryDefinitionInput) *cloudwatchlogs.DeleteQueryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteQueryDefinitionOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQueryDefinitionRequest'
type MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call struct {
	*mock.Call
}

// DeleteQueryDefinitionRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteQueryDefinitionInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteQueryDefinitionRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call{Call: _e.mock.On("DeleteQueryDefinitionRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteQueryDefinitionInput)) *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteQueryDefinitionInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteQueryDefinitionOutput) *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteQueryDefinitionInput) (*request.Request, *cloudwatchlogs.DeleteQueryDefinitionOutput)) *MockCloudWatchLogsAPI_DeleteQueryDefinitionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteQueryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteQueryDefinitionWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteQueryDefinitionInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteQueryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteQueryDefinitionInput, ...request.Option) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteQueryDefinitionInput, ...request.Option) *cloudwatchlogs.DeleteQueryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteQueryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteQueryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteQueryDefinitionWithContext'
type MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call struct {
	*mock.Call
}

// DeleteQueryDefinitionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteQueryDefinitionInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteQueryDefinitionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call{Call: _e.mock.On("DeleteQueryDefinitionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteQueryDefinitionInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteQueryDefinitionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteQueryDefinitionOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteQueryDefinitionInput, ...request.Option) (*cloudwatchlogs.DeleteQueryDefinitionOutput, error)) *MockCloudWatchLogsAPI_DeleteQueryDefinitionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResourcePolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteResourcePolicy(_a0 *cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteResourcePolicyInput) *cloudwatchlogs.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResourcePolicy'
type MockCloudWatchLogsAPI_DeleteResourcePolicy_Call struct {
	*mock.Call
}

// DeleteResourcePolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteResourcePolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteResourcePolicy(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call {
	return &MockCloudWatchLogsAPI_DeleteResourcePolicy_Call{Call: _e.mock.On("DeleteResourcePolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call) Run(run func(_a0 *cloudwatchlogs.DeleteResourcePolicyInput)) *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteResourcePolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call) Return(_a0 *cloudwatchlogs.DeleteResourcePolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteResourcePolicyInput) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteResourcePolicyRequest(_a0 *cloudwatchlogs.DeleteResourcePolicyInput) (*request.Request, *cloudwatchlogs.DeleteResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteResourcePolicyInput) (*request.Request, *cloudwatchlogs.DeleteResourcePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteResourcePolicyInput) *cloudwatchlogs.DeleteResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteResourcePolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResourcePolicyRequest'
type MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call struct {
	*mock.Call
}

// DeleteResourcePolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteResourcePolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteResourcePolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call{Call: _e.mock.On("DeleteResourcePolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteResourcePolicyInput)) *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteResourcePolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteResourcePolicyOutput) *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteResourcePolicyInput) (*request.Request, *cloudwatchlogs.DeleteResourcePolicyOutput)) *MockCloudWatchLogsAPI_DeleteResourcePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteResourcePolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteResourcePolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteResourcePolicyInput, ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteResourcePolicyInput, ...request.Option) *cloudwatchlogs.DeleteResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResourcePolicyWithContext'
type MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call struct {
	*mock.Call
}

// DeleteResourcePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteResourcePolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteResourcePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call{Call: _e.mock.On("DeleteResourcePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteResourcePolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteResourcePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteResourcePolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteResourcePolicyInput, ...request.Option) (*cloudwatchlogs.DeleteResourcePolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteResourcePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRetentionPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteRetentionPolicy(_a0 *cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) *cloudwatchlogs.DeleteRetentionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRetentionPolicy'
type MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call struct {
	*mock.Call
}

// DeleteRetentionPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteRetentionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteRetentionPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call {
	return &MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call{Call: _e.mock.On("DeleteRetentionPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call) Run(run func(_a0 *cloudwatchlogs.DeleteRetentionPolicyInput)) *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteRetentionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call) Return(_a0 *cloudwatchlogs.DeleteRetentionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteRetentionPolicyInput) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteRetentionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRetentionPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteRetentionPolicyRequest(_a0 *cloudwatchlogs.DeleteRetentionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteRetentionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteRetentionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteRetentionPolicyInput) *cloudwatchlogs.DeleteRetentionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteRetentionPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRetentionPolicyRequest'
type MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call struct {
	*mock.Call
}

// DeleteRetentionPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteRetentionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteRetentionPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call{Call: _e.mock.On("DeleteRetentionPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteRetentionPolicyInput)) *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteRetentionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteRetentionPolicyOutput) *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteRetentionPolicyInput) (*request.Request, *cloudwatchlogs.DeleteRetentionPolicyOutput)) *MockCloudWatchLogsAPI_DeleteRetentionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRetentionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteRetentionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteRetentionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteRetentionPolicyInput, ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteRetentionPolicyInput, ...request.Option) *cloudwatchlogs.DeleteRetentionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteRetentionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRetentionPolicyWithContext'
type MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call struct {
	*mock.Call
}

// DeleteRetentionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteRetentionPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteRetentionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call{Call: _e.mock.On("DeleteRetentionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteRetentionPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteRetentionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteRetentionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteRetentionPolicyInput, ...request.Option) (*cloudwatchlogs.DeleteRetentionPolicyOutput, error)) *MockCloudWatchLogsAPI_DeleteRetentionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscriptionFilter provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteSubscriptionFilter(_a0 *cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DeleteSubscriptionFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) *cloudwatchlogs.DeleteSubscriptionFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscriptionFilter'
type MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call struct {
	*mock.Call
}

// DeleteSubscriptionFilter is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteSubscriptionFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteSubscriptionFilter(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call {
	return &MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call{Call: _e.mock.On("DeleteSubscriptionFilter", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call) Run(run func(_a0 *cloudwatchlogs.DeleteSubscriptionFilterInput)) *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteSubscriptionFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call) Return(_a0 *cloudwatchlogs.DeleteSubscriptionFilterOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteSubscriptionFilterInput) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)) *MockCloudWatchLogsAPI_DeleteSubscriptionFilter_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscriptionFilterRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DeleteSubscriptionFilterRequest(_a0 *cloudwatchlogs.DeleteSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.DeleteSubscriptionFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DeleteSubscriptionFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.DeleteSubscriptionFilterOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DeleteSubscriptionFilterInput) *cloudwatchlogs.DeleteSubscriptionFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscriptionFilterRequest'
type MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call struct {
	*mock.Call
}

// DeleteSubscriptionFilterRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DeleteSubscriptionFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteSubscriptionFilterRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call {
	return &MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call{Call: _e.mock.On("DeleteSubscriptionFilterRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call) Run(run func(_a0 *cloudwatchlogs.DeleteSubscriptionFilterInput)) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DeleteSubscriptionFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DeleteSubscriptionFilterOutput) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DeleteSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.DeleteSubscriptionFilterOutput)) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscriptionFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DeleteSubscriptionFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DeleteSubscriptionFilterInput, _a2 ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DeleteSubscriptionFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteSubscriptionFilterInput, ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DeleteSubscriptionFilterInput, ...request.Option) *cloudwatchlogs.DeleteSubscriptionFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DeleteSubscriptionFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DeleteSubscriptionFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscriptionFilterWithContext'
type MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call struct {
	*mock.Call
}

// DeleteSubscriptionFilterWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DeleteSubscriptionFilterInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DeleteSubscriptionFilterWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call {
	return &MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call{Call: _e.mock.On("DeleteSubscriptionFilterWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DeleteSubscriptionFilterInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DeleteSubscriptionFilterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call) Return(_a0 *cloudwatchlogs.DeleteSubscriptionFilterOutput, _a1 error) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DeleteSubscriptionFilterInput, ...request.Option) (*cloudwatchlogs.DeleteSubscriptionFilterOutput, error)) *MockCloudWatchLogsAPI_DeleteSubscriptionFilterWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeAccountPolicies provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeAccountPolicies(_a0 *cloudwatchlogs.DescribeAccountPoliciesInput) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeAccountPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) *cloudwatchlogs.DescribeAccountPoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeAccountPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeAccountPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeAccountPolicies'
type MockCloudWatchLogsAPI_DescribeAccountPolicies_Call struct {
	*mock.Call
}

// DescribeAccountPolicies is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeAccountPoliciesInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeAccountPolicies(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call {
	return &MockCloudWatchLogsAPI_DescribeAccountPolicies_Call{Call: _e.mock.On("DescribeAccountPolicies", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call) Run(run func(_a0 *cloudwatchlogs.DescribeAccountPoliciesInput)) *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeAccountPoliciesInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call) Return(_a0 *cloudwatchlogs.DescribeAccountPoliciesOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeAccountPoliciesInput) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error)) *MockCloudWatchLogsAPI_DescribeAccountPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeAccountPoliciesRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeAccountPoliciesRequest(_a0 *cloudwatchlogs.DescribeAccountPoliciesInput) (*request.Request, *cloudwatchlogs.DescribeAccountPoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeAccountPoliciesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) (*request.Request, *cloudwatchlogs.DescribeAccountPoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeAccountPoliciesInput) *cloudwatchlogs.DescribeAccountPoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeAccountPoliciesOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeAccountPoliciesRequest'
type MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call struct {
	*mock.Call
}

// DescribeAccountPoliciesRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeAccountPoliciesInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeAccountPoliciesRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call{Call: _e.mock.On("DescribeAccountPoliciesRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeAccountPoliciesInput)) *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeAccountPoliciesInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeAccountPoliciesOutput) *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeAccountPoliciesInput) (*request.Request, *cloudwatchlogs.DescribeAccountPoliciesOutput)) *MockCloudWatchLogsAPI_DescribeAccountPoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeAccountPoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeAccountPoliciesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeAccountPoliciesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeAccountPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeAccountPoliciesInput, ...request.Option) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeAccountPoliciesInput, ...request.Option) *cloudwatchlogs.DescribeAccountPoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeAccountPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeAccountPoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeAccountPoliciesWithContext'
type MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call struct {
	*mock.Call
}

// DescribeAccountPoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeAccountPoliciesInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeAccountPoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call{Call: _e.mock.On("DescribeAccountPoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeAccountPoliciesInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeAccountPoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeAccountPoliciesOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeAccountPoliciesInput, ...request.Option) (*cloudwatchlogs.DescribeAccountPoliciesOutput, error)) *MockCloudWatchLogsAPI_DescribeAccountPoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDestinations provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeDestinations(_a0 *cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput) *cloudwatchlogs.DescribeDestinationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDestinationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeDestinations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDestinations'
type MockCloudWatchLogsAPI_DescribeDestinations_Call struct {
	*mock.Call
}

// DescribeDestinations is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeDestinationsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeDestinations(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeDestinations_Call {
	return &MockCloudWatchLogsAPI_DescribeDestinations_Call{Call: _e.mock.On("DescribeDestinations", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinations_Call) Run(run func(_a0 *cloudwatchlogs.DescribeDestinationsInput)) *MockCloudWatchLogsAPI_DescribeDestinations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeDestinationsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinations_Call) Return(_a0 *cloudwatchlogs.DescribeDestinationsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeDestinations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinations_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeDestinationsInput) (*cloudwatchlogs.DescribeDestinationsOutput, error)) *MockCloudWatchLogsAPI_DescribeDestinations_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDestinationsPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) DescribeDestinationsPages(_a0 *cloudwatchlogs.DescribeDestinationsInput, _a1 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput, func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeDestinationsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDestinationsPages'
type MockCloudWatchLogsAPI_DescribeDestinationsPages_Call struct {
	*mock.Call
}

// DescribeDestinationsPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeDestinationsInput
//   - _a1 func(*cloudwatchlogs.DescribeDestinationsOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeDestinationsPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call {
	return &MockCloudWatchLogsAPI_DescribeDestinationsPages_Call{Call: _e.mock.On("DescribeDestinationsPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call) Run(run func(_a0 *cloudwatchlogs.DescribeDestinationsInput, _a1 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool)) *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeDestinationsInput), args[1].(func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeDestinationsInput, func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool) error) *MockCloudWatchLogsAPI_DescribeDestinationsPages_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDestinationsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) DescribeDestinationsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDestinationsInput, _a2 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDestinationsPagesWithContext'
type MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call struct {
	*mock.Call
}

// DescribeDestinationsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeDestinationsInput
//   - _a2 func(*cloudwatchlogs.DescribeDestinationsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeDestinationsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call{Call: _e.mock.On("DescribeDestinationsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDestinationsInput, _a2 func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeDestinationsInput), args[2].(func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, func(*cloudwatchlogs.DescribeDestinationsOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_DescribeDestinationsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDestinationsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeDestinationsRequest(_a0 *cloudwatchlogs.DescribeDestinationsInput) (*request.Request, *cloudwatchlogs.DescribeDestinationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeDestinationsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput) (*request.Request, *cloudwatchlogs.DescribeDestinationsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeDestinationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeDestinationsInput) *cloudwatchlogs.DescribeDestinationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeDestinationsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDestinationsRequest'
type MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call struct {
	*mock.Call
}

// DescribeDestinationsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeDestinationsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeDestinationsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call{Call: _e.mock.On("DescribeDestinationsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeDestinationsInput)) *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeDestinationsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeDestinationsOutput) *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeDestinationsInput) (*request.Request, *cloudwatchlogs.DescribeDestinationsOutput)) *MockCloudWatchLogsAPI_DescribeDestinationsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeDestinationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeDestinationsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDestinationsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, ...request.Option) *cloudwatchlogs.DescribeDestinationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeDestinationsWithContext'
type MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call struct {
	*mock.Call
}

// DescribeDestinationsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeDestinationsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeDestinationsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call{Call: _e.mock.On("DescribeDestinationsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeDestinationsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeDestinationsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeDestinationsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeDestinationsInput, ...request.Option) (*cloudwatchlogs.DescribeDestinationsOutput, error)) *MockCloudWatchLogsAPI_DescribeDestinationsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeExportTasks provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeExportTasks(_a0 *cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeExportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeExportTasksInput) *cloudwatchlogs.DescribeExportTasksOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeExportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeExportTasksInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeExportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeExportTasks'
type MockCloudWatchLogsAPI_DescribeExportTasks_Call struct {
	*mock.Call
}

// DescribeExportTasks is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeExportTasksInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeExportTasks(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeExportTasks_Call {
	return &MockCloudWatchLogsAPI_DescribeExportTasks_Call{Call: _e.mock.On("DescribeExportTasks", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasks_Call) Run(run func(_a0 *cloudwatchlogs.DescribeExportTasksInput)) *MockCloudWatchLogsAPI_DescribeExportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeExportTasksInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasks_Call) Return(_a0 *cloudwatchlogs.DescribeExportTasksOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeExportTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasks_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeExportTasksInput) (*cloudwatchlogs.DescribeExportTasksOutput, error)) *MockCloudWatchLogsAPI_DescribeExportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeExportTasksRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeExportTasksRequest(_a0 *cloudwatchlogs.DescribeExportTasksInput) (*request.Request, *cloudwatchlogs.DescribeExportTasksOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeExportTasksOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeExportTasksInput) (*request.Request, *cloudwatchlogs.DescribeExportTasksOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeExportTasksInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeExportTasksInput) *cloudwatchlogs.DescribeExportTasksOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeExportTasksOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeExportTasksRequest'
type MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call struct {
	*mock.Call
}

// DescribeExportTasksRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeExportTasksInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeExportTasksRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call{Call: _e.mock.On("DescribeExportTasksRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeExportTasksInput)) *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeExportTasksInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeExportTasksOutput) *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeExportTasksInput) (*request.Request, *cloudwatchlogs.DescribeExportTasksOutput)) *MockCloudWatchLogsAPI_DescribeExportTasksRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeExportTasksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeExportTasksWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeExportTasksInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeExportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeExportTasksInput, ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeExportTasksInput, ...request.Option) *cloudwatchlogs.DescribeExportTasksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeExportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeExportTasksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeExportTasksWithContext'
type MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call struct {
	*mock.Call
}

// DescribeExportTasksWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeExportTasksInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeExportTasksWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call{Call: _e.mock.On("DescribeExportTasksWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeExportTasksInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeExportTasksInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeExportTasksOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeExportTasksInput, ...request.Option) (*cloudwatchlogs.DescribeExportTasksOutput, error)) *MockCloudWatchLogsAPI_DescribeExportTasksWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogGroups provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeLogGroups(_a0 *cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeLogGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput) *cloudwatchlogs.DescribeLogGroupsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogGroupsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeLogGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogGroups'
type MockCloudWatchLogsAPI_DescribeLogGroups_Call struct {
	*mock.Call
}

// DescribeLogGroups is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeLogGroupsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogGroups(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeLogGroups_Call {
	return &MockCloudWatchLogsAPI_DescribeLogGroups_Call{Call: _e.mock.On("DescribeLogGroups", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroups_Call) Run(run func(_a0 *cloudwatchlogs.DescribeLogGroupsInput)) *MockCloudWatchLogsAPI_DescribeLogGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeLogGroupsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroups_Call) Return(_a0 *cloudwatchlogs.DescribeLogGroupsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeLogGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroups_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeLogGroupsInput) (*cloudwatchlogs.DescribeLogGroupsOutput, error)) *MockCloudWatchLogsAPI_DescribeLogGroups_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogGroupsPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) DescribeLogGroupsPages(_a0 *cloudwatchlogs.DescribeLogGroupsInput, _a1 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput, func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogGroupsPages'
type MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call struct {
	*mock.Call
}

// DescribeLogGroupsPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeLogGroupsInput
//   - _a1 func(*cloudwatchlogs.DescribeLogGroupsOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogGroupsPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call {
	return &MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call{Call: _e.mock.On("DescribeLogGroupsPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call) Run(run func(_a0 *cloudwatchlogs.DescribeLogGroupsInput, _a1 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool)) *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeLogGroupsInput), args[1].(func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeLogGroupsInput, func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool) error) *MockCloudWatchLogsAPI_DescribeLogGroupsPages_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogGroupsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) DescribeLogGroupsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogGroupsInput, _a2 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogGroupsPagesWithContext'
type MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call struct {
	*mock.Call
}

// DescribeLogGroupsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeLogGroupsInput
//   - _a2 func(*cloudwatchlogs.DescribeLogGroupsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogGroupsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call{Call: _e.mock.On("DescribeLogGroupsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogGroupsInput, _a2 func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeLogGroupsInput), args[2].(func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, func(*cloudwatchlogs.DescribeLogGroupsOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_DescribeLogGroupsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogGroupsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeLogGroupsRequest(_a0 *cloudwatchlogs.DescribeLogGroupsInput) (*request.Request, *cloudwatchlogs.DescribeLogGroupsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeLogGroupsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput) (*request.Request, *cloudwatchlogs.DescribeLogGroupsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogGroupsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogGroupsInput) *cloudwatchlogs.DescribeLogGroupsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeLogGroupsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogGroupsRequest'
type MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call struct {
	*mock.Call
}

// DescribeLogGroupsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeLogGroupsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogGroupsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call{Call: _e.mock.On("DescribeLogGroupsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeLogGroupsInput)) *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeLogGroupsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeLogGroupsOutput) *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeLogGroupsInput) (*request.Request, *cloudwatchlogs.DescribeLogGroupsOutput)) *MockCloudWatchLogsAPI_DescribeLogGroupsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogGroupsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeLogGroupsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogGroupsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeLogGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, ...request.Option) *cloudwatchlogs.DescribeLogGroupsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogGroupsWithContext'
type MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call struct {
	*mock.Call
}

// DescribeLogGroupsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeLogGroupsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogGroupsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call{Call: _e.mock.On("DescribeLogGroupsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogGroupsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeLogGroupsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeLogGroupsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeLogGroupsInput, ...request.Option) (*cloudwatchlogs.DescribeLogGroupsOutput, error)) *MockCloudWatchLogsAPI_DescribeLogGroupsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogStreams provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeLogStreams(_a0 *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeLogStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput) *cloudwatchlogs.DescribeLogStreamsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogStreamsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeLogStreams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogStreams'
type MockCloudWatchLogsAPI_DescribeLogStreams_Call struct {
	*mock.Call
}

// DescribeLogStreams is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeLogStreamsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogStreams(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeLogStreams_Call {
	return &MockCloudWatchLogsAPI_DescribeLogStreams_Call{Call: _e.mock.On("DescribeLogStreams", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreams_Call) Run(run func(_a0 *cloudwatchlogs.DescribeLogStreamsInput)) *MockCloudWatchLogsAPI_DescribeLogStreams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeLogStreamsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreams_Call) Return(_a0 *cloudwatchlogs.DescribeLogStreamsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeLogStreams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreams_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error)) *MockCloudWatchLogsAPI_DescribeLogStreams_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogStreamsPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) DescribeLogStreamsPages(_a0 *cloudwatchlogs.DescribeLogStreamsInput, _a1 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput, func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogStreamsPages'
type MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call struct {
	*mock.Call
}

// DescribeLogStreamsPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeLogStreamsInput
//   - _a1 func(*cloudwatchlogs.DescribeLogStreamsOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogStreamsPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call {
	return &MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call{Call: _e.mock.On("DescribeLogStreamsPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call) Run(run func(_a0 *cloudwatchlogs.DescribeLogStreamsInput, _a1 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool)) *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeLogStreamsInput), args[1].(func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeLogStreamsInput, func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool) error) *MockCloudWatchLogsAPI_DescribeLogStreamsPages_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogStreamsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) DescribeLogStreamsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogStreamsInput, _a2 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogStreamsPagesWithContext'
type MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call struct {
	*mock.Call
}

// DescribeLogStreamsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeLogStreamsInput
//   - _a2 func(*cloudwatchlogs.DescribeLogStreamsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogStreamsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call{Call: _e.mock.On("DescribeLogStreamsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogStreamsInput, _a2 func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeLogStreamsInput), args[2].(func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, func(*cloudwatchlogs.DescribeLogStreamsOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_DescribeLogStreamsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogStreamsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeLogStreamsRequest(_a0 *cloudwatchlogs.DescribeLogStreamsInput) (*request.Request, *cloudwatchlogs.DescribeLogStreamsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeLogStreamsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput) (*request.Request, *cloudwatchlogs.DescribeLogStreamsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeLogStreamsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeLogStreamsInput) *cloudwatchlogs.DescribeLogStreamsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeLogStreamsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogStreamsRequest'
type MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call struct {
	*mock.Call
}

// DescribeLogStreamsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeLogStreamsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogStreamsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call{Call: _e.mock.On("DescribeLogStreamsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeLogStreamsInput)) *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeLogStreamsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeLogStreamsOutput) *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeLogStreamsInput) (*request.Request, *cloudwatchlogs.DescribeLogStreamsOutput)) *MockCloudWatchLogsAPI_DescribeLogStreamsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeLogStreamsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeLogStreamsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogStreamsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeLogStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, ...request.Option) *cloudwatchlogs.DescribeLogStreamsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeLogStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeLogStreamsWithContext'
type MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call struct {
	*mock.Call
}

// DescribeLogStreamsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeLogStreamsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeLogStreamsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call{Call: _e.mock.On("DescribeLogStreamsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeLogStreamsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeLogStreamsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeLogStreamsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeLogStreamsInput, ...request.Option) (*cloudwatchlogs.DescribeLogStreamsOutput, error)) *MockCloudWatchLogsAPI_DescribeLogStreamsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeMetricFilters provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeMetricFilters(_a0 *cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeMetricFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput) *cloudwatchlogs.DescribeMetricFiltersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeMetricFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeMetricFiltersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeMetricFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeMetricFilters'
type MockCloudWatchLogsAPI_DescribeMetricFilters_Call struct {
	*mock.Call
}

// DescribeMetricFilters is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeMetricFiltersInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeMetricFilters(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeMetricFilters_Call {
	return &MockCloudWatchLogsAPI_DescribeMetricFilters_Call{Call: _e.mock.On("DescribeMetricFilters", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFilters_Call) Run(run func(_a0 *cloudwatchlogs.DescribeMetricFiltersInput)) *MockCloudWatchLogsAPI_DescribeMetricFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeMetricFiltersInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFilters_Call) Return(_a0 *cloudwatchlogs.DescribeMetricFiltersOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeMetricFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFilters_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeMetricFiltersInput) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)) *MockCloudWatchLogsAPI_DescribeMetricFilters_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeMetricFiltersPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) DescribeMetricFiltersPages(_a0 *cloudwatchlogs.DescribeMetricFiltersInput, _a1 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput, func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeMetricFiltersPages'
type MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call struct {
	*mock.Call
}

// DescribeMetricFiltersPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeMetricFiltersInput
//   - _a1 func(*cloudwatchlogs.DescribeMetricFiltersOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeMetricFiltersPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call {
	return &MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call{Call: _e.mock.On("DescribeMetricFiltersPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call) Run(run func(_a0 *cloudwatchlogs.DescribeMetricFiltersInput, _a1 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool)) *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeMetricFiltersInput), args[1].(func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeMetricFiltersInput, func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool) error) *MockCloudWatchLogsAPI_DescribeMetricFiltersPages_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeMetricFiltersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) DescribeMetricFiltersPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeMetricFiltersInput, _a2 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeMetricFiltersPagesWithContext'
type MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call struct {
	*mock.Call
}

// DescribeMetricFiltersPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeMetricFiltersInput
//   - _a2 func(*cloudwatchlogs.DescribeMetricFiltersOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeMetricFiltersPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call{Call: _e.mock.On("DescribeMetricFiltersPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeMetricFiltersInput, _a2 func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeMetricFiltersInput), args[2].(func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, func(*cloudwatchlogs.DescribeMetricFiltersOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_DescribeMetricFiltersPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeMetricFiltersRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeMetricFiltersRequest(_a0 *cloudwatchlogs.DescribeMetricFiltersInput) (*request.Request, *cloudwatchlogs.DescribeMetricFiltersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeMetricFiltersOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput) (*request.Request, *cloudwatchlogs.DescribeMetricFiltersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeMetricFiltersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeMetricFiltersInput) *cloudwatchlogs.DescribeMetricFiltersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeMetricFiltersOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeMetricFiltersRequest'
type MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call struct {
	*mock.Call
}

// DescribeMetricFiltersRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeMetricFiltersInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeMetricFiltersRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call{Call: _e.mock.On("DescribeMetricFiltersRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeMetricFiltersInput)) *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeMetricFiltersInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeMetricFiltersOutput) *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeMetricFiltersInput) (*request.Request, *cloudwatchlogs.DescribeMetricFiltersOutput)) *MockCloudWatchLogsAPI_DescribeMetricFiltersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeMetricFiltersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeMetricFiltersWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeMetricFiltersInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeMetricFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, ...request.Option) *cloudwatchlogs.DescribeMetricFiltersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeMetricFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeMetricFiltersWithContext'
type MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call struct {
	*mock.Call
}

// DescribeMetricFiltersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeMetricFiltersInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeMetricFiltersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call{Call: _e.mock.On("DescribeMetricFiltersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeMetricFiltersInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeMetricFiltersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeMetricFiltersOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeMetricFiltersInput, ...request.Option) (*cloudwatchlogs.DescribeMetricFiltersOutput, error)) *MockCloudWatchLogsAPI_DescribeMetricFiltersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeQueries provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeQueries(_a0 *cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueriesInput) *cloudwatchlogs.DescribeQueriesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueriesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeQueries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeQueries'
type MockCloudWatchLogsAPI_DescribeQueries_Call struct {
	*mock.Call
}

// DescribeQueries is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeQueriesInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeQueries(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeQueries_Call {
	return &MockCloudWatchLogsAPI_DescribeQueries_Call{Call: _e.mock.On("DescribeQueries", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeQueries_Call) Run(run func(_a0 *cloudwatchlogs.DescribeQueriesInput)) *MockCloudWatchLogsAPI_DescribeQueries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeQueriesInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueries_Call) Return(_a0 *cloudwatchlogs.DescribeQueriesOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeQueries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueries_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeQueriesInput) (*cloudwatchlogs.DescribeQueriesOutput, error)) *MockCloudWatchLogsAPI_DescribeQueries_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeQueriesRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeQueriesRequest(_a0 *cloudwatchlogs.DescribeQueriesInput) (*request.Request, *cloudwatchlogs.DescribeQueriesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeQueriesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueriesInput) (*request.Request, *cloudwatchlogs.DescribeQueriesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueriesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueriesInput) *cloudwatchlogs.DescribeQueriesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeQueriesOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeQueriesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeQueriesRequest'
type MockCloudWatchLogsAPI_DescribeQueriesRequest_Call struct {
	*mock.Call
}

// DescribeQueriesRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeQueriesInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeQueriesRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeQueriesRequest_Call{Call: _e.mock.On("DescribeQueriesRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeQueriesInput)) *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeQueriesInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeQueriesOutput) *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeQueriesInput) (*request.Request, *cloudwatchlogs.DescribeQueriesOutput)) *MockCloudWatchLogsAPI_DescribeQueriesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeQueriesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeQueriesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeQueriesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeQueriesInput, ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeQueriesInput, ...request.Option) *cloudwatchlogs.DescribeQueriesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeQueriesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeQueriesWithContext'
type MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call struct {
	*mock.Call
}

// DescribeQueriesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeQueriesInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeQueriesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call{Call: _e.mock.On("DescribeQueriesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeQueriesInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeQueriesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeQueriesOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeQueriesInput, ...request.Option) (*cloudwatchlogs.DescribeQueriesOutput, error)) *MockCloudWatchLogsAPI_DescribeQueriesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeQueryDefinitions provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeQueryDefinitions(_a0 *cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeQueryDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) *cloudwatchlogs.DescribeQueryDefinitionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueryDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeQueryDefinitions'
type MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call struct {
	*mock.Call
}

// DescribeQueryDefinitions is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeQueryDefinitionsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeQueryDefinitions(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call {
	return &MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call{Call: _e.mock.On("DescribeQueryDefinitions", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call) Run(run func(_a0 *cloudwatchlogs.DescribeQueryDefinitionsInput)) *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeQueryDefinitionsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call) Return(_a0 *cloudwatchlogs.DescribeQueryDefinitionsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeQueryDefinitionsInput) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)) *MockCloudWatchLogsAPI_DescribeQueryDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeQueryDefinitionsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeQueryDefinitionsRequest(_a0 *cloudwatchlogs.DescribeQueryDefinitionsInput) (*request.Request, *cloudwatchlogs.DescribeQueryDefinitionsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeQueryDefinitionsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) (*request.Request, *cloudwatchlogs.DescribeQueryDefinitionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeQueryDefinitionsInput) *cloudwatchlogs.DescribeQueryDefinitionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeQueryDefinitionsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeQueryDefinitionsRequest'
type MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call struct {
	*mock.Call
}

// DescribeQueryDefinitionsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeQueryDefinitionsInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeQueryDefinitionsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call{Call: _e.mock.On("DescribeQueryDefinitionsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeQueryDefinitionsInput)) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeQueryDefinitionsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeQueryDefinitionsOutput) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeQueryDefinitionsInput) (*request.Request, *cloudwatchlogs.DescribeQueryDefinitionsOutput)) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeQueryDefinitionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeQueryDefinitionsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeQueryDefinitionsInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeQueryDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeQueryDefinitionsInput, ...request.Option) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeQueryDefinitionsInput, ...request.Option) *cloudwatchlogs.DescribeQueryDefinitionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeQueryDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeQueryDefinitionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeQueryDefinitionsWithContext'
type MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call struct {
	*mock.Call
}

// DescribeQueryDefinitionsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeQueryDefinitionsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeQueryDefinitionsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call{Call: _e.mock.On("DescribeQueryDefinitionsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeQueryDefinitionsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeQueryDefinitionsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeQueryDefinitionsOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeQueryDefinitionsInput, ...request.Option) (*cloudwatchlogs.DescribeQueryDefinitionsOutput, error)) *MockCloudWatchLogsAPI_DescribeQueryDefinitionsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeResourcePolicies provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeResourcePolicies(_a0 *cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeResourcePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) *cloudwatchlogs.DescribeResourcePoliciesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeResourcePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeResourcePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeResourcePolicies'
type MockCloudWatchLogsAPI_DescribeResourcePolicies_Call struct {
	*mock.Call
}

// DescribeResourcePolicies is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeResourcePoliciesInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeResourcePolicies(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call {
	return &MockCloudWatchLogsAPI_DescribeResourcePolicies_Call{Call: _e.mock.On("DescribeResourcePolicies", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call) Run(run func(_a0 *cloudwatchlogs.DescribeResourcePoliciesInput)) *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeResourcePoliciesInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call) Return(_a0 *cloudwatchlogs.DescribeResourcePoliciesOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeResourcePoliciesInput) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)) *MockCloudWatchLogsAPI_DescribeResourcePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeResourcePoliciesRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeResourcePoliciesRequest(_a0 *cloudwatchlogs.DescribeResourcePoliciesInput) (*request.Request, *cloudwatchlogs.DescribeResourcePoliciesOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeResourcePoliciesOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) (*request.Request, *cloudwatchlogs.DescribeResourcePoliciesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeResourcePoliciesInput) *cloudwatchlogs.DescribeResourcePoliciesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeResourcePoliciesOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeResourcePoliciesRequest'
type MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call struct {
	*mock.Call
}

// DescribeResourcePoliciesRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeResourcePoliciesInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeResourcePoliciesRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call{Call: _e.mock.On("DescribeResourcePoliciesRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeResourcePoliciesInput)) *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeResourcePoliciesInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeResourcePoliciesOutput) *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeResourcePoliciesInput) (*request.Request, *cloudwatchlogs.DescribeResourcePoliciesOutput)) *MockCloudWatchLogsAPI_DescribeResourcePoliciesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeResourcePoliciesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeResourcePoliciesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeResourcePoliciesInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeResourcePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeResourcePoliciesInput, ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeResourcePoliciesInput, ...request.Option) *cloudwatchlogs.DescribeResourcePoliciesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeResourcePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeResourcePoliciesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeResourcePoliciesWithContext'
type MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call struct {
	*mock.Call
}

// DescribeResourcePoliciesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeResourcePoliciesInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeResourcePoliciesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call{Call: _e.mock.On("DescribeResourcePoliciesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeResourcePoliciesInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeResourcePoliciesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeResourcePoliciesOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeResourcePoliciesInput, ...request.Option) (*cloudwatchlogs.DescribeResourcePoliciesOutput, error)) *MockCloudWatchLogsAPI_DescribeResourcePoliciesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubscriptionFilters provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeSubscriptionFilters(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) *cloudwatchlogs.DescribeSubscriptionFiltersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubscriptionFilters'
type MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call struct {
	*mock.Call
}

// DescribeSubscriptionFilters is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeSubscriptionFilters(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call {
	return &MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call{Call: _e.mock.On("DescribeSubscriptionFilters", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call) Run(run func(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput)) *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeSubscriptionFiltersInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call) Return(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)) *MockCloudWatchLogsAPI_DescribeSubscriptionFilters_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubscriptionFiltersPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) DescribeSubscriptionFiltersPages(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a1 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput, func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubscriptionFiltersPages'
type MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call struct {
	*mock.Call
}

// DescribeSubscriptionFiltersPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput
//   - _a1 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeSubscriptionFiltersPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call {
	return &MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call{Call: _e.mock.On("DescribeSubscriptionFiltersPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call) Run(run func(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a1 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool)) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeSubscriptionFiltersInput), args[1].(func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeSubscriptionFiltersInput, func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool) error) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPages_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubscriptionFiltersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) DescribeSubscriptionFiltersPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a2 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubscriptionFiltersPagesWithContext'
type MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call struct {
	*mock.Call
}

// DescribeSubscriptionFiltersPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput
//   - _a2 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeSubscriptionFiltersPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call{Call: _e.mock.On("DescribeSubscriptionFiltersPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a2 func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeSubscriptionFiltersInput), args[2].(func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, func(*cloudwatchlogs.DescribeSubscriptionFiltersOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubscriptionFiltersRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DescribeSubscriptionFiltersRequest(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput) (*request.Request, *cloudwatchlogs.DescribeSubscriptionFiltersOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DescribeSubscriptionFiltersOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) (*request.Request, *cloudwatchlogs.DescribeSubscriptionFiltersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) *cloudwatchlogs.DescribeSubscriptionFiltersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubscriptionFiltersRequest'
type MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call struct {
	*mock.Call
}

// DescribeSubscriptionFiltersRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeSubscriptionFiltersRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call {
	return &MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call{Call: _e.mock.On("DescribeSubscriptionFiltersRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call) Run(run func(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersInput)) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DescribeSubscriptionFiltersInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersOutput) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DescribeSubscriptionFiltersInput) (*request.Request, *cloudwatchlogs.DescribeSubscriptionFiltersOutput)) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DescribeSubscriptionFiltersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DescribeSubscriptionFiltersWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a2 ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, ...request.Option) *cloudwatchlogs.DescribeSubscriptionFiltersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DescribeSubscriptionFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribeSubscriptionFiltersWithContext'
type MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call struct {
	*mock.Call
}

// DescribeSubscriptionFiltersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DescribeSubscriptionFiltersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call {
	return &MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call{Call: _e.mock.On("DescribeSubscriptionFiltersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DescribeSubscriptionFiltersInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DescribeSubscriptionFiltersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call) Return(_a0 *cloudwatchlogs.DescribeSubscriptionFiltersOutput, _a1 error) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DescribeSubscriptionFiltersInput, ...request.Option) (*cloudwatchlogs.DescribeSubscriptionFiltersOutput, error)) *MockCloudWatchLogsAPI_DescribeSubscriptionFiltersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DisassociateKmsKey provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DisassociateKmsKey(_a0 *cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.DisassociateKmsKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DisassociateKmsKeyInput) *cloudwatchlogs.DisassociateKmsKeyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DisassociateKmsKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DisassociateKmsKeyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DisassociateKmsKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisassociateKmsKey'
type MockCloudWatchLogsAPI_DisassociateKmsKey_Call struct {
	*mock.Call
}

// DisassociateKmsKey is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DisassociateKmsKeyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DisassociateKmsKey(_a0 interface{}) *MockCloudWatchLogsAPI_DisassociateKmsKey_Call {
	return &MockCloudWatchLogsAPI_DisassociateKmsKey_Call{Call: _e.mock.On("DisassociateKmsKey", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKey_Call) Run(run func(_a0 *cloudwatchlogs.DisassociateKmsKeyInput)) *MockCloudWatchLogsAPI_DisassociateKmsKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DisassociateKmsKeyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKey_Call) Return(_a0 *cloudwatchlogs.DisassociateKmsKeyOutput, _a1 error) *MockCloudWatchLogsAPI_DisassociateKmsKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKey_Call) RunAndReturn(run func(*cloudwatchlogs.DisassociateKmsKeyInput) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)) *MockCloudWatchLogsAPI_DisassociateKmsKey_Call {
	_c.Call.Return(run)
	return _c
}

// DisassociateKmsKeyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) DisassociateKmsKeyRequest(_a0 *cloudwatchlogs.DisassociateKmsKeyInput) (*request.Request, *cloudwatchlogs.DisassociateKmsKeyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.DisassociateKmsKeyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DisassociateKmsKeyInput) (*request.Request, *cloudwatchlogs.DisassociateKmsKeyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.DisassociateKmsKeyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.DisassociateKmsKeyInput) *cloudwatchlogs.DisassociateKmsKeyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.DisassociateKmsKeyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisassociateKmsKeyRequest'
type MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call struct {
	*mock.Call
}

// DisassociateKmsKeyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.DisassociateKmsKeyInput
func (_e *MockCloudWatchLogsAPI_Expecter) DisassociateKmsKeyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call {
	return &MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call{Call: _e.mock.On("DisassociateKmsKeyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call) Run(run func(_a0 *cloudwatchlogs.DisassociateKmsKeyInput)) *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.DisassociateKmsKeyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.DisassociateKmsKeyOutput) *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.DisassociateKmsKeyInput) (*request.Request, *cloudwatchlogs.DisassociateKmsKeyOutput)) *MockCloudWatchLogsAPI_DisassociateKmsKeyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DisassociateKmsKeyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) DisassociateKmsKeyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.DisassociateKmsKeyInput, _a2 ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.DisassociateKmsKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DisassociateKmsKeyInput, ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.DisassociateKmsKeyInput, ...request.Option) *cloudwatchlogs.DisassociateKmsKeyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.DisassociateKmsKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.DisassociateKmsKeyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisassociateKmsKeyWithContext'
type MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call struct {
	*mock.Call
}

// DisassociateKmsKeyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.DisassociateKmsKeyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) DisassociateKmsKeyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call {
	return &MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call{Call: _e.mock.On("DisassociateKmsKeyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.DisassociateKmsKeyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.DisassociateKmsKeyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call) Return(_a0 *cloudwatchlogs.DisassociateKmsKeyOutput, _a1 error) *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.DisassociateKmsKeyInput, ...request.Option) (*cloudwatchlogs.DisassociateKmsKeyOutput, error)) *MockCloudWatchLogsAPI_DisassociateKmsKeyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// FilterLogEvents provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) FilterLogEvents(_a0 *cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.FilterLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput) *cloudwatchlogs.FilterLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.FilterLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.FilterLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_FilterLogEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterLogEvents'
type MockCloudWatchLogsAPI_FilterLogEvents_Call struct {
	*mock.Call
}

// FilterLogEvents is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.FilterLogEventsInput
func (_e *MockCloudWatchLogsAPI_Expecter) FilterLogEvents(_a0 interface{}) *MockCloudWatchLogsAPI_FilterLogEvents_Call {
	return &MockCloudWatchLogsAPI_FilterLogEvents_Call{Call: _e.mock.On("FilterLogEvents", _a0)}
}

func (_c *MockCloudWatchLogsAPI_FilterLogEvents_Call) Run(run func(_a0 *cloudwatchlogs.FilterLogEventsInput)) *MockCloudWatchLogsAPI_FilterLogEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.FilterLogEventsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEvents_Call) Return(_a0 *cloudwatchlogs.FilterLogEventsOutput, _a1 error) *MockCloudWatchLogsAPI_FilterLogEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEvents_Call) RunAndReturn(run func(*cloudwatchlogs.FilterLogEventsInput) (*cloudwatchlogs.FilterLogEventsOutput, error)) *MockCloudWatchLogsAPI_FilterLogEvents_Call {
	_c.Call.Return(run)
	return _c
}

// FilterLogEventsPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) FilterLogEventsPages(_a0 *cloudwatchlogs.FilterLogEventsInput, _a1 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput, func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_FilterLogEventsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterLogEventsPages'
type MockCloudWatchLogsAPI_FilterLogEventsPages_Call struct {
	*mock.Call
}

// FilterLogEventsPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.FilterLogEventsInput
//   - _a1 func(*cloudwatchlogs.FilterLogEventsOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) FilterLogEventsPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_FilterLogEventsPages_Call {
	return &MockCloudWatchLogsAPI_FilterLogEventsPages_Call{Call: _e.mock.On("FilterLogEventsPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsPages_Call) Run(run func(_a0 *cloudwatchlogs.FilterLogEventsInput, _a1 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool)) *MockCloudWatchLogsAPI_FilterLogEventsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.FilterLogEventsInput), args[1].(func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_FilterLogEventsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsPages_Call) RunAndReturn(run func(*cloudwatchlogs.FilterLogEventsInput, func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool) error) *MockCloudWatchLogsAPI_FilterLogEventsPages_Call {
	_c.Call.Return(run)
	return _c
}

// FilterLogEventsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) FilterLogEventsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.FilterLogEventsInput, _a2 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterLogEventsPagesWithContext'
type MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call struct {
	*mock.Call
}

// FilterLogEventsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.FilterLogEventsInput
//   - _a2 func(*cloudwatchlogs.FilterLogEventsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) FilterLogEventsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call{Call: _e.mock.On("FilterLogEventsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.FilterLogEventsInput, _a2 func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.FilterLogEventsInput), args[2].(func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.FilterLogEventsInput, func(*cloudwatchlogs.FilterLogEventsOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_FilterLogEventsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// FilterLogEventsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) FilterLogEventsRequest(_a0 *cloudwatchlogs.FilterLogEventsInput) (*request.Request, *cloudwatchlogs.FilterLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.FilterLogEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput) (*request.Request, *cloudwatchlogs.FilterLogEventsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.FilterLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.FilterLogEventsInput) *cloudwatchlogs.FilterLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.FilterLogEventsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_FilterLogEventsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterLogEventsRequest'
type MockCloudWatchLogsAPI_FilterLogEventsRequest_Call struct {
	*mock.Call
}

// FilterLogEventsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.FilterLogEventsInput
func (_e *MockCloudWatchLogsAPI_Expecter) FilterLogEventsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call {
	return &MockCloudWatchLogsAPI_FilterLogEventsRequest_Call{Call: _e.mock.On("FilterLogEventsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call) Run(run func(_a0 *cloudwatchlogs.FilterLogEventsInput)) *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.FilterLogEventsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.FilterLogEventsOutput) *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.FilterLogEventsInput) (*request.Request, *cloudwatchlogs.FilterLogEventsOutput)) *MockCloudWatchLogsAPI_FilterLogEventsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// FilterLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) FilterLogEventsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.FilterLogEventsInput, _a2 ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.FilterLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, ...request.Option) *cloudwatchlogs.FilterLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.FilterLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.FilterLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterLogEventsWithContext'
type MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call struct {
	*mock.Call
}

// FilterLogEventsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.FilterLogEventsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) FilterLogEventsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call {
	return &MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call{Call: _e.mock.On("FilterLogEventsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.FilterLogEventsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.FilterLogEventsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call) Return(_a0 *cloudwatchlogs.FilterLogEventsOutput, _a1 error) *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.FilterLogEventsInput, ...request.Option) (*cloudwatchlogs.FilterLogEventsOutput, error)) *MockCloudWatchLogsAPI_FilterLogEventsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataProtectionPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetDataProtectionPolicy(_a0 *cloudwatchlogs.GetDataProtectionPolicyInput) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) *cloudwatchlogs.GetDataProtectionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataProtectionPolicy'
type MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call struct {
	*mock.Call
}

// GetDataProtectionPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetDataProtectionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetDataProtectionPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call {
	return &MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call{Call: _e.mock.On("GetDataProtectionPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call) Run(run func(_a0 *cloudwatchlogs.GetDataProtectionPolicyInput)) *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetDataProtectionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call) Return(_a0 *cloudwatchlogs.GetDataProtectionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.GetDataProtectionPolicyInput) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error)) *MockCloudWatchLogsAPI_GetDataProtectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataProtectionPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetDataProtectionPolicyRequest(_a0 *cloudwatchlogs.GetDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.GetDataProtectionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.GetDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.GetDataProtectionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetDataProtectionPolicyInput) *cloudwatchlogs.GetDataProtectionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetDataProtectionPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataProtectionPolicyRequest'
type MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call struct {
	*mock.Call
}

// GetDataProtectionPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetDataProtectionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetDataProtectionPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call{Call: _e.mock.On("GetDataProtectionPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.GetDataProtectionPolicyInput)) *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetDataProtectionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.GetDataProtectionPolicyOutput) *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.GetDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.GetDataProtectionPolicyOutput)) *MockCloudWatchLogsAPI_GetDataProtectionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataProtectionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) GetDataProtectionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetDataProtectionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDataProtectionPolicyInput, ...request.Option) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetDataProtectionPolicyInput, ...request.Option) *cloudwatchlogs.GetDataProtectionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetDataProtectionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataProtectionPolicyWithContext'
type MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call struct {
	*mock.Call
}

// GetDataProtectionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.GetDataProtectionPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) GetDataProtectionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call{Call: _e.mock.On("GetDataProtectionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.GetDataProtectionPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.GetDataProtectionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.GetDataProtectionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.GetDataProtectionPolicyInput, ...request.Option) (*cloudwatchlogs.GetDataProtectionPolicyOutput, error)) *MockCloudWatchLogsAPI_GetDataProtectionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogEvents provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetLogEvents(_a0 *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput) *cloudwatchlogs.GetLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogEvents'
type MockCloudWatchLogsAPI_GetLogEvents_Call struct {
	*mock.Call
}

// GetLogEvents is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogEventsInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogEvents(_a0 interface{}) *MockCloudWatchLogsAPI_GetLogEvents_Call {
	return &MockCloudWatchLogsAPI_GetLogEvents_Call{Call: _e.mock.On("GetLogEvents", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetLogEvents_Call) Run(run func(_a0 *cloudwatchlogs.GetLogEventsInput)) *MockCloudWatchLogsAPI_GetLogEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogEventsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEvents_Call) Return(_a0 *cloudwatchlogs.GetLogEventsOutput, _a1 error) *MockCloudWatchLogsAPI_GetLogEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEvents_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error)) *MockCloudWatchLogsAPI_GetLogEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogEventsPages provides a mock function with given fields: _a0, _a1
func (_m *MockCloudWatchLogsAPI) GetLogEventsPages(_a0 *cloudwatchlogs.GetLogEventsInput, _a1 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput, func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_GetLogEventsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogEventsPages'
type MockCloudWatchLogsAPI_GetLogEventsPages_Call struct {
	*mock.Call
}

// GetLogEventsPages is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogEventsInput
//   - _a1 func(*cloudwatchlogs.GetLogEventsOutput , bool) bool
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogEventsPages(_a0 interface{}, _a1 interface{}) *MockCloudWatchLogsAPI_GetLogEventsPages_Call {
	return &MockCloudWatchLogsAPI_GetLogEventsPages_Call{Call: _e.mock.On("GetLogEventsPages", _a0, _a1)}
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsPages_Call) Run(run func(_a0 *cloudwatchlogs.GetLogEventsInput, _a1 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool)) *MockCloudWatchLogsAPI_GetLogEventsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogEventsInput), args[1].(func(*cloudwatchlogs.GetLogEventsOutput, bool) bool))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsPages_Call) Return(_a0 error) *MockCloudWatchLogsAPI_GetLogEventsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsPages_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogEventsInput, func(*cloudwatchlogs.GetLogEventsOutput, bool) bool) error) *MockCloudWatchLogsAPI_GetLogEventsPages_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogEventsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCloudWatchLogsAPI) GetLogEventsPagesWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogEventsInput, _a2 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogEventsPagesWithContext'
type MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call struct {
	*mock.Call
}

// GetLogEventsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.GetLogEventsInput
//   - _a2 func(*cloudwatchlogs.GetLogEventsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogEventsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call {
	return &MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call{Call: _e.mock.On("GetLogEventsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.GetLogEventsInput, _a2 func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, _a3 ...request.Option)) *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.GetLogEventsInput), args[2].(func(*cloudwatchlogs.GetLogEventsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call) Return(_a0 error) *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.GetLogEventsInput, func(*cloudwatchlogs.GetLogEventsOutput, bool) bool, ...request.Option) error) *MockCloudWatchLogsAPI_GetLogEventsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogEventsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetLogEventsRequest(_a0 *cloudwatchlogs.GetLogEventsInput) (*request.Request, *cloudwatchlogs.GetLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.GetLogEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput) (*request.Request, *cloudwatchlogs.GetLogEventsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogEventsInput) *cloudwatchlogs.GetLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogEventsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogEventsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogEventsRequest'
type MockCloudWatchLogsAPI_GetLogEventsRequest_Call struct {
	*mock.Call
}

// GetLogEventsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogEventsInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogEventsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_GetLogEventsRequest_Call {
	return &MockCloudWatchLogsAPI_GetLogEventsRequest_Call{Call: _e.mock.On("GetLogEventsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsRequest_Call) Run(run func(_a0 *cloudwatchlogs.GetLogEventsInput)) *MockCloudWatchLogsAPI_GetLogEventsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogEventsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.GetLogEventsOutput) *MockCloudWatchLogsAPI_GetLogEventsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogEventsInput) (*request.Request, *cloudwatchlogs.GetLogEventsOutput)) *MockCloudWatchLogsAPI_GetLogEventsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) GetLogEventsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogEventsInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, ...request.Option) *cloudwatchlogs.GetLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogEventsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogEventsWithContext'
type MockCloudWatchLogsAPI_GetLogEventsWithContext_Call struct {
	*mock.Call
}

// GetLogEventsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.GetLogEventsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogEventsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call {
	return &MockCloudWatchLogsAPI_GetLogEventsWithContext_Call{Call: _e.mock.On("GetLogEventsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.GetLogEventsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.GetLogEventsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call) Return(_a0 *cloudwatchlogs.GetLogEventsOutput, _a1 error) *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.GetLogEventsInput, ...request.Option) (*cloudwatchlogs.GetLogEventsOutput, error)) *MockCloudWatchLogsAPI_GetLogEventsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogGroupFields provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetLogGroupFields(_a0 *cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogGroupFieldsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogGroupFieldsInput) *cloudwatchlogs.GetLogGroupFieldsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogGroupFieldsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogGroupFieldsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogGroupFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogGroupFields'
type MockCloudWatchLogsAPI_GetLogGroupFields_Call struct {
	*mock.Call
}

// GetLogGroupFields is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogGroupFieldsInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogGroupFields(_a0 interface{}) *MockCloudWatchLogsAPI_GetLogGroupFields_Call {
	return &MockCloudWatchLogsAPI_GetLogGroupFields_Call{Call: _e.mock.On("GetLogGroupFields", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFields_Call) Run(run func(_a0 *cloudwatchlogs.GetLogGroupFieldsInput)) *MockCloudWatchLogsAPI_GetLogGroupFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogGroupFieldsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFields_Call) Return(_a0 *cloudwatchlogs.GetLogGroupFieldsOutput, _a1 error) *MockCloudWatchLogsAPI_GetLogGroupFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFields_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogGroupFieldsInput) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)) *MockCloudWatchLogsAPI_GetLogGroupFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogGroupFieldsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetLogGroupFieldsRequest(_a0 *cloudwatchlogs.GetLogGroupFieldsInput) (*request.Request, *cloudwatchlogs.GetLogGroupFieldsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.GetLogGroupFieldsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogGroupFieldsInput) (*request.Request, *cloudwatchlogs.GetLogGroupFieldsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogGroupFieldsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogGroupFieldsInput) *cloudwatchlogs.GetLogGroupFieldsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogGroupFieldsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogGroupFieldsRequest'
type MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call struct {
	*mock.Call
}

// GetLogGroupFieldsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogGroupFieldsInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogGroupFieldsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call {
	return &MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call{Call: _e.mock.On("GetLogGroupFieldsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call) Run(run func(_a0 *cloudwatchlogs.GetLogGroupFieldsInput)) *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogGroupFieldsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.GetLogGroupFieldsOutput) *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogGroupFieldsInput) (*request.Request, *cloudwatchlogs.GetLogGroupFieldsOutput)) *MockCloudWatchLogsAPI_GetLogGroupFieldsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogGroupFieldsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) GetLogGroupFieldsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogGroupFieldsInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogGroupFieldsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogGroupFieldsInput, ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogGroupFieldsInput, ...request.Option) *cloudwatchlogs.GetLogGroupFieldsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogGroupFieldsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogGroupFieldsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogGroupFieldsWithContext'
type MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call struct {
	*mock.Call
}

// GetLogGroupFieldsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.GetLogGroupFieldsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogGroupFieldsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call {
	return &MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call{Call: _e.mock.On("GetLogGroupFieldsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.GetLogGroupFieldsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.GetLogGroupFieldsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call) Return(_a0 *cloudwatchlogs.GetLogGroupFieldsOutput, _a1 error) *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.GetLogGroupFieldsInput, ...request.Option) (*cloudwatchlogs.GetLogGroupFieldsOutput, error)) *MockCloudWatchLogsAPI_GetLogGroupFieldsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogRecord provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetLogRecord(_a0 *cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetLogRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogRecordInput) *cloudwatchlogs.GetLogRecordOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogRecordInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogRecord'
type MockCloudWatchLogsAPI_GetLogRecord_Call struct {
	*mock.Call
}

// GetLogRecord is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogRecordInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogRecord(_a0 interface{}) *MockCloudWatchLogsAPI_GetLogRecord_Call {
	return &MockCloudWatchLogsAPI_GetLogRecord_Call{Call: _e.mock.On("GetLogRecord", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetLogRecord_Call) Run(run func(_a0 *cloudwatchlogs.GetLogRecordInput)) *MockCloudWatchLogsAPI_GetLogRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogRecordInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogRecord_Call) Return(_a0 *cloudwatchlogs.GetLogRecordOutput, _a1 error) *MockCloudWatchLogsAPI_GetLogRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogRecord_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogRecordInput) (*cloudwatchlogs.GetLogRecordOutput, error)) *MockCloudWatchLogsAPI_GetLogRecord_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogRecordRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetLogRecordRequest(_a0 *cloudwatchlogs.GetLogRecordInput) (*request.Request, *cloudwatchlogs.GetLogRecordOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.GetLogRecordOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogRecordInput) (*request.Request, *cloudwatchlogs.GetLogRecordOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetLogRecordInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetLogRecordInput) *cloudwatchlogs.GetLogRecordOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetLogRecordOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogRecordRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogRecordRequest'
type MockCloudWatchLogsAPI_GetLogRecordRequest_Call struct {
	*mock.Call
}

// GetLogRecordRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetLogRecordInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogRecordRequest(_a0 interface{}) *MockCloudWatchLogsAPI_GetLogRecordRequest_Call {
	return &MockCloudWatchLogsAPI_GetLogRecordRequest_Call{Call: _e.mock.On("GetLogRecordRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetLogRecordRequest_Call) Run(run func(_a0 *cloudwatchlogs.GetLogRecordInput)) *MockCloudWatchLogsAPI_GetLogRecordRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetLogRecordInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogRecordRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.GetLogRecordOutput) *MockCloudWatchLogsAPI_GetLogRecordRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogRecordRequest_Call) RunAndReturn(run func(*cloudwatchlogs.GetLogRecordInput) (*request.Request, *cloudwatchlogs.GetLogRecordOutput)) *MockCloudWatchLogsAPI_GetLogRecordRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogRecordWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) GetLogRecordWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetLogRecordInput, _a2 ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetLogRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogRecordInput, ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetLogRecordInput, ...request.Option) *cloudwatchlogs.GetLogRecordOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetLogRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetLogRecordInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetLogRecordWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogRecordWithContext'
type MockCloudWatchLogsAPI_GetLogRecordWithContext_Call struct {
	*mock.Call
}

// GetLogRecordWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.GetLogRecordInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) GetLogRecordWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call {
	return &MockCloudWatchLogsAPI_GetLogRecordWithContext_Call{Call: _e.mock.On("GetLogRecordWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.GetLogRecordInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.GetLogRecordInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call) Return(_a0 *cloudwatchlogs.GetLogRecordOutput, _a1 error) *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.GetLogRecordInput, ...request.Option) (*cloudwatchlogs.GetLogRecordOutput, error)) *MockCloudWatchLogsAPI_GetLogRecordWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryResults provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetQueryResults(_a0 *cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.GetQueryResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetQueryResultsInput) *cloudwatchlogs.GetQueryResultsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetQueryResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetQueryResultsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetQueryResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryResults'
type MockCloudWatchLogsAPI_GetQueryResults_Call struct {
	*mock.Call
}

// GetQueryResults is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetQueryResultsInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetQueryResults(_a0 interface{}) *MockCloudWatchLogsAPI_GetQueryResults_Call {
	return &MockCloudWatchLogsAPI_GetQueryResults_Call{Call: _e.mock.On("GetQueryResults", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetQueryResults_Call) Run(run func(_a0 *cloudwatchlogs.GetQueryResultsInput)) *MockCloudWatchLogsAPI_GetQueryResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetQueryResultsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetQueryResults_Call) Return(_a0 *cloudwatchlogs.GetQueryResultsOutput, _a1 error) *MockCloudWatchLogsAPI_GetQueryResults_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetQueryResults_Call) RunAndReturn(run func(*cloudwatchlogs.GetQueryResultsInput) (*cloudwatchlogs.GetQueryResultsOutput, error)) *MockCloudWatchLogsAPI_GetQueryResults_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryResultsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) GetQueryResultsRequest(_a0 *cloudwatchlogs.GetQueryResultsInput) (*request.Request, *cloudwatchlogs.GetQueryResultsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.GetQueryResultsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetQueryResultsInput) (*request.Request, *cloudwatchlogs.GetQueryResultsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.GetQueryResultsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.GetQueryResultsInput) *cloudwatchlogs.GetQueryResultsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.GetQueryResultsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetQueryResultsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryResultsRequest'
type MockCloudWatchLogsAPI_GetQueryResultsRequest_Call struct {
	*mock.Call
}

// GetQueryResultsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.GetQueryResultsInput
func (_e *MockCloudWatchLogsAPI_Expecter) GetQueryResultsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call {
	return &MockCloudWatchLogsAPI_GetQueryResultsRequest_Call{Call: _e.mock.On("GetQueryResultsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call) Run(run func(_a0 *cloudwatchlogs.GetQueryResultsInput)) *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.GetQueryResultsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.GetQueryResultsOutput) *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.GetQueryResultsInput) (*request.Request, *cloudwatchlogs.GetQueryResultsOutput)) *MockCloudWatchLogsAPI_GetQueryResultsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueryResultsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) GetQueryResultsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.GetQueryResultsInput, _a2 ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.GetQueryResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetQueryResultsInput, ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.GetQueryResultsInput, ...request.Option) *cloudwatchlogs.GetQueryResultsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.GetQueryResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.GetQueryResultsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueryResultsWithContext'
type MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call struct {
	*mock.Call
}

// GetQueryResultsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.GetQueryResultsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) GetQueryResultsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call {
	return &MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call{Call: _e.mock.On("GetQueryResultsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.GetQueryResultsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.GetQueryResultsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call) Return(_a0 *cloudwatchlogs.GetQueryResultsOutput, _a1 error) *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.GetQueryResultsInput, ...request.Option) (*cloudwatchlogs.GetQueryResultsOutput, error)) *MockCloudWatchLogsAPI_GetQueryResultsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsForResource provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) ListTagsForResource(_a0 *cloudwatchlogs.ListTagsForResourceInput) (*cloudwatchlogs.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsForResourceInput) (*cloudwatchlogs.ListTagsForResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsForResourceInput) *cloudwatchlogs.ListTagsForResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_ListTagsForResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsForResource'
type MockCloudWatchLogsAPI_ListTagsForResource_Call struct {
	*mock.Call
}

// ListTagsForResource is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.ListTagsForResourceInput
func (_e *MockCloudWatchLogsAPI_Expecter) ListTagsForResource(_a0 interface{}) *MockCloudWatchLogsAPI_ListTagsForResource_Call {
	return &MockCloudWatchLogsAPI_ListTagsForResource_Call{Call: _e.mock.On("ListTagsForResource", _a0)}
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResource_Call) Run(run func(_a0 *cloudwatchlogs.ListTagsForResourceInput)) *MockCloudWatchLogsAPI_ListTagsForResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.ListTagsForResourceInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResource_Call) Return(_a0 *cloudwatchlogs.ListTagsForResourceOutput, _a1 error) *MockCloudWatchLogsAPI_ListTagsForResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResource_Call) RunAndReturn(run func(*cloudwatchlogs.ListTagsForResourceInput) (*cloudwatchlogs.ListTagsForResourceOutput, error)) *MockCloudWatchLogsAPI_ListTagsForResource_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsForResourceRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) ListTagsForResourceRequest(_a0 *cloudwatchlogs.ListTagsForResourceInput) (*request.Request, *cloudwatchlogs.ListTagsForResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsForResourceInput) (*request.Request, *cloudwatchlogs.ListTagsForResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsForResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsForResourceInput) *cloudwatchlogs.ListTagsForResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.ListTagsForResourceOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsForResourceRequest'
type MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call struct {
	*mock.Call
}

// ListTagsForResourceRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.ListTagsForResourceInput
func (_e *MockCloudWatchLogsAPI_Expecter) ListTagsForResourceRequest(_a0 interface{}) *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call {
	return &MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call{Call: _e.mock.On("ListTagsForResourceRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call) Run(run func(_a0 *cloudwatchlogs.ListTagsForResourceInput)) *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.ListTagsForResourceInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.ListTagsForResourceOutput) *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call) RunAndReturn(run func(*cloudwatchlogs.ListTagsForResourceInput) (*request.Request, *cloudwatchlogs.ListTagsForResourceOutput)) *MockCloudWatchLogsAPI_ListTagsForResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsForResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) ListTagsForResourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListTagsForResourceInput, _a2 ...request.Option) (*cloudwatchlogs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListTagsForResourceInput, ...request.Option) (*cloudwatchlogs.ListTagsForResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListTagsForResourceInput, ...request.Option) *cloudwatchlogs.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.ListTagsForResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsForResourceWithContext'
type MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call struct {
	*mock.Call
}

// ListTagsForResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.ListTagsForResourceInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) ListTagsForResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call {
	return &MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call{Call: _e.mock.On("ListTagsForResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.ListTagsForResourceInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.ListTagsForResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call) Return(_a0 *cloudwatchlogs.ListTagsForResourceOutput, _a1 error) *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.ListTagsForResourceInput, ...request.Option) (*cloudwatchlogs.ListTagsForResourceOutput, error)) *MockCloudWatchLogsAPI_ListTagsForResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsLogGroup provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) ListTagsLogGroup(_a0 *cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.ListTagsLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsLogGroupInput) *cloudwatchlogs.ListTagsLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_ListTagsLogGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsLogGroup'
type MockCloudWatchLogsAPI_ListTagsLogGroup_Call struct {
	*mock.Call
}

// ListTagsLogGroup is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.ListTagsLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) ListTagsLogGroup(_a0 interface{}) *MockCloudWatchLogsAPI_ListTagsLogGroup_Call {
	return &MockCloudWatchLogsAPI_ListTagsLogGroup_Call{Call: _e.mock.On("ListTagsLogGroup", _a0)}
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroup_Call) Run(run func(_a0 *cloudwatchlogs.ListTagsLogGroupInput)) *MockCloudWatchLogsAPI_ListTagsLogGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.ListTagsLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroup_Call) Return(_a0 *cloudwatchlogs.ListTagsLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_ListTagsLogGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroup_Call) RunAndReturn(run func(*cloudwatchlogs.ListTagsLogGroupInput) (*cloudwatchlogs.ListTagsLogGroupOutput, error)) *MockCloudWatchLogsAPI_ListTagsLogGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsLogGroupRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) ListTagsLogGroupRequest(_a0 *cloudwatchlogs.ListTagsLogGroupInput) (*request.Request, *cloudwatchlogs.ListTagsLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.ListTagsLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsLogGroupInput) (*request.Request, *cloudwatchlogs.ListTagsLogGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.ListTagsLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.ListTagsLogGroupInput) *cloudwatchlogs.ListTagsLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.ListTagsLogGroupOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsLogGroupRequest'
type MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call struct {
	*mock.Call
}

// ListTagsLogGroupRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.ListTagsLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) ListTagsLogGroupRequest(_a0 interface{}) *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call {
	return &MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call{Call: _e.mock.On("ListTagsLogGroupRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call) Run(run func(_a0 *cloudwatchlogs.ListTagsLogGroupInput)) *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.ListTagsLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.ListTagsLogGroupOutput) *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call) RunAndReturn(run func(*cloudwatchlogs.ListTagsLogGroupInput) (*request.Request, *cloudwatchlogs.ListTagsLogGroupOutput)) *MockCloudWatchLogsAPI_ListTagsLogGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) ListTagsLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.ListTagsLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.ListTagsLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListTagsLogGroupInput, ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.ListTagsLogGroupInput, ...request.Option) *cloudwatchlogs.ListTagsLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.ListTagsLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.ListTagsLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsLogGroupWithContext'
type MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call struct {
	*mock.Call
}

// ListTagsLogGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.ListTagsLogGroupInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) ListTagsLogGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call {
	return &MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call{Call: _e.mock.On("ListTagsLogGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.ListTagsLogGroupInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.ListTagsLogGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call) Return(_a0 *cloudwatchlogs.ListTagsLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.ListTagsLogGroupInput, ...request.Option) (*cloudwatchlogs.ListTagsLogGroupOutput, error)) *MockCloudWatchLogsAPI_ListTagsLogGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutAccountPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutAccountPolicy(_a0 *cloudwatchlogs.PutAccountPolicyInput) (*cloudwatchlogs.PutAccountPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutAccountPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutAccountPolicyInput) (*cloudwatchlogs.PutAccountPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutAccountPolicyInput) *cloudwatchlogs.PutAccountPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutAccountPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutAccountPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutAccountPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAccountPolicy'
type MockCloudWatchLogsAPI_PutAccountPolicy_Call struct {
	*mock.Call
}

// PutAccountPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutAccountPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutAccountPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_PutAccountPolicy_Call {
	return &MockCloudWatchLogsAPI_PutAccountPolicy_Call{Call: _e.mock.On("PutAccountPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicy_Call) Run(run func(_a0 *cloudwatchlogs.PutAccountPolicyInput)) *MockCloudWatchLogsAPI_PutAccountPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutAccountPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicy_Call) Return(_a0 *cloudwatchlogs.PutAccountPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutAccountPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.PutAccountPolicyInput) (*cloudwatchlogs.PutAccountPolicyOutput, error)) *MockCloudWatchLogsAPI_PutAccountPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutAccountPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutAccountPolicyRequest(_a0 *cloudwatchlogs.PutAccountPolicyInput) (*request.Request, *cloudwatchlogs.PutAccountPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutAccountPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutAccountPolicyInput) (*request.Request, *cloudwatchlogs.PutAccountPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutAccountPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutAccountPolicyInput) *cloudwatchlogs.PutAccountPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutAccountPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAccountPolicyRequest'
type MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call struct {
	*mock.Call
}

// PutAccountPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutAccountPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutAccountPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call{Call: _e.mock.On("PutAccountPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutAccountPolicyInput)) *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutAccountPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutAccountPolicyOutput) *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutAccountPolicyInput) (*request.Request, *cloudwatchlogs.PutAccountPolicyOutput)) *MockCloudWatchLogsAPI_PutAccountPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutAccountPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutAccountPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutAccountPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutAccountPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutAccountPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutAccountPolicyInput, ...request.Option) (*cloudwatchlogs.PutAccountPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutAccountPolicyInput, ...request.Option) *cloudwatchlogs.PutAccountPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutAccountPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutAccountPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutAccountPolicyWithContext'
type MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call struct {
	*mock.Call
}

// PutAccountPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutAccountPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutAccountPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call{Call: _e.mock.On("PutAccountPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutAccountPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutAccountPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.PutAccountPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutAccountPolicyInput, ...request.Option) (*cloudwatchlogs.PutAccountPolicyOutput, error)) *MockCloudWatchLogsAPI_PutAccountPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutDataProtectionPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutDataProtectionPolicy(_a0 *cloudwatchlogs.PutDataProtectionPolicyInput) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) *cloudwatchlogs.PutDataProtectionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDataProtectionPolicy'
type MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call struct {
	*mock.Call
}

// PutDataProtectionPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutDataProtectionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutDataProtectionPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call {
	return &MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call{Call: _e.mock.On("PutDataProtectionPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call) Run(run func(_a0 *cloudwatchlogs.PutDataProtectionPolicyInput)) *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutDataProtectionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call) Return(_a0 *cloudwatchlogs.PutDataProtectionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.PutDataProtectionPolicyInput) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error)) *MockCloudWatchLogsAPI_PutDataProtectionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutDataProtectionPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutDataProtectionPolicyRequest(_a0 *cloudwatchlogs.PutDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.PutDataProtectionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutDataProtectionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.PutDataProtectionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDataProtectionPolicyInput) *cloudwatchlogs.PutDataProtectionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDataProtectionPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDataProtectionPolicyRequest'
type MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call struct {
	*mock.Call
}

// PutDataProtectionPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutDataProtectionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutDataProtectionPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call{Call: _e.mock.On("PutDataProtectionPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutDataProtectionPolicyInput)) *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutDataProtectionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutDataProtectionPolicyOutput) *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutDataProtectionPolicyInput) (*request.Request, *cloudwatchlogs.PutDataProtectionPolicyOutput)) *MockCloudWatchLogsAPI_PutDataProtectionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutDataProtectionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutDataProtectionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDataProtectionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDataProtectionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDataProtectionPolicyInput, ...request.Option) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDataProtectionPolicyInput, ...request.Option) *cloudwatchlogs.PutDataProtectionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDataProtectionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDataProtectionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDataProtectionPolicyWithContext'
type MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call struct {
	*mock.Call
}

// PutDataProtectionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutDataProtectionPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutDataProtectionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call{Call: _e.mock.On("PutDataProtectionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutDataProtectionPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutDataProtectionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.PutDataProtectionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutDataProtectionPolicyInput, ...request.Option) (*cloudwatchlogs.PutDataProtectionPolicyOutput, error)) *MockCloudWatchLogsAPI_PutDataProtectionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutDestination provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutDestination(_a0 *cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationInput) *cloudwatchlogs.PutDestinationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDestination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDestination'
type MockCloudWatchLogsAPI_PutDestination_Call struct {
	*mock.Call
}

// PutDestination is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutDestinationInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutDestination(_a0 interface{}) *MockCloudWatchLogsAPI_PutDestination_Call {
	return &MockCloudWatchLogsAPI_PutDestination_Call{Call: _e.mock.On("PutDestination", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutDestination_Call) Run(run func(_a0 *cloudwatchlogs.PutDestinationInput)) *MockCloudWatchLogsAPI_PutDestination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutDestinationInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestination_Call) Return(_a0 *cloudwatchlogs.PutDestinationOutput, _a1 error) *MockCloudWatchLogsAPI_PutDestination_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestination_Call) RunAndReturn(run func(*cloudwatchlogs.PutDestinationInput) (*cloudwatchlogs.PutDestinationOutput, error)) *MockCloudWatchLogsAPI_PutDestination_Call {
	_c.Call.Return(run)
	return _c
}

// PutDestinationPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutDestinationPolicy(_a0 *cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutDestinationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationPolicyInput) *cloudwatchlogs.PutDestinationPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDestinationPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDestinationPolicy'
type MockCloudWatchLogsAPI_PutDestinationPolicy_Call struct {
	*mock.Call
}

// PutDestinationPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutDestinationPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutDestinationPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_PutDestinationPolicy_Call {
	return &MockCloudWatchLogsAPI_PutDestinationPolicy_Call{Call: _e.mock.On("PutDestinationPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicy_Call) Run(run func(_a0 *cloudwatchlogs.PutDestinationPolicyInput)) *MockCloudWatchLogsAPI_PutDestinationPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutDestinationPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicy_Call) Return(_a0 *cloudwatchlogs.PutDestinationPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutDestinationPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.PutDestinationPolicyInput) (*cloudwatchlogs.PutDestinationPolicyOutput, error)) *MockCloudWatchLogsAPI_PutDestinationPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutDestinationPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutDestinationPolicyRequest(_a0 *cloudwatchlogs.PutDestinationPolicyInput) (*request.Request, *cloudwatchlogs.PutDestinationPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutDestinationPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationPolicyInput) (*request.Request, *cloudwatchlogs.PutDestinationPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationPolicyInput) *cloudwatchlogs.PutDestinationPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDestinationPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDestinationPolicyRequest'
type MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call struct {
	*mock.Call
}

// PutDestinationPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutDestinationPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutDestinationPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call{Call: _e.mock.On("PutDestinationPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutDestinationPolicyInput)) *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutDestinationPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutDestinationPolicyOutput) *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutDestinationPolicyInput) (*request.Request, *cloudwatchlogs.PutDestinationPolicyOutput)) *MockCloudWatchLogsAPI_PutDestinationPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutDestinationPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutDestinationPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDestinationPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDestinationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDestinationPolicyInput, ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDestinationPolicyInput, ...request.Option) *cloudwatchlogs.PutDestinationPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDestinationPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDestinationPolicyWithContext'
type MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call struct {
	*mock.Call
}

// PutDestinationPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutDestinationPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutDestinationPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call{Call: _e.mock.On("PutDestinationPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutDestinationPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutDestinationPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.PutDestinationPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutDestinationPolicyInput, ...request.Option) (*cloudwatchlogs.PutDestinationPolicyOutput, error)) *MockCloudWatchLogsAPI_PutDestinationPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutDestinationRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutDestinationRequest(_a0 *cloudwatchlogs.PutDestinationInput) (*request.Request, *cloudwatchlogs.PutDestinationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutDestinationOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationInput) (*request.Request, *cloudwatchlogs.PutDestinationOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutDestinationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutDestinationInput) *cloudwatchlogs.PutDestinationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutDestinationOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDestinationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDestinationRequest'
type MockCloudWatchLogsAPI_PutDestinationRequest_Call struct {
	*mock.Call
}

// PutDestinationRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutDestinationInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutDestinationRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutDestinationRequest_Call {
	return &MockCloudWatchLogsAPI_PutDestinationRequest_Call{Call: _e.mock.On("PutDestinationRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutDestinationRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutDestinationInput)) *MockCloudWatchLogsAPI_PutDestinationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutDestinationInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutDestinationOutput) *MockCloudWatchLogsAPI_PutDestinationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutDestinationInput) (*request.Request, *cloudwatchlogs.PutDestinationOutput)) *MockCloudWatchLogsAPI_PutDestinationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutDestinationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutDestinationWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutDestinationInput, _a2 ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDestinationInput, ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutDestinationInput, ...request.Option) *cloudwatchlogs.PutDestinationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutDestinationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutDestinationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutDestinationWithContext'
type MockCloudWatchLogsAPI_PutDestinationWithContext_Call struct {
	*mock.Call
}

// PutDestinationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutDestinationInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutDestinationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutDestinationWithContext_Call {
	return &MockCloudWatchLogsAPI_PutDestinationWithContext_Call{Call: _e.mock.On("PutDestinationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutDestinationWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutDestinationInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutDestinationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutDestinationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationWithContext_Call) Return(_a0 *cloudwatchlogs.PutDestinationOutput, _a1 error) *MockCloudWatchLogsAPI_PutDestinationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutDestinationWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutDestinationInput, ...request.Option) (*cloudwatchlogs.PutDestinationOutput, error)) *MockCloudWatchLogsAPI_PutDestinationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutLogEvents provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutLogEvents(_a0 *cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutLogEventsInput) *cloudwatchlogs.PutLogEventsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutLogEventsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutLogEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLogEvents'
type MockCloudWatchLogsAPI_PutLogEvents_Call struct {
	*mock.Call
}

// PutLogEvents is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutLogEventsInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutLogEvents(_a0 interface{}) *MockCloudWatchLogsAPI_PutLogEvents_Call {
	return &MockCloudWatchLogsAPI_PutLogEvents_Call{Call: _e.mock.On("PutLogEvents", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutLogEvents_Call) Run(run func(_a0 *cloudwatchlogs.PutLogEventsInput)) *MockCloudWatchLogsAPI_PutLogEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutLogEventsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutLogEvents_Call) Return(_a0 *cloudwatchlogs.PutLogEventsOutput, _a1 error) *MockCloudWatchLogsAPI_PutLogEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutLogEvents_Call) RunAndReturn(run func(*cloudwatchlogs.PutLogEventsInput) (*cloudwatchlogs.PutLogEventsOutput, error)) *MockCloudWatchLogsAPI_PutLogEvents_Call {
	_c.Call.Return(run)
	return _c
}

// PutLogEventsRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutLogEventsRequest(_a0 *cloudwatchlogs.PutLogEventsInput) (*request.Request, *cloudwatchlogs.PutLogEventsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutLogEventsOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutLogEventsInput) (*request.Request, *cloudwatchlogs.PutLogEventsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutLogEventsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutLogEventsInput) *cloudwatchlogs.PutLogEventsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutLogEventsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLogEventsRequest'
type MockCloudWatchLogsAPI_PutLogEventsRequest_Call struct {
	*mock.Call
}

// PutLogEventsRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutLogEventsInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutLogEventsRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutLogEventsRequest_Call {
	return &MockCloudWatchLogsAPI_PutLogEventsRequest_Call{Call: _e.mock.On("PutLogEventsRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutLogEventsRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutLogEventsInput)) *MockCloudWatchLogsAPI_PutLogEventsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutLogEventsInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutLogEventsRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutLogEventsOutput) *MockCloudWatchLogsAPI_PutLogEventsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutLogEventsRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutLogEventsInput) (*request.Request, *cloudwatchlogs.PutLogEventsOutput)) *MockCloudWatchLogsAPI_PutLogEventsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutLogEventsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutLogEventsWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutLogEventsInput, _a2 ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...request.Option) *cloudwatchlogs.PutLogEventsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutLogEventsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutLogEventsWithContext'
type MockCloudWatchLogsAPI_PutLogEventsWithContext_Call struct {
	*mock.Call
}

// PutLogEventsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutLogEventsInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutLogEventsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call {
	return &MockCloudWatchLogsAPI_PutLogEventsWithContext_Call{Call: _e.mock.On("PutLogEventsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutLogEventsInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutLogEventsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call) Return(_a0 *cloudwatchlogs.PutLogEventsOutput, _a1 error) *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutLogEventsInput, ...request.Option) (*cloudwatchlogs.PutLogEventsOutput, error)) *MockCloudWatchLogsAPI_PutLogEventsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutMetricFilter provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutMetricFilter(_a0 *cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutMetricFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutMetricFilterInput) *cloudwatchlogs.PutMetricFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutMetricFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutMetricFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutMetricFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMetricFilter'
type MockCloudWatchLogsAPI_PutMetricFilter_Call struct {
	*mock.Call
}

// PutMetricFilter is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutMetricFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutMetricFilter(_a0 interface{}) *MockCloudWatchLogsAPI_PutMetricFilter_Call {
	return &MockCloudWatchLogsAPI_PutMetricFilter_Call{Call: _e.mock.On("PutMetricFilter", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilter_Call) Run(run func(_a0 *cloudwatchlogs.PutMetricFilterInput)) *MockCloudWatchLogsAPI_PutMetricFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutMetricFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilter_Call) Return(_a0 *cloudwatchlogs.PutMetricFilterOutput, _a1 error) *MockCloudWatchLogsAPI_PutMetricFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilter_Call) RunAndReturn(run func(*cloudwatchlogs.PutMetricFilterInput) (*cloudwatchlogs.PutMetricFilterOutput, error)) *MockCloudWatchLogsAPI_PutMetricFilter_Call {
	_c.Call.Return(run)
	return _c
}

// PutMetricFilterRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutMetricFilterRequest(_a0 *cloudwatchlogs.PutMetricFilterInput) (*request.Request, *cloudwatchlogs.PutMetricFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutMetricFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutMetricFilterInput) (*request.Request, *cloudwatchlogs.PutMetricFilterOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutMetricFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutMetricFilterInput) *cloudwatchlogs.PutMetricFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutMetricFilterOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutMetricFilterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMetricFilterRequest'
type MockCloudWatchLogsAPI_PutMetricFilterRequest_Call struct {
	*mock.Call
}

// PutMetricFilterRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutMetricFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutMetricFilterRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call {
	return &MockCloudWatchLogsAPI_PutMetricFilterRequest_Call{Call: _e.mock.On("PutMetricFilterRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutMetricFilterInput)) *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutMetricFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutMetricFilterOutput) *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutMetricFilterInput) (*request.Request, *cloudwatchlogs.PutMetricFilterOutput)) *MockCloudWatchLogsAPI_PutMetricFilterRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutMetricFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutMetricFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutMetricFilterInput, _a2 ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutMetricFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutMetricFilterInput, ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutMetricFilterInput, ...request.Option) *cloudwatchlogs.PutMetricFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutMetricFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutMetricFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutMetricFilterWithContext'
type MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call struct {
	*mock.Call
}

// PutMetricFilterWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutMetricFilterInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutMetricFilterWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call {
	return &MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call{Call: _e.mock.On("PutMetricFilterWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutMetricFilterInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutMetricFilterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call) Return(_a0 *cloudwatchlogs.PutMetricFilterOutput, _a1 error) *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutMetricFilterInput, ...request.Option) (*cloudwatchlogs.PutMetricFilterOutput, error)) *MockCloudWatchLogsAPI_PutMetricFilterWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutQueryDefinition provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutQueryDefinition(_a0 *cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutQueryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutQueryDefinitionInput) *cloudwatchlogs.PutQueryDefinitionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutQueryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutQueryDefinitionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutQueryDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutQueryDefinition'
type MockCloudWatchLogsAPI_PutQueryDefinition_Call struct {
	*mock.Call
}

// PutQueryDefinition is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutQueryDefinitionInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutQueryDefinition(_a0 interface{}) *MockCloudWatchLogsAPI_PutQueryDefinition_Call {
	return &MockCloudWatchLogsAPI_PutQueryDefinition_Call{Call: _e.mock.On("PutQueryDefinition", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinition_Call) Run(run func(_a0 *cloudwatchlogs.PutQueryDefinitionInput)) *MockCloudWatchLogsAPI_PutQueryDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutQueryDefinitionInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinition_Call) Return(_a0 *cloudwatchlogs.PutQueryDefinitionOutput, _a1 error) *MockCloudWatchLogsAPI_PutQueryDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinition_Call) RunAndReturn(run func(*cloudwatchlogs.PutQueryDefinitionInput) (*cloudwatchlogs.PutQueryDefinitionOutput, error)) *MockCloudWatchLogsAPI_PutQueryDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// PutQueryDefinitionRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutQueryDefinitionRequest(_a0 *cloudwatchlogs.PutQueryDefinitionInput) (*request.Request, *cloudwatchlogs.PutQueryDefinitionOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutQueryDefinitionOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutQueryDefinitionInput) (*request.Request, *cloudwatchlogs.PutQueryDefinitionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutQueryDefinitionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutQueryDefinitionInput) *cloudwatchlogs.PutQueryDefinitionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutQueryDefinitionOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutQueryDefinitionRequest'
type MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call struct {
	*mock.Call
}

// PutQueryDefinitionRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutQueryDefinitionInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutQueryDefinitionRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call {
	return &MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call{Call: _e.mock.On("PutQueryDefinitionRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutQueryDefinitionInput)) *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutQueryDefinitionInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutQueryDefinitionOutput) *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutQueryDefinitionInput) (*request.Request, *cloudwatchlogs.PutQueryDefinitionOutput)) *MockCloudWatchLogsAPI_PutQueryDefinitionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutQueryDefinitionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutQueryDefinitionWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutQueryDefinitionInput, _a2 ...request.Option) (*cloudwatchlogs.PutQueryDefinitionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutQueryDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutQueryDefinitionInput, ...request.Option) (*cloudwatchlogs.PutQueryDefinitionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutQueryDefinitionInput, ...request.Option) *cloudwatchlogs.PutQueryDefinitionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutQueryDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutQueryDefinitionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutQueryDefinitionWithContext'
type MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call struct {
	*mock.Call
}

// PutQueryDefinitionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutQueryDefinitionInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutQueryDefinitionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call {
	return &MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call{Call: _e.mock.On("PutQueryDefinitionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutQueryDefinitionInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutQueryDefinitionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call) Return(_a0 *cloudwatchlogs.PutQueryDefinitionOutput, _a1 error) *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutQueryDefinitionInput, ...request.Option) (*cloudwatchlogs.PutQueryDefinitionOutput, error)) *MockCloudWatchLogsAPI_PutQueryDefinitionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutResourcePolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutResourcePolicy(_a0 *cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutResourcePolicyInput) *cloudwatchlogs.PutResourcePolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutResourcePolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutResourcePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutResourcePolicy'
type MockCloudWatchLogsAPI_PutResourcePolicy_Call struct {
	*mock.Call
}

// PutResourcePolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutResourcePolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutResourcePolicy(_a0 interface{}) *MockCloudWatchLogsAPI_PutResourcePolicy_Call {
	return &MockCloudWatchLogsAPI_PutResourcePolicy_Call{Call: _e.mock.On("PutResourcePolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicy_Call) Run(run func(_a0 *cloudwatchlogs.PutResourcePolicyInput)) *MockCloudWatchLogsAPI_PutResourcePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutResourcePolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicy_Call) Return(_a0 *cloudwatchlogs.PutResourcePolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutResourcePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicy_Call) RunAndReturn(run func(*cloudwatchlogs.PutResourcePolicyInput) (*cloudwatchlogs.PutResourcePolicyOutput, error)) *MockCloudWatchLogsAPI_PutResourcePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutResourcePolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutResourcePolicyRequest(_a0 *cloudwatchlogs.PutResourcePolicyInput) (*request.Request, *cloudwatchlogs.PutResourcePolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutResourcePolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutResourcePolicyInput) (*request.Request, *cloudwatchlogs.PutResourcePolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutResourcePolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutResourcePolicyInput) *cloudwatchlogs.PutResourcePolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutResourcePolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutResourcePolicyRequest'
type MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call struct {
	*mock.Call
}

// PutResourcePolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutResourcePolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutResourcePolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call {
	return &MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call{Call: _e.mock.On("PutResourcePolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutResourcePolicyInput)) *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutResourcePolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutResourcePolicyOutput) *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutResourcePolicyInput) (*request.Request, *cloudwatchlogs.PutResourcePolicyOutput)) *MockCloudWatchLogsAPI_PutResourcePolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutResourcePolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutResourcePolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutResourcePolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutResourcePolicyInput, ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutResourcePolicyInput, ...request.Option) *cloudwatchlogs.PutResourcePolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutResourcePolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutResourcePolicyWithContext'
type MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call struct {
	*mock.Call
}

// PutResourcePolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutResourcePolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutResourcePolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call{Call: _e.mock.On("PutResourcePolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutResourcePolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutResourcePolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call) Return(_a0 *cloudwatchlogs.PutResourcePolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutResourcePolicyInput, ...request.Option) (*cloudwatchlogs.PutResourcePolicyOutput, error)) *MockCloudWatchLogsAPI_PutResourcePolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutRetentionPolicy provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutRetentionPolicy(_a0 *cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutRetentionPolicyInput) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutRetentionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutRetentionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRetentionPolicy'
type MockCloudWatchLogsAPI_PutRetentionPolicy_Call struct {
	*mock.Call
}

// PutRetentionPolicy is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutRetentionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutRetentionPolicy(_a0 interface{}) *MockCloudWatchLogsAPI_PutRetentionPolicy_Call {
	return &MockCloudWatchLogsAPI_PutRetentionPolicy_Call{Call: _e.mock.On("PutRetentionPolicy", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicy_Call) Run(run func(_a0 *cloudwatchlogs.PutRetentionPolicyInput)) *MockCloudWatchLogsAPI_PutRetentionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutRetentionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicy_Call) Return(_a0 *cloudwatchlogs.PutRetentionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutRetentionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicy_Call) RunAndReturn(run func(*cloudwatchlogs.PutRetentionPolicyInput) (*cloudwatchlogs.PutRetentionPolicyOutput, error)) *MockCloudWatchLogsAPI_PutRetentionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// PutRetentionPolicyRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutRetentionPolicyRequest(_a0 *cloudwatchlogs.PutRetentionPolicyInput) (*request.Request, *cloudwatchlogs.PutRetentionPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutRetentionPolicyOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutRetentionPolicyInput) (*request.Request, *cloudwatchlogs.PutRetentionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutRetentionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutRetentionPolicyInput) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRetentionPolicyRequest'
type MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call struct {
	*mock.Call
}

// PutRetentionPolicyRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutRetentionPolicyInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutRetentionPolicyRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call {
	return &MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call{Call: _e.mock.On("PutRetentionPolicyRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutRetentionPolicyInput)) *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutRetentionPolicyInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutRetentionPolicyOutput) *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutRetentionPolicyInput) (*request.Request, *cloudwatchlogs.PutRetentionPolicyOutput)) *MockCloudWatchLogsAPI_PutRetentionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutRetentionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutRetentionPolicyWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutRetentionPolicyInput, _a2 ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...request.Option) *cloudwatchlogs.PutRetentionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRetentionPolicyWithContext'
type MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call struct {
	*mock.Call
}

// PutRetentionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutRetentionPolicyInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutRetentionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call {
	return &MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call{Call: _e.mock.On("PutRetentionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutRetentionPolicyInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutRetentionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call) Return(_a0 *cloudwatchlogs.PutRetentionPolicyOutput, _a1 error) *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutRetentionPolicyInput, ...request.Option) (*cloudwatchlogs.PutRetentionPolicyOutput, error)) *MockCloudWatchLogsAPI_PutRetentionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutSubscriptionFilter provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutSubscriptionFilter(_a0 *cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.PutSubscriptionFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutSubscriptionFilterInput) *cloudwatchlogs.PutSubscriptionFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutSubscriptionFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutSubscriptionFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutSubscriptionFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSubscriptionFilter'
type MockCloudWatchLogsAPI_PutSubscriptionFilter_Call struct {
	*mock.Call
}

// PutSubscriptionFilter is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutSubscriptionFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutSubscriptionFilter(_a0 interface{}) *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call {
	return &MockCloudWatchLogsAPI_PutSubscriptionFilter_Call{Call: _e.mock.On("PutSubscriptionFilter", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call) Run(run func(_a0 *cloudwatchlogs.PutSubscriptionFilterInput)) *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutSubscriptionFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call) Return(_a0 *cloudwatchlogs.PutSubscriptionFilterOutput, _a1 error) *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call) RunAndReturn(run func(*cloudwatchlogs.PutSubscriptionFilterInput) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)) *MockCloudWatchLogsAPI_PutSubscriptionFilter_Call {
	_c.Call.Return(run)
	return _c
}

// PutSubscriptionFilterRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) PutSubscriptionFilterRequest(_a0 *cloudwatchlogs.PutSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.PutSubscriptionFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.PutSubscriptionFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.PutSubscriptionFilterOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.PutSubscriptionFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.PutSubscriptionFilterInput) *cloudwatchlogs.PutSubscriptionFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.PutSubscriptionFilterOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSubscriptionFilterRequest'
type MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call struct {
	*mock.Call
}

// PutSubscriptionFilterRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.PutSubscriptionFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) PutSubscriptionFilterRequest(_a0 interface{}) *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call {
	return &MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call{Call: _e.mock.On("PutSubscriptionFilterRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call) Run(run func(_a0 *cloudwatchlogs.PutSubscriptionFilterInput)) *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.PutSubscriptionFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.PutSubscriptionFilterOutput) *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call) RunAndReturn(run func(*cloudwatchlogs.PutSubscriptionFilterInput) (*request.Request, *cloudwatchlogs.PutSubscriptionFilterOutput)) *MockCloudWatchLogsAPI_PutSubscriptionFilterRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutSubscriptionFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) PutSubscriptionFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.PutSubscriptionFilterInput, _a2 ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.PutSubscriptionFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutSubscriptionFilterInput, ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.PutSubscriptionFilterInput, ...request.Option) *cloudwatchlogs.PutSubscriptionFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.PutSubscriptionFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.PutSubscriptionFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutSubscriptionFilterWithContext'
type MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call struct {
	*mock.Call
}

// PutSubscriptionFilterWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.PutSubscriptionFilterInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) PutSubscriptionFilterWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call {
	return &MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call{Call: _e.mock.On("PutSubscriptionFilterWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.PutSubscriptionFilterInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.PutSubscriptionFilterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call) Return(_a0 *cloudwatchlogs.PutSubscriptionFilterOutput, _a1 error) *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.PutSubscriptionFilterInput, ...request.Option) (*cloudwatchlogs.PutSubscriptionFilterOutput, error)) *MockCloudWatchLogsAPI_PutSubscriptionFilterWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// StartQuery provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) StartQuery(_a0 *cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.StartQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartQueryInput) *cloudwatchlogs.StartQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StartQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StartQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_StartQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartQuery'
type MockCloudWatchLogsAPI_StartQuery_Call struct {
	*mock.Call
}

// StartQuery is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.StartQueryInput
func (_e *MockCloudWatchLogsAPI_Expecter) StartQuery(_a0 interface{}) *MockCloudWatchLogsAPI_StartQuery_Call {
	return &MockCloudWatchLogsAPI_StartQuery_Call{Call: _e.mock.On("StartQuery", _a0)}
}

func (_c *MockCloudWatchLogsAPI_StartQuery_Call) Run(run func(_a0 *cloudwatchlogs.StartQueryInput)) *MockCloudWatchLogsAPI_StartQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.StartQueryInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_StartQuery_Call) Return(_a0 *cloudwatchlogs.StartQueryOutput, _a1 error) *MockCloudWatchLogsAPI_StartQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_StartQuery_Call) RunAndReturn(run func(*cloudwatchlogs.StartQueryInput) (*cloudwatchlogs.StartQueryOutput, error)) *MockCloudWatchLogsAPI_StartQuery_Call {
	_c.Call.Return(run)
	return _c
}

// StartQueryRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) StartQueryRequest(_a0 *cloudwatchlogs.StartQueryInput) (*request.Request, *cloudwatchlogs.StartQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.StartQueryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartQueryInput) (*request.Request, *cloudwatchlogs.StartQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StartQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StartQueryInput) *cloudwatchlogs.StartQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.StartQueryOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_StartQueryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartQueryRequest'
type MockCloudWatchLogsAPI_StartQueryRequest_Call struct {
	*mock.Call
}

// StartQueryRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.StartQueryInput
func (_e *MockCloudWatchLogsAPI_Expecter) StartQueryRequest(_a0 interface{}) *MockCloudWatchLogsAPI_StartQueryRequest_Call {
	return &MockCloudWatchLogsAPI_StartQueryRequest_Call{Call: _e.mock.On("StartQueryRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_StartQueryRequest_Call) Run(run func(_a0 *cloudwatchlogs.StartQueryInput)) *MockCloudWatchLogsAPI_StartQueryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.StartQueryInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_StartQueryRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.StartQueryOutput) *MockCloudWatchLogsAPI_StartQueryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_StartQueryRequest_Call) RunAndReturn(run func(*cloudwatchlogs.StartQueryInput) (*request.Request, *cloudwatchlogs.StartQueryOutput)) *MockCloudWatchLogsAPI_StartQueryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// StartQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) StartQueryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.StartQueryInput, _a2 ...request.Option) (*cloudwatchlogs.StartQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.StartQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StartQueryInput, ...request.Option) (*cloudwatchlogs.StartQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StartQueryInput, ...request.Option) *cloudwatchlogs.StartQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StartQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.StartQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_StartQueryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartQueryWithContext'
type MockCloudWatchLogsAPI_StartQueryWithContext_Call struct {
	*mock.Call
}

// StartQueryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.StartQueryInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) StartQueryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_StartQueryWithContext_Call {
	return &MockCloudWatchLogsAPI_StartQueryWithContext_Call{Call: _e.mock.On("StartQueryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_StartQueryWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.StartQueryInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_StartQueryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.StartQueryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_StartQueryWithContext_Call) Return(_a0 *cloudwatchlogs.StartQueryOutput, _a1 error) *MockCloudWatchLogsAPI_StartQueryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_StartQueryWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.StartQueryInput, ...request.Option) (*cloudwatchlogs.StartQueryOutput, error)) *MockCloudWatchLogsAPI_StartQueryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// StopQuery provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) StopQuery(_a0 *cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.StopQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StopQueryInput) *cloudwatchlogs.StopQueryOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StopQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StopQueryInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_StopQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopQuery'
type MockCloudWatchLogsAPI_StopQuery_Call struct {
	*mock.Call
}

// StopQuery is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.StopQueryInput
func (_e *MockCloudWatchLogsAPI_Expecter) StopQuery(_a0 interface{}) *MockCloudWatchLogsAPI_StopQuery_Call {
	return &MockCloudWatchLogsAPI_StopQuery_Call{Call: _e.mock.On("StopQuery", _a0)}
}

func (_c *MockCloudWatchLogsAPI_StopQuery_Call) Run(run func(_a0 *cloudwatchlogs.StopQueryInput)) *MockCloudWatchLogsAPI_StopQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.StopQueryInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_StopQuery_Call) Return(_a0 *cloudwatchlogs.StopQueryOutput, _a1 error) *MockCloudWatchLogsAPI_StopQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_StopQuery_Call) RunAndReturn(run func(*cloudwatchlogs.StopQueryInput) (*cloudwatchlogs.StopQueryOutput, error)) *MockCloudWatchLogsAPI_StopQuery_Call {
	_c.Call.Return(run)
	return _c
}

// StopQueryRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) StopQueryRequest(_a0 *cloudwatchlogs.StopQueryInput) (*request.Request, *cloudwatchlogs.StopQueryOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.StopQueryOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StopQueryInput) (*request.Request, *cloudwatchlogs.StopQueryOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.StopQueryInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.StopQueryInput) *cloudwatchlogs.StopQueryOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.StopQueryOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_StopQueryRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopQueryRequest'
type MockCloudWatchLogsAPI_StopQueryRequest_Call struct {
	*mock.Call
}

// StopQueryRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.StopQueryInput
func (_e *MockCloudWatchLogsAPI_Expecter) StopQueryRequest(_a0 interface{}) *MockCloudWatchLogsAPI_StopQueryRequest_Call {
	return &MockCloudWatchLogsAPI_StopQueryRequest_Call{Call: _e.mock.On("StopQueryRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_StopQueryRequest_Call) Run(run func(_a0 *cloudwatchlogs.StopQueryInput)) *MockCloudWatchLogsAPI_StopQueryRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.StopQueryInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_StopQueryRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.StopQueryOutput) *MockCloudWatchLogsAPI_StopQueryRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_StopQueryRequest_Call) RunAndReturn(run func(*cloudwatchlogs.StopQueryInput) (*request.Request, *cloudwatchlogs.StopQueryOutput)) *MockCloudWatchLogsAPI_StopQueryRequest_Call {
	_c.Call.Return(run)
	return _c
}

// StopQueryWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) StopQueryWithContext(_a0 context.Context, _a1 *cloudwatchlogs.StopQueryInput, _a2 ...request.Option) (*cloudwatchlogs.StopQueryOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.StopQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StopQueryInput, ...request.Option) (*cloudwatchlogs.StopQueryOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.StopQueryInput, ...request.Option) *cloudwatchlogs.StopQueryOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.StopQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.StopQueryInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_StopQueryWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopQueryWithContext'
type MockCloudWatchLogsAPI_StopQueryWithContext_Call struct {
	*mock.Call
}

// StopQueryWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.StopQueryInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) StopQueryWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_StopQueryWithContext_Call {
	return &MockCloudWatchLogsAPI_StopQueryWithContext_Call{Call: _e.mock.On("StopQueryWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_StopQueryWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.StopQueryInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_StopQueryWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.StopQueryInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_StopQueryWithContext_Call) Return(_a0 *cloudwatchlogs.StopQueryOutput, _a1 error) *MockCloudWatchLogsAPI_StopQueryWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_StopQueryWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.StopQueryInput, ...request.Option) (*cloudwatchlogs.StopQueryOutput, error)) *MockCloudWatchLogsAPI_StopQueryWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagLogGroup provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) TagLogGroup(_a0 *cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.TagLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagLogGroupInput) *cloudwatchlogs.TagLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TagLogGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagLogGroup'
type MockCloudWatchLogsAPI_TagLogGroup_Call struct {
	*mock.Call
}

// TagLogGroup is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.TagLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) TagLogGroup(_a0 interface{}) *MockCloudWatchLogsAPI_TagLogGroup_Call {
	return &MockCloudWatchLogsAPI_TagLogGroup_Call{Call: _e.mock.On("TagLogGroup", _a0)}
}

func (_c *MockCloudWatchLogsAPI_TagLogGroup_Call) Run(run func(_a0 *cloudwatchlogs.TagLogGroupInput)) *MockCloudWatchLogsAPI_TagLogGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.TagLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagLogGroup_Call) Return(_a0 *cloudwatchlogs.TagLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_TagLogGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagLogGroup_Call) RunAndReturn(run func(*cloudwatchlogs.TagLogGroupInput) (*cloudwatchlogs.TagLogGroupOutput, error)) *MockCloudWatchLogsAPI_TagLogGroup_Call {
	_c.Call.Return(run)
	return _c
}

// TagLogGroupRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) TagLogGroupRequest(_a0 *cloudwatchlogs.TagLogGroupInput) (*request.Request, *cloudwatchlogs.TagLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.TagLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagLogGroupInput) (*request.Request, *cloudwatchlogs.TagLogGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagLogGroupInput) *cloudwatchlogs.TagLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.TagLogGroupOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TagLogGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagLogGroupRequest'
type MockCloudWatchLogsAPI_TagLogGroupRequest_Call struct {
	*mock.Call
}

// TagLogGroupRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.TagLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) TagLogGroupRequest(_a0 interface{}) *MockCloudWatchLogsAPI_TagLogGroupRequest_Call {
	return &MockCloudWatchLogsAPI_TagLogGroupRequest_Call{Call: _e.mock.On("TagLogGroupRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_TagLogGroupRequest_Call) Run(run func(_a0 *cloudwatchlogs.TagLogGroupInput)) *MockCloudWatchLogsAPI_TagLogGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.TagLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagLogGroupRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.TagLogGroupOutput) *MockCloudWatchLogsAPI_TagLogGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagLogGroupRequest_Call) RunAndReturn(run func(*cloudwatchlogs.TagLogGroupInput) (*request.Request, *cloudwatchlogs.TagLogGroupOutput)) *MockCloudWatchLogsAPI_TagLogGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) TagLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.TagLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.TagLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TagLogGroupInput, ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TagLogGroupInput, ...request.Option) *cloudwatchlogs.TagLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.TagLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TagLogGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagLogGroupWithContext'
type MockCloudWatchLogsAPI_TagLogGroupWithContext_Call struct {
	*mock.Call
}

// TagLogGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.TagLogGroupInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) TagLogGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call {
	return &MockCloudWatchLogsAPI_TagLogGroupWithContext_Call{Call: _e.mock.On("TagLogGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.TagLogGroupInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.TagLogGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call) Return(_a0 *cloudwatchlogs.TagLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.TagLogGroupInput, ...request.Option) (*cloudwatchlogs.TagLogGroupOutput, error)) *MockCloudWatchLogsAPI_TagLogGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagResource provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) TagResource(_a0 *cloudwatchlogs.TagResourceInput) (*cloudwatchlogs.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagResourceInput) (*cloudwatchlogs.TagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagResourceInput) *cloudwatchlogs.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResource'
type MockCloudWatchLogsAPI_TagResource_Call struct {
	*mock.Call
}

// TagResource is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.TagResourceInput
func (_e *MockCloudWatchLogsAPI_Expecter) TagResource(_a0 interface{}) *MockCloudWatchLogsAPI_TagResource_Call {
	return &MockCloudWatchLogsAPI_TagResource_Call{Call: _e.mock.On("TagResource", _a0)}
}

func (_c *MockCloudWatchLogsAPI_TagResource_Call) Run(run func(_a0 *cloudwatchlogs.TagResourceInput)) *MockCloudWatchLogsAPI_TagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.TagResourceInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagResource_Call) Return(_a0 *cloudwatchlogs.TagResourceOutput, _a1 error) *MockCloudWatchLogsAPI_TagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagResource_Call) RunAndReturn(run func(*cloudwatchlogs.TagResourceInput) (*cloudwatchlogs.TagResourceOutput, error)) *MockCloudWatchLogsAPI_TagResource_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) TagResourceRequest(_a0 *cloudwatchlogs.TagResourceInput) (*request.Request, *cloudwatchlogs.TagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagResourceInput) (*request.Request, *cloudwatchlogs.TagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TagResourceInput) *cloudwatchlogs.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.TagResourceOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceRequest'
type MockCloudWatchLogsAPI_TagResourceRequest_Call struct {
	*mock.Call
}

// TagResourceRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.TagResourceInput
func (_e *MockCloudWatchLogsAPI_Expecter) TagResourceRequest(_a0 interface{}) *MockCloudWatchLogsAPI_TagResourceRequest_Call {
	return &MockCloudWatchLogsAPI_TagResourceRequest_Call{Call: _e.mock.On("TagResourceRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_TagResourceRequest_Call) Run(run func(_a0 *cloudwatchlogs.TagResourceInput)) *MockCloudWatchLogsAPI_TagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.TagResourceInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagResourceRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.TagResourceOutput) *MockCloudWatchLogsAPI_TagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagResourceRequest_Call) RunAndReturn(run func(*cloudwatchlogs.TagResourceInput) (*request.Request, *cloudwatchlogs.TagResourceOutput)) *MockCloudWatchLogsAPI_TagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) TagResourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.TagResourceInput, _a2 ...request.Option) (*cloudwatchlogs.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TagResourceInput, ...request.Option) (*cloudwatchlogs.TagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TagResourceInput, ...request.Option) *cloudwatchlogs.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceWithContext'
type MockCloudWatchLogsAPI_TagResourceWithContext_Call struct {
	*mock.Call
}

// TagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.TagResourceInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) TagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_TagResourceWithContext_Call {
	return &MockCloudWatchLogsAPI_TagResourceWithContext_Call{Call: _e.mock.On("TagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_TagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.TagResourceInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_TagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.TagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagResourceWithContext_Call) Return(_a0 *cloudwatchlogs.TagResourceOutput, _a1 error) *MockCloudWatchLogsAPI_TagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TagResourceWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.TagResourceInput, ...request.Option) (*cloudwatchlogs.TagResourceOutput, error)) *MockCloudWatchLogsAPI_TagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TestMetricFilter provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) TestMetricFilter(_a0 *cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.TestMetricFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TestMetricFilterInput) *cloudwatchlogs.TestMetricFilterOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TestMetricFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TestMetricFilterInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TestMetricFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestMetricFilter'
type MockCloudWatchLogsAPI_TestMetricFilter_Call struct {
	*mock.Call
}

// TestMetricFilter is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.TestMetricFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) TestMetricFilter(_a0 interface{}) *MockCloudWatchLogsAPI_TestMetricFilter_Call {
	return &MockCloudWatchLogsAPI_TestMetricFilter_Call{Call: _e.mock.On("TestMetricFilter", _a0)}
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilter_Call) Run(run func(_a0 *cloudwatchlogs.TestMetricFilterInput)) *MockCloudWatchLogsAPI_TestMetricFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.TestMetricFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilter_Call) Return(_a0 *cloudwatchlogs.TestMetricFilterOutput, _a1 error) *MockCloudWatchLogsAPI_TestMetricFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilter_Call) RunAndReturn(run func(*cloudwatchlogs.TestMetricFilterInput) (*cloudwatchlogs.TestMetricFilterOutput, error)) *MockCloudWatchLogsAPI_TestMetricFilter_Call {
	_c.Call.Return(run)
	return _c
}

// TestMetricFilterRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) TestMetricFilterRequest(_a0 *cloudwatchlogs.TestMetricFilterInput) (*request.Request, *cloudwatchlogs.TestMetricFilterOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.TestMetricFilterOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TestMetricFilterInput) (*request.Request, *cloudwatchlogs.TestMetricFilterOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.TestMetricFilterInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.TestMetricFilterInput) *cloudwatchlogs.TestMetricFilterOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.TestMetricFilterOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TestMetricFilterRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestMetricFilterRequest'
type MockCloudWatchLogsAPI_TestMetricFilterRequest_Call struct {
	*mock.Call
}

// TestMetricFilterRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.TestMetricFilterInput
func (_e *MockCloudWatchLogsAPI_Expecter) TestMetricFilterRequest(_a0 interface{}) *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call {
	return &MockCloudWatchLogsAPI_TestMetricFilterRequest_Call{Call: _e.mock.On("TestMetricFilterRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call) Run(run func(_a0 *cloudwatchlogs.TestMetricFilterInput)) *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.TestMetricFilterInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.TestMetricFilterOutput) *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call) RunAndReturn(run func(*cloudwatchlogs.TestMetricFilterInput) (*request.Request, *cloudwatchlogs.TestMetricFilterOutput)) *MockCloudWatchLogsAPI_TestMetricFilterRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TestMetricFilterWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) TestMetricFilterWithContext(_a0 context.Context, _a1 *cloudwatchlogs.TestMetricFilterInput, _a2 ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.TestMetricFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TestMetricFilterInput, ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.TestMetricFilterInput, ...request.Option) *cloudwatchlogs.TestMetricFilterOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.TestMetricFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.TestMetricFilterInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestMetricFilterWithContext'
type MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call struct {
	*mock.Call
}

// TestMetricFilterWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.TestMetricFilterInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) TestMetricFilterWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call {
	return &MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call{Call: _e.mock.On("TestMetricFilterWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.TestMetricFilterInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.TestMetricFilterInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call) Return(_a0 *cloudwatchlogs.TestMetricFilterOutput, _a1 error) *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.TestMetricFilterInput, ...request.Option) (*cloudwatchlogs.TestMetricFilterOutput, error)) *MockCloudWatchLogsAPI_TestMetricFilterWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagLogGroup provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) UntagLogGroup(_a0 *cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.UntagLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagLogGroupInput) *cloudwatchlogs.UntagLogGroupOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagLogGroupInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_UntagLogGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagLogGroup'
type MockCloudWatchLogsAPI_UntagLogGroup_Call struct {
	*mock.Call
}

// UntagLogGroup is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.UntagLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) UntagLogGroup(_a0 interface{}) *MockCloudWatchLogsAPI_UntagLogGroup_Call {
	return &MockCloudWatchLogsAPI_UntagLogGroup_Call{Call: _e.mock.On("UntagLogGroup", _a0)}
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroup_Call) Run(run func(_a0 *cloudwatchlogs.UntagLogGroupInput)) *MockCloudWatchLogsAPI_UntagLogGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.UntagLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroup_Call) Return(_a0 *cloudwatchlogs.UntagLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_UntagLogGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroup_Call) RunAndReturn(run func(*cloudwatchlogs.UntagLogGroupInput) (*cloudwatchlogs.UntagLogGroupOutput, error)) *MockCloudWatchLogsAPI_UntagLogGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UntagLogGroupRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) UntagLogGroupRequest(_a0 *cloudwatchlogs.UntagLogGroupInput) (*request.Request, *cloudwatchlogs.UntagLogGroupOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.UntagLogGroupOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagLogGroupInput) (*request.Request, *cloudwatchlogs.UntagLogGroupOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagLogGroupInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagLogGroupInput) *cloudwatchlogs.UntagLogGroupOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.UntagLogGroupOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_UntagLogGroupRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagLogGroupRequest'
type MockCloudWatchLogsAPI_UntagLogGroupRequest_Call struct {
	*mock.Call
}

// UntagLogGroupRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.UntagLogGroupInput
func (_e *MockCloudWatchLogsAPI_Expecter) UntagLogGroupRequest(_a0 interface{}) *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call {
	return &MockCloudWatchLogsAPI_UntagLogGroupRequest_Call{Call: _e.mock.On("UntagLogGroupRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call) Run(run func(_a0 *cloudwatchlogs.UntagLogGroupInput)) *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.UntagLogGroupInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.UntagLogGroupOutput) *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call) RunAndReturn(run func(*cloudwatchlogs.UntagLogGroupInput) (*request.Request, *cloudwatchlogs.UntagLogGroupOutput)) *MockCloudWatchLogsAPI_UntagLogGroupRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagLogGroupWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) UntagLogGroupWithContext(_a0 context.Context, _a1 *cloudwatchlogs.UntagLogGroupInput, _a2 ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.UntagLogGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UntagLogGroupInput, ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UntagLogGroupInput, ...request.Option) *cloudwatchlogs.UntagLogGroupOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagLogGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.UntagLogGroupInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagLogGroupWithContext'
type MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call struct {
	*mock.Call
}

// UntagLogGroupWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.UntagLogGroupInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) UntagLogGroupWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call {
	return &MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call{Call: _e.mock.On("UntagLogGroupWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.UntagLogGroupInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.UntagLogGroupInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call) Return(_a0 *cloudwatchlogs.UntagLogGroupOutput, _a1 error) *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.UntagLogGroupInput, ...request.Option) (*cloudwatchlogs.UntagLogGroupOutput, error)) *MockCloudWatchLogsAPI_UntagLogGroupWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResource provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) UntagResource(_a0 *cloudwatchlogs.UntagResourceInput) (*cloudwatchlogs.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	var r0 *cloudwatchlogs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagResourceInput) (*cloudwatchlogs.UntagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagResourceInput) *cloudwatchlogs.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_UntagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResource'
type MockCloudWatchLogsAPI_UntagResource_Call struct {
	*mock.Call
}

// UntagResource is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.UntagResourceInput
func (_e *MockCloudWatchLogsAPI_Expecter) UntagResource(_a0 interface{}) *MockCloudWatchLogsAPI_UntagResource_Call {
	return &MockCloudWatchLogsAPI_UntagResource_Call{Call: _e.mock.On("UntagResource", _a0)}
}

func (_c *MockCloudWatchLogsAPI_UntagResource_Call) Run(run func(_a0 *cloudwatchlogs.UntagResourceInput)) *MockCloudWatchLogsAPI_UntagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.UntagResourceInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagResource_Call) Return(_a0 *cloudwatchlogs.UntagResourceOutput, _a1 error) *MockCloudWatchLogsAPI_UntagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagResource_Call) RunAndReturn(run func(*cloudwatchlogs.UntagResourceInput) (*cloudwatchlogs.UntagResourceOutput, error)) *MockCloudWatchLogsAPI_UntagResource_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *MockCloudWatchLogsAPI) UntagResourceRequest(_a0 *cloudwatchlogs.UntagResourceInput) (*request.Request, *cloudwatchlogs.UntagResourceOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	var r1 *cloudwatchlogs.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagResourceInput) (*request.Request, *cloudwatchlogs.UntagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*cloudwatchlogs.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*cloudwatchlogs.UntagResourceInput) *cloudwatchlogs.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*cloudwatchlogs.UntagResourceOutput)
		}
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_UntagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceRequest'
type MockCloudWatchLogsAPI_UntagResourceRequest_Call struct {
	*mock.Call
}

// UntagResourceRequest is a helper method to define mock.On call
//   - _a0 *cloudwatchlogs.UntagResourceInput
func (_e *MockCloudWatchLogsAPI_Expecter) UntagResourceRequest(_a0 interface{}) *MockCloudWatchLogsAPI_UntagResourceRequest_Call {
	return &MockCloudWatchLogsAPI_UntagResourceRequest_Call{Call: _e.mock.On("UntagResourceRequest", _a0)}
}

func (_c *MockCloudWatchLogsAPI_UntagResourceRequest_Call) Run(run func(_a0 *cloudwatchlogs.UntagResourceInput)) *MockCloudWatchLogsAPI_UntagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*cloudwatchlogs.UntagResourceInput))
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagResourceRequest_Call) Return(_a0 *request.Request, _a1 *cloudwatchlogs.UntagResourceOutput) *MockCloudWatchLogsAPI_UntagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagResourceRequest_Call) RunAndReturn(run func(*cloudwatchlogs.UntagResourceInput) (*request.Request, *cloudwatchlogs.UntagResourceOutput)) *MockCloudWatchLogsAPI_UntagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCloudWatchLogsAPI) UntagResourceWithContext(_a0 context.Context, _a1 *cloudwatchlogs.UntagResourceInput, _a2 ...request.Option) (*cloudwatchlogs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cloudwatchlogs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UntagResourceInput, ...request.Option) (*cloudwatchlogs.UntagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchlogs.UntagResourceInput, ...request.Option) *cloudwatchlogs.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchlogs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchlogs.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCloudWatchLogsAPI_UntagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceWithContext'
type MockCloudWatchLogsAPI_UntagResourceWithContext_Call struct {
	*mock.Call
}

// UntagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cloudwatchlogs.UntagResourceInput
//   - _a2 ...request.Option
func (_e *MockCloudWatchLogsAPI_Expecter) UntagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCloudWatchLogsAPI_UntagResourceWithContext_Call {
	return &MockCloudWatchLogsAPI_UntagResourceWithContext_Call{Call: _e.mock.On("UntagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCloudWatchLogsAPI_UntagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *cloudwatchlogs.UntagResourceInput, _a2 ...request.Option)) *MockCloudWatchLogsAPI_UntagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*cloudwatchlogs.UntagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagResourceWithContext_Call) Return(_a0 *cloudwatchlogs.UntagResourceOutput, _a1 error) *MockCloudWatchLogsAPI_UntagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCloudWatchLogsAPI_UntagResourceWithContext_Call) RunAndReturn(run func(context.Context, *cloudwatchlogs.UntagResourceInput, ...request.Option) (*cloudwatchlogs.UntagResourceOutput, error)) *MockCloudWatchLogsAPI_UntagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCloudWatchLogsAPI creates a new instance of MockCloudWatchLogsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCloudWatchLogsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCloudWatchLogsAPI {
	mock := &MockCloudWatchLogsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
