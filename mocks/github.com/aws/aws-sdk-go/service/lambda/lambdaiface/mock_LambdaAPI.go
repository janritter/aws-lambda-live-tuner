// Code generated by mockery v2.39.1. DO NOT EDIT.

package lambdaiface

import (
	context "context"

	lambda "github.com/aws/aws-sdk-go/service/lambda"

	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// MockLambdaAPI is an autogenerated mock type for the LambdaAPI type
type MockLambdaAPI struct {
	mock.Mock
}

type MockLambdaAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLambdaAPI) EXPECT() *MockLambdaAPI_Expecter {
	return &MockLambdaAPI_Expecter{mock: &_m.Mock}
}

// AddLayerVersionPermission provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) AddLayerVersionPermission(_a0 *lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddLayerVersionPermission")
	}

	var r0 *lambda.AddLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) *lambda.AddLayerVersionPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddLayerVersionPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_AddLayerVersionPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLayerVersionPermission'
type MockLambdaAPI_AddLayerVersionPermission_Call struct {
	*mock.Call
}

// AddLayerVersionPermission is a helper method to define mock.On call
//   - _a0 *lambda.AddLayerVersionPermissionInput
func (_e *MockLambdaAPI_Expecter) AddLayerVersionPermission(_a0 interface{}) *MockLambdaAPI_AddLayerVersionPermission_Call {
	return &MockLambdaAPI_AddLayerVersionPermission_Call{Call: _e.mock.On("AddLayerVersionPermission", _a0)}
}

func (_c *MockLambdaAPI_AddLayerVersionPermission_Call) Run(run func(_a0 *lambda.AddLayerVersionPermissionInput)) *MockLambdaAPI_AddLayerVersionPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddLayerVersionPermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_AddLayerVersionPermission_Call) Return(_a0 *lambda.AddLayerVersionPermissionOutput, _a1 error) *MockLambdaAPI_AddLayerVersionPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_AddLayerVersionPermission_Call) RunAndReturn(run func(*lambda.AddLayerVersionPermissionInput) (*lambda.AddLayerVersionPermissionOutput, error)) *MockLambdaAPI_AddLayerVersionPermission_Call {
	_c.Call.Return(run)
	return _c
}

// AddLayerVersionPermissionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) AddLayerVersionPermissionRequest(_a0 *lambda.AddLayerVersionPermissionInput) (*request.Request, *lambda.AddLayerVersionPermissionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddLayerVersionPermissionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.AddLayerVersionPermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) (*request.Request, *lambda.AddLayerVersionPermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddLayerVersionPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddLayerVersionPermissionInput) *lambda.AddLayerVersionPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AddLayerVersionPermissionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_AddLayerVersionPermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLayerVersionPermissionRequest'
type MockLambdaAPI_AddLayerVersionPermissionRequest_Call struct {
	*mock.Call
}

// AddLayerVersionPermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.AddLayerVersionPermissionInput
func (_e *MockLambdaAPI_Expecter) AddLayerVersionPermissionRequest(_a0 interface{}) *MockLambdaAPI_AddLayerVersionPermissionRequest_Call {
	return &MockLambdaAPI_AddLayerVersionPermissionRequest_Call{Call: _e.mock.On("AddLayerVersionPermissionRequest", _a0)}
}

func (_c *MockLambdaAPI_AddLayerVersionPermissionRequest_Call) Run(run func(_a0 *lambda.AddLayerVersionPermissionInput)) *MockLambdaAPI_AddLayerVersionPermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddLayerVersionPermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_AddLayerVersionPermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AddLayerVersionPermissionOutput) *MockLambdaAPI_AddLayerVersionPermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_AddLayerVersionPermissionRequest_Call) RunAndReturn(run func(*lambda.AddLayerVersionPermissionInput) (*request.Request, *lambda.AddLayerVersionPermissionOutput)) *MockLambdaAPI_AddLayerVersionPermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddLayerVersionPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) AddLayerVersionPermissionWithContext(_a0 context.Context, _a1 *lambda.AddLayerVersionPermissionInput, _a2 ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddLayerVersionPermissionWithContext")
	}

	var r0 *lambda.AddLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) *lambda.AddLayerVersionPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_AddLayerVersionPermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLayerVersionPermissionWithContext'
type MockLambdaAPI_AddLayerVersionPermissionWithContext_Call struct {
	*mock.Call
}

// AddLayerVersionPermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.AddLayerVersionPermissionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) AddLayerVersionPermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call {
	return &MockLambdaAPI_AddLayerVersionPermissionWithContext_Call{Call: _e.mock.On("AddLayerVersionPermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.AddLayerVersionPermissionInput, _a2 ...request.Option)) *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.AddLayerVersionPermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call) Return(_a0 *lambda.AddLayerVersionPermissionOutput, _a1 error) *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.AddLayerVersionPermissionInput, ...request.Option) (*lambda.AddLayerVersionPermissionOutput, error)) *MockLambdaAPI_AddLayerVersionPermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermission provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) AddPermission(_a0 *lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddPermission")
	}

	var r0 *lambda.AddPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) *lambda.AddPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_AddPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermission'
type MockLambdaAPI_AddPermission_Call struct {
	*mock.Call
}

// AddPermission is a helper method to define mock.On call
//   - _a0 *lambda.AddPermissionInput
func (_e *MockLambdaAPI_Expecter) AddPermission(_a0 interface{}) *MockLambdaAPI_AddPermission_Call {
	return &MockLambdaAPI_AddPermission_Call{Call: _e.mock.On("AddPermission", _a0)}
}

func (_c *MockLambdaAPI_AddPermission_Call) Run(run func(_a0 *lambda.AddPermissionInput)) *MockLambdaAPI_AddPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddPermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_AddPermission_Call) Return(_a0 *lambda.AddPermissionOutput, _a1 error) *MockLambdaAPI_AddPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_AddPermission_Call) RunAndReturn(run func(*lambda.AddPermissionInput) (*lambda.AddPermissionOutput, error)) *MockLambdaAPI_AddPermission_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) AddPermissionRequest(_a0 *lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.AddPermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.AddPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.AddPermissionInput) *lambda.AddPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AddPermissionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_AddPermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionRequest'
type MockLambdaAPI_AddPermissionRequest_Call struct {
	*mock.Call
}

// AddPermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.AddPermissionInput
func (_e *MockLambdaAPI_Expecter) AddPermissionRequest(_a0 interface{}) *MockLambdaAPI_AddPermissionRequest_Call {
	return &MockLambdaAPI_AddPermissionRequest_Call{Call: _e.mock.On("AddPermissionRequest", _a0)}
}

func (_c *MockLambdaAPI_AddPermissionRequest_Call) Run(run func(_a0 *lambda.AddPermissionInput)) *MockLambdaAPI_AddPermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.AddPermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_AddPermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AddPermissionOutput) *MockLambdaAPI_AddPermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_AddPermissionRequest_Call) RunAndReturn(run func(*lambda.AddPermissionInput) (*request.Request, *lambda.AddPermissionOutput)) *MockLambdaAPI_AddPermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) AddPermissionWithContext(_a0 context.Context, _a1 *lambda.AddPermissionInput, _a2 ...request.Option) (*lambda.AddPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionWithContext")
	}

	var r0 *lambda.AddPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddPermissionInput, ...request.Option) (*lambda.AddPermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.AddPermissionInput, ...request.Option) *lambda.AddPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AddPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.AddPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_AddPermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionWithContext'
type MockLambdaAPI_AddPermissionWithContext_Call struct {
	*mock.Call
}

// AddPermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.AddPermissionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) AddPermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_AddPermissionWithContext_Call {
	return &MockLambdaAPI_AddPermissionWithContext_Call{Call: _e.mock.On("AddPermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_AddPermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.AddPermissionInput, _a2 ...request.Option)) *MockLambdaAPI_AddPermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.AddPermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_AddPermissionWithContext_Call) Return(_a0 *lambda.AddPermissionOutput, _a1 error) *MockLambdaAPI_AddPermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_AddPermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.AddPermissionInput, ...request.Option) (*lambda.AddPermissionOutput, error)) *MockLambdaAPI_AddPermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAlias provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateAlias(_a0 *lambda.CreateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlias")
	}

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAlias'
type MockLambdaAPI_CreateAlias_Call struct {
	*mock.Call
}

// CreateAlias is a helper method to define mock.On call
//   - _a0 *lambda.CreateAliasInput
func (_e *MockLambdaAPI_Expecter) CreateAlias(_a0 interface{}) *MockLambdaAPI_CreateAlias_Call {
	return &MockLambdaAPI_CreateAlias_Call{Call: _e.mock.On("CreateAlias", _a0)}
}

func (_c *MockLambdaAPI_CreateAlias_Call) Run(run func(_a0 *lambda.CreateAliasInput)) *MockLambdaAPI_CreateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateAlias_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *MockLambdaAPI_CreateAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateAlias_Call) RunAndReturn(run func(*lambda.CreateAliasInput) (*lambda.AliasConfiguration, error)) *MockLambdaAPI_CreateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAliasRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateAliasRequest(_a0 *lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateAliasRequest")
	}

	var r0 *request.Request
	var r1 *lambda.AliasConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateAliasInput) *lambda.AliasConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AliasConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_CreateAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAliasRequest'
type MockLambdaAPI_CreateAliasRequest_Call struct {
	*mock.Call
}

// CreateAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateAliasInput
func (_e *MockLambdaAPI_Expecter) CreateAliasRequest(_a0 interface{}) *MockLambdaAPI_CreateAliasRequest_Call {
	return &MockLambdaAPI_CreateAliasRequest_Call{Call: _e.mock.On("CreateAliasRequest", _a0)}
}

func (_c *MockLambdaAPI_CreateAliasRequest_Call) Run(run func(_a0 *lambda.CreateAliasInput)) *MockLambdaAPI_CreateAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AliasConfiguration) *MockLambdaAPI_CreateAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateAliasRequest_Call) RunAndReturn(run func(*lambda.CreateAliasInput) (*request.Request, *lambda.AliasConfiguration)) *MockLambdaAPI_CreateAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) CreateAliasWithContext(_a0 context.Context, _a1 *lambda.CreateAliasInput, _a2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAliasWithContext")
	}

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateAliasInput, ...request.Option) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAliasWithContext'
type MockLambdaAPI_CreateAliasWithContext_Call struct {
	*mock.Call
}

// CreateAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateAliasInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) CreateAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_CreateAliasWithContext_Call {
	return &MockLambdaAPI_CreateAliasWithContext_Call{Call: _e.mock.On("CreateAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_CreateAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateAliasInput, _a2 ...request.Option)) *MockLambdaAPI_CreateAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_CreateAliasWithContext_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *MockLambdaAPI_CreateAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)) *MockLambdaAPI_CreateAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateCodeSigningConfig(_a0 *lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCodeSigningConfig")
	}

	var r0 *lambda.CreateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) *lambda.CreateCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCodeSigningConfig'
type MockLambdaAPI_CreateCodeSigningConfig_Call struct {
	*mock.Call
}

// CreateCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.CreateCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) CreateCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_CreateCodeSigningConfig_Call {
	return &MockLambdaAPI_CreateCodeSigningConfig_Call{Call: _e.mock.On("CreateCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_CreateCodeSigningConfig_Call) Run(run func(_a0 *lambda.CreateCodeSigningConfigInput)) *MockLambdaAPI_CreateCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateCodeSigningConfig_Call) Return(_a0 *lambda.CreateCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_CreateCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateCodeSigningConfig_Call) RunAndReturn(run func(*lambda.CreateCodeSigningConfigInput) (*lambda.CreateCodeSigningConfigOutput, error)) *MockLambdaAPI_CreateCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateCodeSigningConfigRequest(_a0 *lambda.CreateCodeSigningConfigInput) (*request.Request, *lambda.CreateCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.CreateCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) (*request.Request, *lambda.CreateCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateCodeSigningConfigInput) *lambda.CreateCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.CreateCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_CreateCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCodeSigningConfigRequest'
type MockLambdaAPI_CreateCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// CreateCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) CreateCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_CreateCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_CreateCodeSigningConfigRequest_Call{Call: _e.mock.On("CreateCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_CreateCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.CreateCodeSigningConfigInput)) *MockLambdaAPI_CreateCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.CreateCodeSigningConfigOutput) *MockLambdaAPI_CreateCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.CreateCodeSigningConfigInput) (*request.Request, *lambda.CreateCodeSigningConfigOutput)) *MockLambdaAPI_CreateCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) CreateCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.CreateCodeSigningConfigInput, _a2 ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCodeSigningConfigWithContext")
	}

	var r0 *lambda.CreateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) *lambda.CreateCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCodeSigningConfigWithContext'
type MockLambdaAPI_CreateCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// CreateCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) CreateCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_CreateCodeSigningConfigWithContext_Call{Call: _e.mock.On("CreateCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call) Return(_a0 *lambda.CreateCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateCodeSigningConfigInput, ...request.Option) (*lambda.CreateCodeSigningConfigOutput, error)) *MockLambdaAPI_CreateCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSourceMapping provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateEventSourceMapping(_a0 *lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSourceMapping")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSourceMapping'
type MockLambdaAPI_CreateEventSourceMapping_Call struct {
	*mock.Call
}

// CreateEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.CreateEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) CreateEventSourceMapping(_a0 interface{}) *MockLambdaAPI_CreateEventSourceMapping_Call {
	return &MockLambdaAPI_CreateEventSourceMapping_Call{Call: _e.mock.On("CreateEventSourceMapping", _a0)}
}

func (_c *MockLambdaAPI_CreateEventSourceMapping_Call) Run(run func(_a0 *lambda.CreateEventSourceMappingInput)) *MockLambdaAPI_CreateEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_CreateEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateEventSourceMapping_Call) RunAndReturn(run func(*lambda.CreateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_CreateEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateEventSourceMappingRequest(_a0 *lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSourceMappingRequest")
	}

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_CreateEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSourceMappingRequest'
type MockLambdaAPI_CreateEventSourceMappingRequest_Call struct {
	*mock.Call
}

// CreateEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) CreateEventSourceMappingRequest(_a0 interface{}) *MockLambdaAPI_CreateEventSourceMappingRequest_Call {
	return &MockLambdaAPI_CreateEventSourceMappingRequest_Call{Call: _e.mock.On("CreateEventSourceMappingRequest", _a0)}
}

func (_c *MockLambdaAPI_CreateEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.CreateEventSourceMappingInput)) *MockLambdaAPI_CreateEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *MockLambdaAPI_CreateEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.CreateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *MockLambdaAPI_CreateEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) CreateEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.CreateEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSourceMappingWithContext")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEventSourceMappingWithContext'
type MockLambdaAPI_CreateEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// CreateEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) CreateEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_CreateEventSourceMappingWithContext_Call {
	return &MockLambdaAPI_CreateEventSourceMappingWithContext_Call{Call: _e.mock.On("CreateEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_CreateEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateEventSourceMappingInput, _a2 ...request.Option)) *MockLambdaAPI_CreateEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_CreateEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_CreateEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_CreateEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunction provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateFunction(_a0 *lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunction")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunction'
type MockLambdaAPI_CreateFunction_Call struct {
	*mock.Call
}

// CreateFunction is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionInput
func (_e *MockLambdaAPI_Expecter) CreateFunction(_a0 interface{}) *MockLambdaAPI_CreateFunction_Call {
	return &MockLambdaAPI_CreateFunction_Call{Call: _e.mock.On("CreateFunction", _a0)}
}

func (_c *MockLambdaAPI_CreateFunction_Call) Run(run func(_a0 *lambda.CreateFunctionInput)) *MockLambdaAPI_CreateFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateFunction_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_CreateFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateFunction_Call) RunAndReturn(run func(*lambda.CreateFunctionInput) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_CreateFunction_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateFunctionRequest(_a0 *lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_CreateFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionRequest'
type MockLambdaAPI_CreateFunctionRequest_Call struct {
	*mock.Call
}

// CreateFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionInput
func (_e *MockLambdaAPI_Expecter) CreateFunctionRequest(_a0 interface{}) *MockLambdaAPI_CreateFunctionRequest_Call {
	return &MockLambdaAPI_CreateFunctionRequest_Call{Call: _e.mock.On("CreateFunctionRequest", _a0)}
}

func (_c *MockLambdaAPI_CreateFunctionRequest_Call) Run(run func(_a0 *lambda.CreateFunctionInput)) *MockLambdaAPI_CreateFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *MockLambdaAPI_CreateFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionRequest_Call) RunAndReturn(run func(*lambda.CreateFunctionInput) (*request.Request, *lambda.FunctionConfiguration)) *MockLambdaAPI_CreateFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateFunctionUrlConfig(_a0 *lambda.CreateFunctionUrlConfigInput) (*lambda.CreateFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionUrlConfig")
	}

	var r0 *lambda.CreateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) (*lambda.CreateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) *lambda.CreateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionUrlConfig'
type MockLambdaAPI_CreateFunctionUrlConfig_Call struct {
	*mock.Call
}

// CreateFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) CreateFunctionUrlConfig(_a0 interface{}) *MockLambdaAPI_CreateFunctionUrlConfig_Call {
	return &MockLambdaAPI_CreateFunctionUrlConfig_Call{Call: _e.mock.On("CreateFunctionUrlConfig", _a0)}
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfig_Call) Run(run func(_a0 *lambda.CreateFunctionUrlConfigInput)) *MockLambdaAPI_CreateFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfig_Call) Return(_a0 *lambda.CreateFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_CreateFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.CreateFunctionUrlConfigInput) (*lambda.CreateFunctionUrlConfigOutput, error)) *MockLambdaAPI_CreateFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) CreateFunctionUrlConfigRequest(_a0 *lambda.CreateFunctionUrlConfigInput) (*request.Request, *lambda.CreateFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionUrlConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.CreateFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) (*request.Request, *lambda.CreateFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.CreateFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.CreateFunctionUrlConfigInput) *lambda.CreateFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.CreateFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_CreateFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionUrlConfigRequest'
type MockLambdaAPI_CreateFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// CreateFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.CreateFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) CreateFunctionUrlConfigRequest(_a0 interface{}) *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call {
	return &MockLambdaAPI_CreateFunctionUrlConfigRequest_Call{Call: _e.mock.On("CreateFunctionUrlConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.CreateFunctionUrlConfigInput)) *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.CreateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.CreateFunctionUrlConfigOutput) *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.CreateFunctionUrlConfigInput) (*request.Request, *lambda.CreateFunctionUrlConfigOutput)) *MockLambdaAPI_CreateFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) CreateFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.CreateFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionUrlConfigWithContext")
	}

	var r0 *lambda.CreateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) *lambda.CreateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.CreateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionUrlConfigWithContext'
type MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// CreateFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) CreateFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call {
	return &MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call{Call: _e.mock.On("CreateFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateFunctionUrlConfigInput, _a2 ...request.Option)) *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.CreateFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateFunctionUrlConfigInput, ...request.Option) (*lambda.CreateFunctionUrlConfigOutput, error)) *MockLambdaAPI_CreateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) CreateFunctionWithContext(_a0 context.Context, _a1 *lambda.CreateFunctionInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionWithContext")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.CreateFunctionInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.CreateFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_CreateFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFunctionWithContext'
type MockLambdaAPI_CreateFunctionWithContext_Call struct {
	*mock.Call
}

// CreateFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.CreateFunctionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) CreateFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_CreateFunctionWithContext_Call {
	return &MockLambdaAPI_CreateFunctionWithContext_Call{Call: _e.mock.On("CreateFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_CreateFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.CreateFunctionInput, _a2 ...request.Option)) *MockLambdaAPI_CreateFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.CreateFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_CreateFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_CreateFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.CreateFunctionInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_CreateFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAlias provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteAlias(_a0 *lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlias")
	}

	var r0 *lambda.DeleteAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) *lambda.DeleteAliasOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlias'
type MockLambdaAPI_DeleteAlias_Call struct {
	*mock.Call
}

// DeleteAlias is a helper method to define mock.On call
//   - _a0 *lambda.DeleteAliasInput
func (_e *MockLambdaAPI_Expecter) DeleteAlias(_a0 interface{}) *MockLambdaAPI_DeleteAlias_Call {
	return &MockLambdaAPI_DeleteAlias_Call{Call: _e.mock.On("DeleteAlias", _a0)}
}

func (_c *MockLambdaAPI_DeleteAlias_Call) Run(run func(_a0 *lambda.DeleteAliasInput)) *MockLambdaAPI_DeleteAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteAlias_Call) Return(_a0 *lambda.DeleteAliasOutput, _a1 error) *MockLambdaAPI_DeleteAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteAlias_Call) RunAndReturn(run func(*lambda.DeleteAliasInput) (*lambda.DeleteAliasOutput, error)) *MockLambdaAPI_DeleteAlias_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAliasRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteAliasRequest(_a0 *lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAliasRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteAliasOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteAliasInput) *lambda.DeleteAliasOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteAliasOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAliasRequest'
type MockLambdaAPI_DeleteAliasRequest_Call struct {
	*mock.Call
}

// DeleteAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteAliasInput
func (_e *MockLambdaAPI_Expecter) DeleteAliasRequest(_a0 interface{}) *MockLambdaAPI_DeleteAliasRequest_Call {
	return &MockLambdaAPI_DeleteAliasRequest_Call{Call: _e.mock.On("DeleteAliasRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteAliasRequest_Call) Run(run func(_a0 *lambda.DeleteAliasInput)) *MockLambdaAPI_DeleteAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteAliasOutput) *MockLambdaAPI_DeleteAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteAliasRequest_Call) RunAndReturn(run func(*lambda.DeleteAliasInput) (*request.Request, *lambda.DeleteAliasOutput)) *MockLambdaAPI_DeleteAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteAliasWithContext(_a0 context.Context, _a1 *lambda.DeleteAliasInput, _a2 ...request.Option) (*lambda.DeleteAliasOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAliasWithContext")
	}

	var r0 *lambda.DeleteAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteAliasInput, ...request.Option) (*lambda.DeleteAliasOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteAliasInput, ...request.Option) *lambda.DeleteAliasOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAliasWithContext'
type MockLambdaAPI_DeleteAliasWithContext_Call struct {
	*mock.Call
}

// DeleteAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteAliasInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteAliasWithContext_Call {
	return &MockLambdaAPI_DeleteAliasWithContext_Call{Call: _e.mock.On("DeleteAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteAliasInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteAliasWithContext_Call) Return(_a0 *lambda.DeleteAliasOutput, _a1 error) *MockLambdaAPI_DeleteAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteAliasInput, ...request.Option) (*lambda.DeleteAliasOutput, error)) *MockLambdaAPI_DeleteAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteCodeSigningConfig(_a0 *lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeSigningConfig")
	}

	var r0 *lambda.DeleteCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) *lambda.DeleteCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeSigningConfig'
type MockLambdaAPI_DeleteCodeSigningConfig_Call struct {
	*mock.Call
}

// DeleteCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_DeleteCodeSigningConfig_Call {
	return &MockLambdaAPI_DeleteCodeSigningConfig_Call{Call: _e.mock.On("DeleteCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfig_Call) Run(run func(_a0 *lambda.DeleteCodeSigningConfigInput)) *MockLambdaAPI_DeleteCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfig_Call) Return(_a0 *lambda.DeleteCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_DeleteCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfig_Call) RunAndReturn(run func(*lambda.DeleteCodeSigningConfigInput) (*lambda.DeleteCodeSigningConfigOutput, error)) *MockLambdaAPI_DeleteCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteCodeSigningConfigRequest(_a0 *lambda.DeleteCodeSigningConfigInput) (*request.Request, *lambda.DeleteCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) (*request.Request, *lambda.DeleteCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteCodeSigningConfigInput) *lambda.DeleteCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeSigningConfigRequest'
type MockLambdaAPI_DeleteCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// DeleteCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_DeleteCodeSigningConfigRequest_Call{Call: _e.mock.On("DeleteCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.DeleteCodeSigningConfigInput)) *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteCodeSigningConfigOutput) *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteCodeSigningConfigInput) (*request.Request, *lambda.DeleteCodeSigningConfigOutput)) *MockLambdaAPI_DeleteCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteCodeSigningConfigInput, _a2 ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeSigningConfigWithContext")
	}

	var r0 *lambda.DeleteCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) *lambda.DeleteCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCodeSigningConfigWithContext'
type MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// DeleteCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call{Call: _e.mock.On("DeleteCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call) Return(_a0 *lambda.DeleteCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteCodeSigningConfigInput, ...request.Option) (*lambda.DeleteCodeSigningConfigOutput, error)) *MockLambdaAPI_DeleteCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventSourceMapping provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteEventSourceMapping(_a0 *lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSourceMapping")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventSourceMapping'
type MockLambdaAPI_DeleteEventSourceMapping_Call struct {
	*mock.Call
}

// DeleteEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.DeleteEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) DeleteEventSourceMapping(_a0 interface{}) *MockLambdaAPI_DeleteEventSourceMapping_Call {
	return &MockLambdaAPI_DeleteEventSourceMapping_Call{Call: _e.mock.On("DeleteEventSourceMapping", _a0)}
}

func (_c *MockLambdaAPI_DeleteEventSourceMapping_Call) Run(run func(_a0 *lambda.DeleteEventSourceMappingInput)) *MockLambdaAPI_DeleteEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_DeleteEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteEventSourceMapping_Call) RunAndReturn(run func(*lambda.DeleteEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_DeleteEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteEventSourceMappingRequest(_a0 *lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSourceMappingRequest")
	}

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventSourceMappingRequest'
type MockLambdaAPI_DeleteEventSourceMappingRequest_Call struct {
	*mock.Call
}

// DeleteEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) DeleteEventSourceMappingRequest(_a0 interface{}) *MockLambdaAPI_DeleteEventSourceMappingRequest_Call {
	return &MockLambdaAPI_DeleteEventSourceMappingRequest_Call{Call: _e.mock.On("DeleteEventSourceMappingRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.DeleteEventSourceMappingInput)) *MockLambdaAPI_DeleteEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *MockLambdaAPI_DeleteEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.DeleteEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *MockLambdaAPI_DeleteEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.DeleteEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSourceMappingWithContext")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteEventSourceMappingWithContext'
type MockLambdaAPI_DeleteEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// DeleteEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call {
	return &MockLambdaAPI_DeleteEventSourceMappingWithContext_Call{Call: _e.mock.On("DeleteEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteEventSourceMappingInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_DeleteEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunction provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunction(_a0 *lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunction")
	}

	var r0 *lambda.DeleteFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) *lambda.DeleteFunctionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunction'
type MockLambdaAPI_DeleteFunction_Call struct {
	*mock.Call
}

// DeleteFunction is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionInput
func (_e *MockLambdaAPI_Expecter) DeleteFunction(_a0 interface{}) *MockLambdaAPI_DeleteFunction_Call {
	return &MockLambdaAPI_DeleteFunction_Call{Call: _e.mock.On("DeleteFunction", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunction_Call) Run(run func(_a0 *lambda.DeleteFunctionInput)) *MockLambdaAPI_DeleteFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunction_Call) Return(_a0 *lambda.DeleteFunctionOutput, _a1 error) *MockLambdaAPI_DeleteFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunction_Call) RunAndReturn(run func(*lambda.DeleteFunctionInput) (*lambda.DeleteFunctionOutput, error)) *MockLambdaAPI_DeleteFunction_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionCodeSigningConfig(_a0 *lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionCodeSigningConfig")
	}

	var r0 *lambda.DeleteFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) *lambda.DeleteFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionCodeSigningConfig'
type MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call struct {
	*mock.Call
}

// DeleteFunctionCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call {
	return &MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call{Call: _e.mock.On("DeleteFunctionCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call) Run(run func(_a0 *lambda.DeleteFunctionCodeSigningConfigInput)) *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call) Return(_a0 *lambda.DeleteFunctionCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call) RunAndReturn(run func(*lambda.DeleteFunctionCodeSigningConfigInput) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)) *MockLambdaAPI_DeleteFunctionCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionCodeSigningConfigRequest(_a0 *lambda.DeleteFunctionCodeSigningConfigInput) (*request.Request, *lambda.DeleteFunctionCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) (*request.Request, *lambda.DeleteFunctionCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionCodeSigningConfigInput) *lambda.DeleteFunctionCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionCodeSigningConfigRequest'
type MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// DeleteFunctionCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call{Call: _e.mock.On("DeleteFunctionCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionCodeSigningConfigInput)) *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionCodeSigningConfigOutput) *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionCodeSigningConfigInput) (*request.Request, *lambda.DeleteFunctionCodeSigningConfigOutput)) *MockLambdaAPI_DeleteFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteFunctionCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionCodeSigningConfigInput, _a2 ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionCodeSigningConfigWithContext")
	}

	var r0 *lambda.DeleteFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) *lambda.DeleteFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionCodeSigningConfigWithContext'
type MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteFunctionCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call{Call: _e.mock.On("DeleteFunctionCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call) Return(_a0 *lambda.DeleteFunctionCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionCodeSigningConfigInput, ...request.Option) (*lambda.DeleteFunctionCodeSigningConfigOutput, error)) *MockLambdaAPI_DeleteFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionConcurrency provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionConcurrency(_a0 *lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionConcurrency")
	}

	var r0 *lambda.DeleteFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) *lambda.DeleteFunctionConcurrencyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionConcurrencyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionConcurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionConcurrency'
type MockLambdaAPI_DeleteFunctionConcurrency_Call struct {
	*mock.Call
}

// DeleteFunctionConcurrency is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionConcurrencyInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionConcurrency(_a0 interface{}) *MockLambdaAPI_DeleteFunctionConcurrency_Call {
	return &MockLambdaAPI_DeleteFunctionConcurrency_Call{Call: _e.mock.On("DeleteFunctionConcurrency", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrency_Call) Run(run func(_a0 *lambda.DeleteFunctionConcurrencyInput)) *MockLambdaAPI_DeleteFunctionConcurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionConcurrencyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrency_Call) Return(_a0 *lambda.DeleteFunctionConcurrencyOutput, _a1 error) *MockLambdaAPI_DeleteFunctionConcurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrency_Call) RunAndReturn(run func(*lambda.DeleteFunctionConcurrencyInput) (*lambda.DeleteFunctionConcurrencyOutput, error)) *MockLambdaAPI_DeleteFunctionConcurrency_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionConcurrencyRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionConcurrencyRequest(_a0 *lambda.DeleteFunctionConcurrencyInput) (*request.Request, *lambda.DeleteFunctionConcurrencyOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionConcurrencyRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) (*request.Request, *lambda.DeleteFunctionConcurrencyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionConcurrencyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionConcurrencyInput) *lambda.DeleteFunctionConcurrencyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionConcurrencyOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionConcurrencyRequest'
type MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call struct {
	*mock.Call
}

// DeleteFunctionConcurrencyRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionConcurrencyInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionConcurrencyRequest(_a0 interface{}) *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call {
	return &MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call{Call: _e.mock.On("DeleteFunctionConcurrencyRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionConcurrencyInput)) *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionConcurrencyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionConcurrencyOutput) *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionConcurrencyInput) (*request.Request, *lambda.DeleteFunctionConcurrencyOutput)) *MockLambdaAPI_DeleteFunctionConcurrencyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionConcurrencyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteFunctionConcurrencyWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionConcurrencyInput, _a2 ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionConcurrencyWithContext")
	}

	var r0 *lambda.DeleteFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) *lambda.DeleteFunctionConcurrencyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionConcurrencyWithContext'
type MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionConcurrencyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionConcurrencyInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteFunctionConcurrencyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call {
	return &MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call{Call: _e.mock.On("DeleteFunctionConcurrencyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionConcurrencyInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionConcurrencyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call) Return(_a0 *lambda.DeleteFunctionConcurrencyOutput, _a1 error) *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionConcurrencyInput, ...request.Option) (*lambda.DeleteFunctionConcurrencyOutput, error)) *MockLambdaAPI_DeleteFunctionConcurrencyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionEventInvokeConfig(_a0 *lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionEventInvokeConfig")
	}

	var r0 *lambda.DeleteFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) *lambda.DeleteFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionEventInvokeConfig'
type MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// DeleteFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionEventInvokeConfig(_a0 interface{}) *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call {
	return &MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call{Call: _e.mock.On("DeleteFunctionEventInvokeConfig", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.DeleteFunctionEventInvokeConfigInput)) *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call) Return(_a0 *lambda.DeleteFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.DeleteFunctionEventInvokeConfigInput) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_DeleteFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionEventInvokeConfigRequest(_a0 *lambda.DeleteFunctionEventInvokeConfigInput) (*request.Request, *lambda.DeleteFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionEventInvokeConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) (*request.Request, *lambda.DeleteFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionEventInvokeConfigInput) *lambda.DeleteFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionEventInvokeConfigRequest'
type MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// DeleteFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionEventInvokeConfigRequest(_a0 interface{}) *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call {
	return &MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("DeleteFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionEventInvokeConfigInput)) *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionEventInvokeConfigOutput) *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionEventInvokeConfigInput) (*request.Request, *lambda.DeleteFunctionEventInvokeConfigOutput)) *MockLambdaAPI_DeleteFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionEventInvokeConfigWithContext")
	}

	var r0 *lambda.DeleteFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) *lambda.DeleteFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionEventInvokeConfigWithContext'
type MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call {
	return &MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("DeleteFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionEventInvokeConfigInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.DeleteFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionEventInvokeConfigInput, ...request.Option) (*lambda.DeleteFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_DeleteFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionRequest(_a0 *lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionInput) *lambda.DeleteFunctionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionRequest'
type MockLambdaAPI_DeleteFunctionRequest_Call struct {
	*mock.Call
}

// DeleteFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionRequest(_a0 interface{}) *MockLambdaAPI_DeleteFunctionRequest_Call {
	return &MockLambdaAPI_DeleteFunctionRequest_Call{Call: _e.mock.On("DeleteFunctionRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionInput)) *MockLambdaAPI_DeleteFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionOutput) *MockLambdaAPI_DeleteFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionInput) (*request.Request, *lambda.DeleteFunctionOutput)) *MockLambdaAPI_DeleteFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionUrlConfig(_a0 *lambda.DeleteFunctionUrlConfigInput) (*lambda.DeleteFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionUrlConfig")
	}

	var r0 *lambda.DeleteFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) (*lambda.DeleteFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) *lambda.DeleteFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionUrlConfig'
type MockLambdaAPI_DeleteFunctionUrlConfig_Call struct {
	*mock.Call
}

// DeleteFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionUrlConfig(_a0 interface{}) *MockLambdaAPI_DeleteFunctionUrlConfig_Call {
	return &MockLambdaAPI_DeleteFunctionUrlConfig_Call{Call: _e.mock.On("DeleteFunctionUrlConfig", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfig_Call) Run(run func(_a0 *lambda.DeleteFunctionUrlConfigInput)) *MockLambdaAPI_DeleteFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfig_Call) Return(_a0 *lambda.DeleteFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_DeleteFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.DeleteFunctionUrlConfigInput) (*lambda.DeleteFunctionUrlConfigOutput, error)) *MockLambdaAPI_DeleteFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteFunctionUrlConfigRequest(_a0 *lambda.DeleteFunctionUrlConfigInput) (*request.Request, *lambda.DeleteFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionUrlConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) (*request.Request, *lambda.DeleteFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteFunctionUrlConfigInput) *lambda.DeleteFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionUrlConfigRequest'
type MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// DeleteFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteFunctionUrlConfigRequest(_a0 interface{}) *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call {
	return &MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call{Call: _e.mock.On("DeleteFunctionUrlConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.DeleteFunctionUrlConfigInput)) *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteFunctionUrlConfigOutput) *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteFunctionUrlConfigInput) (*request.Request, *lambda.DeleteFunctionUrlConfigOutput)) *MockLambdaAPI_DeleteFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionUrlConfigWithContext")
	}

	var r0 *lambda.DeleteFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) *lambda.DeleteFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionUrlConfigWithContext'
type MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call {
	return &MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call{Call: _e.mock.On("DeleteFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionUrlConfigInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.DeleteFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionUrlConfigInput, ...request.Option) (*lambda.DeleteFunctionUrlConfigOutput, error)) *MockLambdaAPI_DeleteFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteFunctionWithContext(_a0 context.Context, _a1 *lambda.DeleteFunctionInput, _a2 ...request.Option) (*lambda.DeleteFunctionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionWithContext")
	}

	var r0 *lambda.DeleteFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) (*lambda.DeleteFunctionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) *lambda.DeleteFunctionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFunctionWithContext'
type MockLambdaAPI_DeleteFunctionWithContext_Call struct {
	*mock.Call
}

// DeleteFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteFunctionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteFunctionWithContext_Call {
	return &MockLambdaAPI_DeleteFunctionWithContext_Call{Call: _e.mock.On("DeleteFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteFunctionInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionWithContext_Call) Return(_a0 *lambda.DeleteFunctionOutput, _a1 error) *MockLambdaAPI_DeleteFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteFunctionInput, ...request.Option) (*lambda.DeleteFunctionOutput, error)) *MockLambdaAPI_DeleteFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLayerVersion provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteLayerVersion(_a0 *lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLayerVersion")
	}

	var r0 *lambda.DeleteLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) *lambda.DeleteLayerVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteLayerVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteLayerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLayerVersion'
type MockLambdaAPI_DeleteLayerVersion_Call struct {
	*mock.Call
}

// DeleteLayerVersion is a helper method to define mock.On call
//   - _a0 *lambda.DeleteLayerVersionInput
func (_e *MockLambdaAPI_Expecter) DeleteLayerVersion(_a0 interface{}) *MockLambdaAPI_DeleteLayerVersion_Call {
	return &MockLambdaAPI_DeleteLayerVersion_Call{Call: _e.mock.On("DeleteLayerVersion", _a0)}
}

func (_c *MockLambdaAPI_DeleteLayerVersion_Call) Run(run func(_a0 *lambda.DeleteLayerVersionInput)) *MockLambdaAPI_DeleteLayerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteLayerVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteLayerVersion_Call) Return(_a0 *lambda.DeleteLayerVersionOutput, _a1 error) *MockLambdaAPI_DeleteLayerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteLayerVersion_Call) RunAndReturn(run func(*lambda.DeleteLayerVersionInput) (*lambda.DeleteLayerVersionOutput, error)) *MockLambdaAPI_DeleteLayerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLayerVersionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteLayerVersionRequest(_a0 *lambda.DeleteLayerVersionInput) (*request.Request, *lambda.DeleteLayerVersionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLayerVersionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteLayerVersionOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) (*request.Request, *lambda.DeleteLayerVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteLayerVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteLayerVersionInput) *lambda.DeleteLayerVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteLayerVersionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteLayerVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLayerVersionRequest'
type MockLambdaAPI_DeleteLayerVersionRequest_Call struct {
	*mock.Call
}

// DeleteLayerVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteLayerVersionInput
func (_e *MockLambdaAPI_Expecter) DeleteLayerVersionRequest(_a0 interface{}) *MockLambdaAPI_DeleteLayerVersionRequest_Call {
	return &MockLambdaAPI_DeleteLayerVersionRequest_Call{Call: _e.mock.On("DeleteLayerVersionRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteLayerVersionRequest_Call) Run(run func(_a0 *lambda.DeleteLayerVersionInput)) *MockLambdaAPI_DeleteLayerVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteLayerVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteLayerVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteLayerVersionOutput) *MockLambdaAPI_DeleteLayerVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteLayerVersionRequest_Call) RunAndReturn(run func(*lambda.DeleteLayerVersionInput) (*request.Request, *lambda.DeleteLayerVersionOutput)) *MockLambdaAPI_DeleteLayerVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLayerVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteLayerVersionWithContext(_a0 context.Context, _a1 *lambda.DeleteLayerVersionInput, _a2 ...request.Option) (*lambda.DeleteLayerVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLayerVersionWithContext")
	}

	var r0 *lambda.DeleteLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) (*lambda.DeleteLayerVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) *lambda.DeleteLayerVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteLayerVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLayerVersionWithContext'
type MockLambdaAPI_DeleteLayerVersionWithContext_Call struct {
	*mock.Call
}

// DeleteLayerVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteLayerVersionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteLayerVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteLayerVersionWithContext_Call {
	return &MockLambdaAPI_DeleteLayerVersionWithContext_Call{Call: _e.mock.On("DeleteLayerVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteLayerVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteLayerVersionInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteLayerVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteLayerVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteLayerVersionWithContext_Call) Return(_a0 *lambda.DeleteLayerVersionOutput, _a1 error) *MockLambdaAPI_DeleteLayerVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteLayerVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteLayerVersionInput, ...request.Option) (*lambda.DeleteLayerVersionOutput, error)) *MockLambdaAPI_DeleteLayerVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvisionedConcurrencyConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteProvisionedConcurrencyConfig(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisionedConcurrencyConfig")
	}

	var r0 *lambda.DeleteProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) *lambda.DeleteProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvisionedConcurrencyConfig'
type MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call struct {
	*mock.Call
}

// DeleteProvisionedConcurrencyConfig is a helper method to define mock.On call
//   - _a0 *lambda.DeleteProvisionedConcurrencyConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteProvisionedConcurrencyConfig(_a0 interface{}) *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call {
	return &MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call{Call: _e.mock.On("DeleteProvisionedConcurrencyConfig", _a0)}
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call) Run(run func(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput)) *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call) Return(_a0 *lambda.DeleteProvisionedConcurrencyConfigOutput, _a1 error) *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call) RunAndReturn(run func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)) *MockLambdaAPI_DeleteProvisionedConcurrencyConfig_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvisionedConcurrencyConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) DeleteProvisionedConcurrencyConfigRequest(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput) (*request.Request, *lambda.DeleteProvisionedConcurrencyConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisionedConcurrencyConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.DeleteProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*request.Request, *lambda.DeleteProvisionedConcurrencyConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.DeleteProvisionedConcurrencyConfigInput) *lambda.DeleteProvisionedConcurrencyConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.DeleteProvisionedConcurrencyConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvisionedConcurrencyConfigRequest'
type MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call struct {
	*mock.Call
}

// DeleteProvisionedConcurrencyConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.DeleteProvisionedConcurrencyConfigInput
func (_e *MockLambdaAPI_Expecter) DeleteProvisionedConcurrencyConfigRequest(_a0 interface{}) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call {
	return &MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call{Call: _e.mock.On("DeleteProvisionedConcurrencyConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call) Run(run func(_a0 *lambda.DeleteProvisionedConcurrencyConfigInput)) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.DeleteProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.DeleteProvisionedConcurrencyConfigOutput) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call) RunAndReturn(run func(*lambda.DeleteProvisionedConcurrencyConfigInput) (*request.Request, *lambda.DeleteProvisionedConcurrencyConfigOutput)) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProvisionedConcurrencyConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) DeleteProvisionedConcurrencyConfigWithContext(_a0 context.Context, _a1 *lambda.DeleteProvisionedConcurrencyConfigInput, _a2 ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisionedConcurrencyConfigWithContext")
	}

	var r0 *lambda.DeleteProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) *lambda.DeleteProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.DeleteProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProvisionedConcurrencyConfigWithContext'
type MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call struct {
	*mock.Call
}

// DeleteProvisionedConcurrencyConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.DeleteProvisionedConcurrencyConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) DeleteProvisionedConcurrencyConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call {
	return &MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call{Call: _e.mock.On("DeleteProvisionedConcurrencyConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.DeleteProvisionedConcurrencyConfigInput, _a2 ...request.Option)) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.DeleteProvisionedConcurrencyConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call) Return(_a0 *lambda.DeleteProvisionedConcurrencyConfigOutput, _a1 error) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.DeleteProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.DeleteProvisionedConcurrencyConfigOutput, error)) *MockLambdaAPI_DeleteProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSettings provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetAccountSettings(_a0 *lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettings")
	}

	var r0 *lambda.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) *lambda.GetAccountSettingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAccountSettingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetAccountSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSettings'
type MockLambdaAPI_GetAccountSettings_Call struct {
	*mock.Call
}

// GetAccountSettings is a helper method to define mock.On call
//   - _a0 *lambda.GetAccountSettingsInput
func (_e *MockLambdaAPI_Expecter) GetAccountSettings(_a0 interface{}) *MockLambdaAPI_GetAccountSettings_Call {
	return &MockLambdaAPI_GetAccountSettings_Call{Call: _e.mock.On("GetAccountSettings", _a0)}
}

func (_c *MockLambdaAPI_GetAccountSettings_Call) Run(run func(_a0 *lambda.GetAccountSettingsInput)) *MockLambdaAPI_GetAccountSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAccountSettingsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetAccountSettings_Call) Return(_a0 *lambda.GetAccountSettingsOutput, _a1 error) *MockLambdaAPI_GetAccountSettings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetAccountSettings_Call) RunAndReturn(run func(*lambda.GetAccountSettingsInput) (*lambda.GetAccountSettingsOutput, error)) *MockLambdaAPI_GetAccountSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSettingsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetAccountSettingsRequest(_a0 *lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettingsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetAccountSettingsOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAccountSettingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAccountSettingsInput) *lambda.GetAccountSettingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetAccountSettingsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetAccountSettingsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSettingsRequest'
type MockLambdaAPI_GetAccountSettingsRequest_Call struct {
	*mock.Call
}

// GetAccountSettingsRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetAccountSettingsInput
func (_e *MockLambdaAPI_Expecter) GetAccountSettingsRequest(_a0 interface{}) *MockLambdaAPI_GetAccountSettingsRequest_Call {
	return &MockLambdaAPI_GetAccountSettingsRequest_Call{Call: _e.mock.On("GetAccountSettingsRequest", _a0)}
}

func (_c *MockLambdaAPI_GetAccountSettingsRequest_Call) Run(run func(_a0 *lambda.GetAccountSettingsInput)) *MockLambdaAPI_GetAccountSettingsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAccountSettingsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetAccountSettingsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetAccountSettingsOutput) *MockLambdaAPI_GetAccountSettingsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetAccountSettingsRequest_Call) RunAndReturn(run func(*lambda.GetAccountSettingsInput) (*request.Request, *lambda.GetAccountSettingsOutput)) *MockLambdaAPI_GetAccountSettingsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountSettingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetAccountSettingsWithContext(_a0 context.Context, _a1 *lambda.GetAccountSettingsInput, _a2 ...request.Option) (*lambda.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettingsWithContext")
	}

	var r0 *lambda.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) (*lambda.GetAccountSettingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) *lambda.GetAccountSettingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetAccountSettingsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountSettingsWithContext'
type MockLambdaAPI_GetAccountSettingsWithContext_Call struct {
	*mock.Call
}

// GetAccountSettingsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetAccountSettingsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetAccountSettingsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetAccountSettingsWithContext_Call {
	return &MockLambdaAPI_GetAccountSettingsWithContext_Call{Call: _e.mock.On("GetAccountSettingsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetAccountSettingsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetAccountSettingsInput, _a2 ...request.Option)) *MockLambdaAPI_GetAccountSettingsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetAccountSettingsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetAccountSettingsWithContext_Call) Return(_a0 *lambda.GetAccountSettingsOutput, _a1 error) *MockLambdaAPI_GetAccountSettingsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetAccountSettingsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetAccountSettingsInput, ...request.Option) (*lambda.GetAccountSettingsOutput, error)) *MockLambdaAPI_GetAccountSettingsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlias provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetAlias(_a0 *lambda.GetAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAlias")
	}

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlias'
type MockLambdaAPI_GetAlias_Call struct {
	*mock.Call
}

// GetAlias is a helper method to define mock.On call
//   - _a0 *lambda.GetAliasInput
func (_e *MockLambdaAPI_Expecter) GetAlias(_a0 interface{}) *MockLambdaAPI_GetAlias_Call {
	return &MockLambdaAPI_GetAlias_Call{Call: _e.mock.On("GetAlias", _a0)}
}

func (_c *MockLambdaAPI_GetAlias_Call) Run(run func(_a0 *lambda.GetAliasInput)) *MockLambdaAPI_GetAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetAlias_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *MockLambdaAPI_GetAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetAlias_Call) RunAndReturn(run func(*lambda.GetAliasInput) (*lambda.AliasConfiguration, error)) *MockLambdaAPI_GetAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetAliasRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetAliasRequest(_a0 *lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAliasRequest")
	}

	var r0 *request.Request
	var r1 *lambda.AliasConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetAliasInput) *lambda.AliasConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AliasConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAliasRequest'
type MockLambdaAPI_GetAliasRequest_Call struct {
	*mock.Call
}

// GetAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetAliasInput
func (_e *MockLambdaAPI_Expecter) GetAliasRequest(_a0 interface{}) *MockLambdaAPI_GetAliasRequest_Call {
	return &MockLambdaAPI_GetAliasRequest_Call{Call: _e.mock.On("GetAliasRequest", _a0)}
}

func (_c *MockLambdaAPI_GetAliasRequest_Call) Run(run func(_a0 *lambda.GetAliasInput)) *MockLambdaAPI_GetAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AliasConfiguration) *MockLambdaAPI_GetAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetAliasRequest_Call) RunAndReturn(run func(*lambda.GetAliasInput) (*request.Request, *lambda.AliasConfiguration)) *MockLambdaAPI_GetAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetAliasWithContext(_a0 context.Context, _a1 *lambda.GetAliasInput, _a2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAliasWithContext")
	}

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetAliasInput, ...request.Option) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAliasWithContext'
type MockLambdaAPI_GetAliasWithContext_Call struct {
	*mock.Call
}

// GetAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetAliasInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetAliasWithContext_Call {
	return &MockLambdaAPI_GetAliasWithContext_Call{Call: _e.mock.On("GetAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetAliasInput, _a2 ...request.Option)) *MockLambdaAPI_GetAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetAliasWithContext_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *MockLambdaAPI_GetAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)) *MockLambdaAPI_GetAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetCodeSigningConfig(_a0 *lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeSigningConfig")
	}

	var r0 *lambda.GetCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) *lambda.GetCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSigningConfig'
type MockLambdaAPI_GetCodeSigningConfig_Call struct {
	*mock.Call
}

// GetCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) GetCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_GetCodeSigningConfig_Call {
	return &MockLambdaAPI_GetCodeSigningConfig_Call{Call: _e.mock.On("GetCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_GetCodeSigningConfig_Call) Run(run func(_a0 *lambda.GetCodeSigningConfigInput)) *MockLambdaAPI_GetCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetCodeSigningConfig_Call) Return(_a0 *lambda.GetCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_GetCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetCodeSigningConfig_Call) RunAndReturn(run func(*lambda.GetCodeSigningConfigInput) (*lambda.GetCodeSigningConfigOutput, error)) *MockLambdaAPI_GetCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetCodeSigningConfigRequest(_a0 *lambda.GetCodeSigningConfigInput) (*request.Request, *lambda.GetCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) (*request.Request, *lambda.GetCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetCodeSigningConfigInput) *lambda.GetCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSigningConfigRequest'
type MockLambdaAPI_GetCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// GetCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) GetCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_GetCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_GetCodeSigningConfigRequest_Call{Call: _e.mock.On("GetCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_GetCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.GetCodeSigningConfigInput)) *MockLambdaAPI_GetCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetCodeSigningConfigOutput) *MockLambdaAPI_GetCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.GetCodeSigningConfigInput) (*request.Request, *lambda.GetCodeSigningConfigOutput)) *MockLambdaAPI_GetCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.GetCodeSigningConfigInput, _a2 ...request.Option) (*lambda.GetCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeSigningConfigWithContext")
	}

	var r0 *lambda.GetCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) (*lambda.GetCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) *lambda.GetCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSigningConfigWithContext'
type MockLambdaAPI_GetCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// GetCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_GetCodeSigningConfigWithContext_Call{Call: _e.mock.On("GetCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_GetCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetCodeSigningConfigWithContext_Call) Return(_a0 *lambda.GetCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_GetCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetCodeSigningConfigInput, ...request.Option) (*lambda.GetCodeSigningConfigOutput, error)) *MockLambdaAPI_GetCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSourceMapping provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetEventSourceMapping(_a0 *lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetEventSourceMapping")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSourceMapping'
type MockLambdaAPI_GetEventSourceMapping_Call struct {
	*mock.Call
}

// GetEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.GetEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) GetEventSourceMapping(_a0 interface{}) *MockLambdaAPI_GetEventSourceMapping_Call {
	return &MockLambdaAPI_GetEventSourceMapping_Call{Call: _e.mock.On("GetEventSourceMapping", _a0)}
}

func (_c *MockLambdaAPI_GetEventSourceMapping_Call) Run(run func(_a0 *lambda.GetEventSourceMappingInput)) *MockLambdaAPI_GetEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_GetEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetEventSourceMapping_Call) RunAndReturn(run func(*lambda.GetEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_GetEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetEventSourceMappingRequest(_a0 *lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetEventSourceMappingRequest")
	}

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSourceMappingRequest'
type MockLambdaAPI_GetEventSourceMappingRequest_Call struct {
	*mock.Call
}

// GetEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) GetEventSourceMappingRequest(_a0 interface{}) *MockLambdaAPI_GetEventSourceMappingRequest_Call {
	return &MockLambdaAPI_GetEventSourceMappingRequest_Call{Call: _e.mock.On("GetEventSourceMappingRequest", _a0)}
}

func (_c *MockLambdaAPI_GetEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.GetEventSourceMappingInput)) *MockLambdaAPI_GetEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *MockLambdaAPI_GetEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.GetEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *MockLambdaAPI_GetEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.GetEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventSourceMappingWithContext")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventSourceMappingWithContext'
type MockLambdaAPI_GetEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// GetEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetEventSourceMappingWithContext_Call {
	return &MockLambdaAPI_GetEventSourceMappingWithContext_Call{Call: _e.mock.On("GetEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetEventSourceMappingInput, _a2 ...request.Option)) *MockLambdaAPI_GetEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_GetEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_GetEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunction provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunction(_a0 *lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunction")
	}

	var r0 *lambda.GetFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) *lambda.GetFunctionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunction'
type MockLambdaAPI_GetFunction_Call struct {
	*mock.Call
}

// GetFunction is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *MockLambdaAPI_Expecter) GetFunction(_a0 interface{}) *MockLambdaAPI_GetFunction_Call {
	return &MockLambdaAPI_GetFunction_Call{Call: _e.mock.On("GetFunction", _a0)}
}

func (_c *MockLambdaAPI_GetFunction_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *MockLambdaAPI_GetFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunction_Call) Return(_a0 *lambda.GetFunctionOutput, _a1 error) *MockLambdaAPI_GetFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunction_Call) RunAndReturn(run func(*lambda.GetFunctionInput) (*lambda.GetFunctionOutput, error)) *MockLambdaAPI_GetFunction_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionCodeSigningConfig(_a0 *lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionCodeSigningConfig")
	}

	var r0 *lambda.GetFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) *lambda.GetFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionCodeSigningConfig'
type MockLambdaAPI_GetFunctionCodeSigningConfig_Call struct {
	*mock.Call
}

// GetFunctionCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) GetFunctionCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_GetFunctionCodeSigningConfig_Call {
	return &MockLambdaAPI_GetFunctionCodeSigningConfig_Call{Call: _e.mock.On("GetFunctionCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfig_Call) Run(run func(_a0 *lambda.GetFunctionCodeSigningConfigInput)) *MockLambdaAPI_GetFunctionCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfig_Call) Return(_a0 *lambda.GetFunctionCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_GetFunctionCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfig_Call) RunAndReturn(run func(*lambda.GetFunctionCodeSigningConfigInput) (*lambda.GetFunctionCodeSigningConfigOutput, error)) *MockLambdaAPI_GetFunctionCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionCodeSigningConfigRequest(_a0 *lambda.GetFunctionCodeSigningConfigInput) (*request.Request, *lambda.GetFunctionCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetFunctionCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) (*request.Request, *lambda.GetFunctionCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionCodeSigningConfigInput) *lambda.GetFunctionCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionCodeSigningConfigRequest'
type MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// GetFunctionCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) GetFunctionCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call{Call: _e.mock.On("GetFunctionCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.GetFunctionCodeSigningConfigInput)) *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionCodeSigningConfigOutput) *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.GetFunctionCodeSigningConfigInput) (*request.Request, *lambda.GetFunctionCodeSigningConfigOutput)) *MockLambdaAPI_GetFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetFunctionCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.GetFunctionCodeSigningConfigInput, _a2 ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionCodeSigningConfigWithContext")
	}

	var r0 *lambda.GetFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) *lambda.GetFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionCodeSigningConfigWithContext'
type MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// GetFunctionCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetFunctionCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call{Call: _e.mock.On("GetFunctionCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call) Return(_a0 *lambda.GetFunctionCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionCodeSigningConfigInput, ...request.Option) (*lambda.GetFunctionCodeSigningConfigOutput, error)) *MockLambdaAPI_GetFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConcurrency provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionConcurrency(_a0 *lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionConcurrency")
	}

	var r0 *lambda.GetFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) *lambda.GetFunctionConcurrencyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConcurrencyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionConcurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConcurrency'
type MockLambdaAPI_GetFunctionConcurrency_Call struct {
	*mock.Call
}

// GetFunctionConcurrency is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConcurrencyInput
func (_e *MockLambdaAPI_Expecter) GetFunctionConcurrency(_a0 interface{}) *MockLambdaAPI_GetFunctionConcurrency_Call {
	return &MockLambdaAPI_GetFunctionConcurrency_Call{Call: _e.mock.On("GetFunctionConcurrency", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionConcurrency_Call) Run(run func(_a0 *lambda.GetFunctionConcurrencyInput)) *MockLambdaAPI_GetFunctionConcurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConcurrencyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConcurrency_Call) Return(_a0 *lambda.GetFunctionConcurrencyOutput, _a1 error) *MockLambdaAPI_GetFunctionConcurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConcurrency_Call) RunAndReturn(run func(*lambda.GetFunctionConcurrencyInput) (*lambda.GetFunctionConcurrencyOutput, error)) *MockLambdaAPI_GetFunctionConcurrency_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConcurrencyRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionConcurrencyRequest(_a0 *lambda.GetFunctionConcurrencyInput) (*request.Request, *lambda.GetFunctionConcurrencyOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionConcurrencyRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) (*request.Request, *lambda.GetFunctionConcurrencyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConcurrencyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConcurrencyInput) *lambda.GetFunctionConcurrencyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionConcurrencyOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionConcurrencyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConcurrencyRequest'
type MockLambdaAPI_GetFunctionConcurrencyRequest_Call struct {
	*mock.Call
}

// GetFunctionConcurrencyRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConcurrencyInput
func (_e *MockLambdaAPI_Expecter) GetFunctionConcurrencyRequest(_a0 interface{}) *MockLambdaAPI_GetFunctionConcurrencyRequest_Call {
	return &MockLambdaAPI_GetFunctionConcurrencyRequest_Call{Call: _e.mock.On("GetFunctionConcurrencyRequest", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionConcurrencyRequest_Call) Run(run func(_a0 *lambda.GetFunctionConcurrencyInput)) *MockLambdaAPI_GetFunctionConcurrencyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConcurrencyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConcurrencyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionConcurrencyOutput) *MockLambdaAPI_GetFunctionConcurrencyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConcurrencyRequest_Call) RunAndReturn(run func(*lambda.GetFunctionConcurrencyInput) (*request.Request, *lambda.GetFunctionConcurrencyOutput)) *MockLambdaAPI_GetFunctionConcurrencyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConcurrencyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetFunctionConcurrencyWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConcurrencyInput, _a2 ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionConcurrencyWithContext")
	}

	var r0 *lambda.GetFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) *lambda.GetFunctionConcurrencyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionConcurrencyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConcurrencyWithContext'
type MockLambdaAPI_GetFunctionConcurrencyWithContext_Call struct {
	*mock.Call
}

// GetFunctionConcurrencyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConcurrencyInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetFunctionConcurrencyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call {
	return &MockLambdaAPI_GetFunctionConcurrencyWithContext_Call{Call: _e.mock.On("GetFunctionConcurrencyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConcurrencyInput, _a2 ...request.Option)) *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConcurrencyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call) Return(_a0 *lambda.GetFunctionConcurrencyOutput, _a1 error) *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConcurrencyInput, ...request.Option) (*lambda.GetFunctionConcurrencyOutput, error)) *MockLambdaAPI_GetFunctionConcurrencyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConfiguration provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionConfiguration(_a0 *lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionConfiguration")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConfiguration'
type MockLambdaAPI_GetFunctionConfiguration_Call struct {
	*mock.Call
}

// GetFunctionConfiguration is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) GetFunctionConfiguration(_a0 interface{}) *MockLambdaAPI_GetFunctionConfiguration_Call {
	return &MockLambdaAPI_GetFunctionConfiguration_Call{Call: _e.mock.On("GetFunctionConfiguration", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionConfiguration_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *MockLambdaAPI_GetFunctionConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConfiguration_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_GetFunctionConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConfiguration_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_GetFunctionConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionConfigurationRequest(_a0 *lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionConfigurationRequest")
	}

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionConfigurationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConfigurationRequest'
type MockLambdaAPI_GetFunctionConfigurationRequest_Call struct {
	*mock.Call
}

// GetFunctionConfigurationRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) GetFunctionConfigurationRequest(_a0 interface{}) *MockLambdaAPI_GetFunctionConfigurationRequest_Call {
	return &MockLambdaAPI_GetFunctionConfigurationRequest_Call{Call: _e.mock.On("GetFunctionConfigurationRequest", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionConfigurationRequest_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *MockLambdaAPI_GetFunctionConfigurationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConfigurationRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *MockLambdaAPI_GetFunctionConfigurationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConfigurationRequest_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)) *MockLambdaAPI_GetFunctionConfigurationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetFunctionConfigurationWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionConfigurationWithContext")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionConfigurationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionConfigurationWithContext'
type MockLambdaAPI_GetFunctionConfigurationWithContext_Call struct {
	*mock.Call
}

// GetFunctionConfigurationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetFunctionConfigurationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetFunctionConfigurationWithContext_Call {
	return &MockLambdaAPI_GetFunctionConfigurationWithContext_Call{Call: _e.mock.On("GetFunctionConfigurationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetFunctionConfigurationWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.Option)) *MockLambdaAPI_GetFunctionConfigurationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConfigurationWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_GetFunctionConfigurationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionConfigurationWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_GetFunctionConfigurationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionEventInvokeConfig(_a0 *lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionEventInvokeConfig")
	}

	var r0 *lambda.GetFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) *lambda.GetFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionEventInvokeConfig'
type MockLambdaAPI_GetFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// GetFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) GetFunctionEventInvokeConfig(_a0 interface{}) *MockLambdaAPI_GetFunctionEventInvokeConfig_Call {
	return &MockLambdaAPI_GetFunctionEventInvokeConfig_Call{Call: _e.mock.On("GetFunctionEventInvokeConfig", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.GetFunctionEventInvokeConfigInput)) *MockLambdaAPI_GetFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfig_Call) Return(_a0 *lambda.GetFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_GetFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.GetFunctionEventInvokeConfigInput) (*lambda.GetFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_GetFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionEventInvokeConfigRequest(_a0 *lambda.GetFunctionEventInvokeConfigInput) (*request.Request, *lambda.GetFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionEventInvokeConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) (*request.Request, *lambda.GetFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionEventInvokeConfigInput) *lambda.GetFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionEventInvokeConfigRequest'
type MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// GetFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) GetFunctionEventInvokeConfigRequest(_a0 interface{}) *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call {
	return &MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("GetFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.GetFunctionEventInvokeConfigInput)) *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionEventInvokeConfigOutput) *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.GetFunctionEventInvokeConfigInput) (*request.Request, *lambda.GetFunctionEventInvokeConfigOutput)) *MockLambdaAPI_GetFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.GetFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionEventInvokeConfigWithContext")
	}

	var r0 *lambda.GetFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) *lambda.GetFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionEventInvokeConfigWithContext'
type MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// GetFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call {
	return &MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("GetFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionEventInvokeConfigInput, _a2 ...request.Option)) *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.GetFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionEventInvokeConfigInput, ...request.Option) (*lambda.GetFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_GetFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionRequest(_a0 *lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetFunctionOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionInput) *lambda.GetFunctionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionRequest'
type MockLambdaAPI_GetFunctionRequest_Call struct {
	*mock.Call
}

// GetFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *MockLambdaAPI_Expecter) GetFunctionRequest(_a0 interface{}) *MockLambdaAPI_GetFunctionRequest_Call {
	return &MockLambdaAPI_GetFunctionRequest_Call{Call: _e.mock.On("GetFunctionRequest", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionRequest_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *MockLambdaAPI_GetFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionOutput) *MockLambdaAPI_GetFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionRequest_Call) RunAndReturn(run func(*lambda.GetFunctionInput) (*request.Request, *lambda.GetFunctionOutput)) *MockLambdaAPI_GetFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionUrlConfig(_a0 *lambda.GetFunctionUrlConfigInput) (*lambda.GetFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionUrlConfig")
	}

	var r0 *lambda.GetFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) (*lambda.GetFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) *lambda.GetFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUrlConfig'
type MockLambdaAPI_GetFunctionUrlConfig_Call struct {
	*mock.Call
}

// GetFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) GetFunctionUrlConfig(_a0 interface{}) *MockLambdaAPI_GetFunctionUrlConfig_Call {
	return &MockLambdaAPI_GetFunctionUrlConfig_Call{Call: _e.mock.On("GetFunctionUrlConfig", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionUrlConfig_Call) Run(run func(_a0 *lambda.GetFunctionUrlConfigInput)) *MockLambdaAPI_GetFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionUrlConfig_Call) Return(_a0 *lambda.GetFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_GetFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.GetFunctionUrlConfigInput) (*lambda.GetFunctionUrlConfigOutput, error)) *MockLambdaAPI_GetFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetFunctionUrlConfigRequest(_a0 *lambda.GetFunctionUrlConfigInput) (*request.Request, *lambda.GetFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionUrlConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) (*request.Request, *lambda.GetFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetFunctionUrlConfigInput) *lambda.GetFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUrlConfigRequest'
type MockLambdaAPI_GetFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// GetFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) GetFunctionUrlConfigRequest(_a0 interface{}) *MockLambdaAPI_GetFunctionUrlConfigRequest_Call {
	return &MockLambdaAPI_GetFunctionUrlConfigRequest_Call{Call: _e.mock.On("GetFunctionUrlConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_GetFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.GetFunctionUrlConfigInput)) *MockLambdaAPI_GetFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetFunctionUrlConfigOutput) *MockLambdaAPI_GetFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.GetFunctionUrlConfigInput) (*request.Request, *lambda.GetFunctionUrlConfigOutput)) *MockLambdaAPI_GetFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.GetFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionUrlConfigWithContext")
	}

	var r0 *lambda.GetFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) *lambda.GetFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionUrlConfigWithContext'
type MockLambdaAPI_GetFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// GetFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call {
	return &MockLambdaAPI_GetFunctionUrlConfigWithContext_Call{Call: _e.mock.On("GetFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionUrlConfigInput, _a2 ...request.Option)) *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.GetFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionUrlConfigInput, ...request.Option) (*lambda.GetFunctionUrlConfigOutput, error)) *MockLambdaAPI_GetFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetFunctionWithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.Option) (*lambda.GetFunctionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionWithContext")
	}

	var r0 *lambda.GetFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.Option) (*lambda.GetFunctionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.Option) *lambda.GetFunctionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionWithContext'
type MockLambdaAPI_GetFunctionWithContext_Call struct {
	*mock.Call
}

// GetFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetFunctionWithContext_Call {
	return &MockLambdaAPI_GetFunctionWithContext_Call{Call: _e.mock.On("GetFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.Option)) *MockLambdaAPI_GetFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetFunctionWithContext_Call) Return(_a0 *lambda.GetFunctionOutput, _a1 error) *MockLambdaAPI_GetFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.Option) (*lambda.GetFunctionOutput, error)) *MockLambdaAPI_GetFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersion provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetLayerVersion(_a0 *lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersion")
	}

	var r0 *lambda.GetLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) *lambda.GetLayerVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersion'
type MockLambdaAPI_GetLayerVersion_Call struct {
	*mock.Call
}

// GetLayerVersion is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionInput
func (_e *MockLambdaAPI_Expecter) GetLayerVersion(_a0 interface{}) *MockLambdaAPI_GetLayerVersion_Call {
	return &MockLambdaAPI_GetLayerVersion_Call{Call: _e.mock.On("GetLayerVersion", _a0)}
}

func (_c *MockLambdaAPI_GetLayerVersion_Call) Run(run func(_a0 *lambda.GetLayerVersionInput)) *MockLambdaAPI_GetLayerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersion_Call) Return(_a0 *lambda.GetLayerVersionOutput, _a1 error) *MockLambdaAPI_GetLayerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersion_Call) RunAndReturn(run func(*lambda.GetLayerVersionInput) (*lambda.GetLayerVersionOutput, error)) *MockLambdaAPI_GetLayerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionByArn provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetLayerVersionByArn(_a0 *lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionByArn")
	}

	var r0 *lambda.GetLayerVersionByArnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) *lambda.GetLayerVersionByArnOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionByArnOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionByArnInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionByArn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionByArn'
type MockLambdaAPI_GetLayerVersionByArn_Call struct {
	*mock.Call
}

// GetLayerVersionByArn is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionByArnInput
func (_e *MockLambdaAPI_Expecter) GetLayerVersionByArn(_a0 interface{}) *MockLambdaAPI_GetLayerVersionByArn_Call {
	return &MockLambdaAPI_GetLayerVersionByArn_Call{Call: _e.mock.On("GetLayerVersionByArn", _a0)}
}

func (_c *MockLambdaAPI_GetLayerVersionByArn_Call) Run(run func(_a0 *lambda.GetLayerVersionByArnInput)) *MockLambdaAPI_GetLayerVersionByArn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionByArnInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionByArn_Call) Return(_a0 *lambda.GetLayerVersionByArnOutput, _a1 error) *MockLambdaAPI_GetLayerVersionByArn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionByArn_Call) RunAndReturn(run func(*lambda.GetLayerVersionByArnInput) (*lambda.GetLayerVersionByArnOutput, error)) *MockLambdaAPI_GetLayerVersionByArn_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionByArnRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetLayerVersionByArnRequest(_a0 *lambda.GetLayerVersionByArnInput) (*request.Request, *lambda.GetLayerVersionByArnOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionByArnRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetLayerVersionByArnOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) (*request.Request, *lambda.GetLayerVersionByArnOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionByArnInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionByArnInput) *lambda.GetLayerVersionByArnOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetLayerVersionByArnOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionByArnRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionByArnRequest'
type MockLambdaAPI_GetLayerVersionByArnRequest_Call struct {
	*mock.Call
}

// GetLayerVersionByArnRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionByArnInput
func (_e *MockLambdaAPI_Expecter) GetLayerVersionByArnRequest(_a0 interface{}) *MockLambdaAPI_GetLayerVersionByArnRequest_Call {
	return &MockLambdaAPI_GetLayerVersionByArnRequest_Call{Call: _e.mock.On("GetLayerVersionByArnRequest", _a0)}
}

func (_c *MockLambdaAPI_GetLayerVersionByArnRequest_Call) Run(run func(_a0 *lambda.GetLayerVersionByArnInput)) *MockLambdaAPI_GetLayerVersionByArnRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionByArnInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionByArnRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetLayerVersionByArnOutput) *MockLambdaAPI_GetLayerVersionByArnRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionByArnRequest_Call) RunAndReturn(run func(*lambda.GetLayerVersionByArnInput) (*request.Request, *lambda.GetLayerVersionByArnOutput)) *MockLambdaAPI_GetLayerVersionByArnRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionByArnWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetLayerVersionByArnWithContext(_a0 context.Context, _a1 *lambda.GetLayerVersionByArnInput, _a2 ...request.Option) (*lambda.GetLayerVersionByArnOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionByArnWithContext")
	}

	var r0 *lambda.GetLayerVersionByArnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) (*lambda.GetLayerVersionByArnOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) *lambda.GetLayerVersionByArnOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionByArnOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionByArnWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionByArnWithContext'
type MockLambdaAPI_GetLayerVersionByArnWithContext_Call struct {
	*mock.Call
}

// GetLayerVersionByArnWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetLayerVersionByArnInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetLayerVersionByArnWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetLayerVersionByArnWithContext_Call {
	return &MockLambdaAPI_GetLayerVersionByArnWithContext_Call{Call: _e.mock.On("GetLayerVersionByArnWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetLayerVersionByArnWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetLayerVersionByArnInput, _a2 ...request.Option)) *MockLambdaAPI_GetLayerVersionByArnWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetLayerVersionByArnInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionByArnWithContext_Call) Return(_a0 *lambda.GetLayerVersionByArnOutput, _a1 error) *MockLambdaAPI_GetLayerVersionByArnWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionByArnWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetLayerVersionByArnInput, ...request.Option) (*lambda.GetLayerVersionByArnOutput, error)) *MockLambdaAPI_GetLayerVersionByArnWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionPolicy provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetLayerVersionPolicy(_a0 *lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionPolicy")
	}

	var r0 *lambda.GetLayerVersionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) *lambda.GetLayerVersionPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionPolicy'
type MockLambdaAPI_GetLayerVersionPolicy_Call struct {
	*mock.Call
}

// GetLayerVersionPolicy is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionPolicyInput
func (_e *MockLambdaAPI_Expecter) GetLayerVersionPolicy(_a0 interface{}) *MockLambdaAPI_GetLayerVersionPolicy_Call {
	return &MockLambdaAPI_GetLayerVersionPolicy_Call{Call: _e.mock.On("GetLayerVersionPolicy", _a0)}
}

func (_c *MockLambdaAPI_GetLayerVersionPolicy_Call) Run(run func(_a0 *lambda.GetLayerVersionPolicyInput)) *MockLambdaAPI_GetLayerVersionPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionPolicyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionPolicy_Call) Return(_a0 *lambda.GetLayerVersionPolicyOutput, _a1 error) *MockLambdaAPI_GetLayerVersionPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionPolicy_Call) RunAndReturn(run func(*lambda.GetLayerVersionPolicyInput) (*lambda.GetLayerVersionPolicyOutput, error)) *MockLambdaAPI_GetLayerVersionPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionPolicyRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetLayerVersionPolicyRequest(_a0 *lambda.GetLayerVersionPolicyInput) (*request.Request, *lambda.GetLayerVersionPolicyOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionPolicyRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetLayerVersionPolicyOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) (*request.Request, *lambda.GetLayerVersionPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionPolicyInput) *lambda.GetLayerVersionPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetLayerVersionPolicyOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionPolicyRequest'
type MockLambdaAPI_GetLayerVersionPolicyRequest_Call struct {
	*mock.Call
}

// GetLayerVersionPolicyRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionPolicyInput
func (_e *MockLambdaAPI_Expecter) GetLayerVersionPolicyRequest(_a0 interface{}) *MockLambdaAPI_GetLayerVersionPolicyRequest_Call {
	return &MockLambdaAPI_GetLayerVersionPolicyRequest_Call{Call: _e.mock.On("GetLayerVersionPolicyRequest", _a0)}
}

func (_c *MockLambdaAPI_GetLayerVersionPolicyRequest_Call) Run(run func(_a0 *lambda.GetLayerVersionPolicyInput)) *MockLambdaAPI_GetLayerVersionPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionPolicyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionPolicyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetLayerVersionPolicyOutput) *MockLambdaAPI_GetLayerVersionPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionPolicyRequest_Call) RunAndReturn(run func(*lambda.GetLayerVersionPolicyInput) (*request.Request, *lambda.GetLayerVersionPolicyOutput)) *MockLambdaAPI_GetLayerVersionPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetLayerVersionPolicyWithContext(_a0 context.Context, _a1 *lambda.GetLayerVersionPolicyInput, _a2 ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionPolicyWithContext")
	}

	var r0 *lambda.GetLayerVersionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) *lambda.GetLayerVersionPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionPolicyWithContext'
type MockLambdaAPI_GetLayerVersionPolicyWithContext_Call struct {
	*mock.Call
}

// GetLayerVersionPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetLayerVersionPolicyInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetLayerVersionPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call {
	return &MockLambdaAPI_GetLayerVersionPolicyWithContext_Call{Call: _e.mock.On("GetLayerVersionPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetLayerVersionPolicyInput, _a2 ...request.Option)) *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetLayerVersionPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call) Return(_a0 *lambda.GetLayerVersionPolicyOutput, _a1 error) *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetLayerVersionPolicyInput, ...request.Option) (*lambda.GetLayerVersionPolicyOutput, error)) *MockLambdaAPI_GetLayerVersionPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetLayerVersionRequest(_a0 *lambda.GetLayerVersionInput) (*request.Request, *lambda.GetLayerVersionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetLayerVersionOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) (*request.Request, *lambda.GetLayerVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetLayerVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetLayerVersionInput) *lambda.GetLayerVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetLayerVersionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionRequest'
type MockLambdaAPI_GetLayerVersionRequest_Call struct {
	*mock.Call
}

// GetLayerVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetLayerVersionInput
func (_e *MockLambdaAPI_Expecter) GetLayerVersionRequest(_a0 interface{}) *MockLambdaAPI_GetLayerVersionRequest_Call {
	return &MockLambdaAPI_GetLayerVersionRequest_Call{Call: _e.mock.On("GetLayerVersionRequest", _a0)}
}

func (_c *MockLambdaAPI_GetLayerVersionRequest_Call) Run(run func(_a0 *lambda.GetLayerVersionInput)) *MockLambdaAPI_GetLayerVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetLayerVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetLayerVersionOutput) *MockLambdaAPI_GetLayerVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionRequest_Call) RunAndReturn(run func(*lambda.GetLayerVersionInput) (*request.Request, *lambda.GetLayerVersionOutput)) *MockLambdaAPI_GetLayerVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetLayerVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetLayerVersionWithContext(_a0 context.Context, _a1 *lambda.GetLayerVersionInput, _a2 ...request.Option) (*lambda.GetLayerVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLayerVersionWithContext")
	}

	var r0 *lambda.GetLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) (*lambda.GetLayerVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) *lambda.GetLayerVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetLayerVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLayerVersionWithContext'
type MockLambdaAPI_GetLayerVersionWithContext_Call struct {
	*mock.Call
}

// GetLayerVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetLayerVersionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetLayerVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetLayerVersionWithContext_Call {
	return &MockLambdaAPI_GetLayerVersionWithContext_Call{Call: _e.mock.On("GetLayerVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetLayerVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetLayerVersionInput, _a2 ...request.Option)) *MockLambdaAPI_GetLayerVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetLayerVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionWithContext_Call) Return(_a0 *lambda.GetLayerVersionOutput, _a1 error) *MockLambdaAPI_GetLayerVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetLayerVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetLayerVersionInput, ...request.Option) (*lambda.GetLayerVersionOutput, error)) *MockLambdaAPI_GetLayerVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetPolicy(_a0 *lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *lambda.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) *lambda.GetPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type MockLambdaAPI_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - _a0 *lambda.GetPolicyInput
func (_e *MockLambdaAPI_Expecter) GetPolicy(_a0 interface{}) *MockLambdaAPI_GetPolicy_Call {
	return &MockLambdaAPI_GetPolicy_Call{Call: _e.mock.On("GetPolicy", _a0)}
}

func (_c *MockLambdaAPI_GetPolicy_Call) Run(run func(_a0 *lambda.GetPolicyInput)) *MockLambdaAPI_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetPolicyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetPolicy_Call) Return(_a0 *lambda.GetPolicyOutput, _a1 error) *MockLambdaAPI_GetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetPolicy_Call) RunAndReturn(run func(*lambda.GetPolicyInput) (*lambda.GetPolicyOutput, error)) *MockLambdaAPI_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetPolicyRequest(_a0 *lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetPolicyOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetPolicyInput) *lambda.GetPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetPolicyOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetPolicyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyRequest'
type MockLambdaAPI_GetPolicyRequest_Call struct {
	*mock.Call
}

// GetPolicyRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetPolicyInput
func (_e *MockLambdaAPI_Expecter) GetPolicyRequest(_a0 interface{}) *MockLambdaAPI_GetPolicyRequest_Call {
	return &MockLambdaAPI_GetPolicyRequest_Call{Call: _e.mock.On("GetPolicyRequest", _a0)}
}

func (_c *MockLambdaAPI_GetPolicyRequest_Call) Run(run func(_a0 *lambda.GetPolicyInput)) *MockLambdaAPI_GetPolicyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetPolicyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetPolicyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetPolicyOutput) *MockLambdaAPI_GetPolicyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetPolicyRequest_Call) RunAndReturn(run func(*lambda.GetPolicyInput) (*request.Request, *lambda.GetPolicyOutput)) *MockLambdaAPI_GetPolicyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetPolicyWithContext(_a0 context.Context, _a1 *lambda.GetPolicyInput, _a2 ...request.Option) (*lambda.GetPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyWithContext")
	}

	var r0 *lambda.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetPolicyInput, ...request.Option) (*lambda.GetPolicyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetPolicyInput, ...request.Option) *lambda.GetPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetPolicyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyWithContext'
type MockLambdaAPI_GetPolicyWithContext_Call struct {
	*mock.Call
}

// GetPolicyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetPolicyInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetPolicyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetPolicyWithContext_Call {
	return &MockLambdaAPI_GetPolicyWithContext_Call{Call: _e.mock.On("GetPolicyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetPolicyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetPolicyInput, _a2 ...request.Option)) *MockLambdaAPI_GetPolicyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetPolicyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetPolicyWithContext_Call) Return(_a0 *lambda.GetPolicyOutput, _a1 error) *MockLambdaAPI_GetPolicyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetPolicyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetPolicyInput, ...request.Option) (*lambda.GetPolicyOutput, error)) *MockLambdaAPI_GetPolicyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvisionedConcurrencyConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetProvisionedConcurrencyConfig(_a0 *lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetProvisionedConcurrencyConfig")
	}

	var r0 *lambda.GetProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) *lambda.GetProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetProvisionedConcurrencyConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetProvisionedConcurrencyConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvisionedConcurrencyConfig'
type MockLambdaAPI_GetProvisionedConcurrencyConfig_Call struct {
	*mock.Call
}

// GetProvisionedConcurrencyConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetProvisionedConcurrencyConfigInput
func (_e *MockLambdaAPI_Expecter) GetProvisionedConcurrencyConfig(_a0 interface{}) *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call {
	return &MockLambdaAPI_GetProvisionedConcurrencyConfig_Call{Call: _e.mock.On("GetProvisionedConcurrencyConfig", _a0)}
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call) Run(run func(_a0 *lambda.GetProvisionedConcurrencyConfigInput)) *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call) Return(_a0 *lambda.GetProvisionedConcurrencyConfigOutput, _a1 error) *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call) RunAndReturn(run func(*lambda.GetProvisionedConcurrencyConfigInput) (*lambda.GetProvisionedConcurrencyConfigOutput, error)) *MockLambdaAPI_GetProvisionedConcurrencyConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvisionedConcurrencyConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetProvisionedConcurrencyConfigRequest(_a0 *lambda.GetProvisionedConcurrencyConfigInput) (*request.Request, *lambda.GetProvisionedConcurrencyConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetProvisionedConcurrencyConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) (*request.Request, *lambda.GetProvisionedConcurrencyConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetProvisionedConcurrencyConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetProvisionedConcurrencyConfigInput) *lambda.GetProvisionedConcurrencyConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetProvisionedConcurrencyConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvisionedConcurrencyConfigRequest'
type MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call struct {
	*mock.Call
}

// GetProvisionedConcurrencyConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetProvisionedConcurrencyConfigInput
func (_e *MockLambdaAPI_Expecter) GetProvisionedConcurrencyConfigRequest(_a0 interface{}) *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call {
	return &MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call{Call: _e.mock.On("GetProvisionedConcurrencyConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call) Run(run func(_a0 *lambda.GetProvisionedConcurrencyConfigInput)) *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetProvisionedConcurrencyConfigOutput) *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call) RunAndReturn(run func(*lambda.GetProvisionedConcurrencyConfigInput) (*request.Request, *lambda.GetProvisionedConcurrencyConfigOutput)) *MockLambdaAPI_GetProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetProvisionedConcurrencyConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetProvisionedConcurrencyConfigWithContext(_a0 context.Context, _a1 *lambda.GetProvisionedConcurrencyConfigInput, _a2 ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProvisionedConcurrencyConfigWithContext")
	}

	var r0 *lambda.GetProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) *lambda.GetProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProvisionedConcurrencyConfigWithContext'
type MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call struct {
	*mock.Call
}

// GetProvisionedConcurrencyConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetProvisionedConcurrencyConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetProvisionedConcurrencyConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call {
	return &MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call{Call: _e.mock.On("GetProvisionedConcurrencyConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetProvisionedConcurrencyConfigInput, _a2 ...request.Option)) *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetProvisionedConcurrencyConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call) Return(_a0 *lambda.GetProvisionedConcurrencyConfigOutput, _a1 error) *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.GetProvisionedConcurrencyConfigOutput, error)) *MockLambdaAPI_GetProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuntimeManagementConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetRuntimeManagementConfig(_a0 *lambda.GetRuntimeManagementConfigInput) (*lambda.GetRuntimeManagementConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRuntimeManagementConfig")
	}

	var r0 *lambda.GetRuntimeManagementConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.GetRuntimeManagementConfigInput) (*lambda.GetRuntimeManagementConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetRuntimeManagementConfigInput) *lambda.GetRuntimeManagementConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetRuntimeManagementConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetRuntimeManagementConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetRuntimeManagementConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuntimeManagementConfig'
type MockLambdaAPI_GetRuntimeManagementConfig_Call struct {
	*mock.Call
}

// GetRuntimeManagementConfig is a helper method to define mock.On call
//   - _a0 *lambda.GetRuntimeManagementConfigInput
func (_e *MockLambdaAPI_Expecter) GetRuntimeManagementConfig(_a0 interface{}) *MockLambdaAPI_GetRuntimeManagementConfig_Call {
	return &MockLambdaAPI_GetRuntimeManagementConfig_Call{Call: _e.mock.On("GetRuntimeManagementConfig", _a0)}
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfig_Call) Run(run func(_a0 *lambda.GetRuntimeManagementConfigInput)) *MockLambdaAPI_GetRuntimeManagementConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetRuntimeManagementConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfig_Call) Return(_a0 *lambda.GetRuntimeManagementConfigOutput, _a1 error) *MockLambdaAPI_GetRuntimeManagementConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfig_Call) RunAndReturn(run func(*lambda.GetRuntimeManagementConfigInput) (*lambda.GetRuntimeManagementConfigOutput, error)) *MockLambdaAPI_GetRuntimeManagementConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuntimeManagementConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) GetRuntimeManagementConfigRequest(_a0 *lambda.GetRuntimeManagementConfigInput) (*request.Request, *lambda.GetRuntimeManagementConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRuntimeManagementConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.GetRuntimeManagementConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.GetRuntimeManagementConfigInput) (*request.Request, *lambda.GetRuntimeManagementConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.GetRuntimeManagementConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.GetRuntimeManagementConfigInput) *lambda.GetRuntimeManagementConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.GetRuntimeManagementConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_GetRuntimeManagementConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuntimeManagementConfigRequest'
type MockLambdaAPI_GetRuntimeManagementConfigRequest_Call struct {
	*mock.Call
}

// GetRuntimeManagementConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.GetRuntimeManagementConfigInput
func (_e *MockLambdaAPI_Expecter) GetRuntimeManagementConfigRequest(_a0 interface{}) *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call {
	return &MockLambdaAPI_GetRuntimeManagementConfigRequest_Call{Call: _e.mock.On("GetRuntimeManagementConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call) Run(run func(_a0 *lambda.GetRuntimeManagementConfigInput)) *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetRuntimeManagementConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.GetRuntimeManagementConfigOutput) *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call) RunAndReturn(run func(*lambda.GetRuntimeManagementConfigInput) (*request.Request, *lambda.GetRuntimeManagementConfigOutput)) *MockLambdaAPI_GetRuntimeManagementConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetRuntimeManagementConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) GetRuntimeManagementConfigWithContext(_a0 context.Context, _a1 *lambda.GetRuntimeManagementConfigInput, _a2 ...request.Option) (*lambda.GetRuntimeManagementConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRuntimeManagementConfigWithContext")
	}

	var r0 *lambda.GetRuntimeManagementConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetRuntimeManagementConfigInput, ...request.Option) (*lambda.GetRuntimeManagementConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetRuntimeManagementConfigInput, ...request.Option) *lambda.GetRuntimeManagementConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.GetRuntimeManagementConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.GetRuntimeManagementConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRuntimeManagementConfigWithContext'
type MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call struct {
	*mock.Call
}

// GetRuntimeManagementConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetRuntimeManagementConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) GetRuntimeManagementConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call {
	return &MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call{Call: _e.mock.On("GetRuntimeManagementConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetRuntimeManagementConfigInput, _a2 ...request.Option)) *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetRuntimeManagementConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call) Return(_a0 *lambda.GetRuntimeManagementConfigOutput, _a1 error) *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetRuntimeManagementConfigInput, ...request.Option) (*lambda.GetRuntimeManagementConfigOutput, error)) *MockLambdaAPI_GetRuntimeManagementConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// Invoke provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) Invoke(_a0 *lambda.InvokeInput) (*lambda.InvokeOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 *lambda.InvokeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) (*lambda.InvokeOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) *lambda.InvokeOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type MockLambdaAPI_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - _a0 *lambda.InvokeInput
func (_e *MockLambdaAPI_Expecter) Invoke(_a0 interface{}) *MockLambdaAPI_Invoke_Call {
	return &MockLambdaAPI_Invoke_Call{Call: _e.mock.On("Invoke", _a0)}
}

func (_c *MockLambdaAPI_Invoke_Call) Run(run func(_a0 *lambda.InvokeInput)) *MockLambdaAPI_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeInput))
	})
	return _c
}

func (_c *MockLambdaAPI_Invoke_Call) Return(_a0 *lambda.InvokeOutput, _a1 error) *MockLambdaAPI_Invoke_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_Invoke_Call) RunAndReturn(run func(*lambda.InvokeInput) (*lambda.InvokeOutput, error)) *MockLambdaAPI_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeAsync provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) InvokeAsync(_a0 *lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InvokeAsync")
	}

	var r0 *lambda.InvokeAsyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) *lambda.InvokeAsyncOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeAsyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeAsyncInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_InvokeAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeAsync'
type MockLambdaAPI_InvokeAsync_Call struct {
	*mock.Call
}

// InvokeAsync is a helper method to define mock.On call
//   - _a0 *lambda.InvokeAsyncInput
func (_e *MockLambdaAPI_Expecter) InvokeAsync(_a0 interface{}) *MockLambdaAPI_InvokeAsync_Call {
	return &MockLambdaAPI_InvokeAsync_Call{Call: _e.mock.On("InvokeAsync", _a0)}
}

func (_c *MockLambdaAPI_InvokeAsync_Call) Run(run func(_a0 *lambda.InvokeAsyncInput)) *MockLambdaAPI_InvokeAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeAsyncInput))
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeAsync_Call) Return(_a0 *lambda.InvokeAsyncOutput, _a1 error) *MockLambdaAPI_InvokeAsync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeAsync_Call) RunAndReturn(run func(*lambda.InvokeAsyncInput) (*lambda.InvokeAsyncOutput, error)) *MockLambdaAPI_InvokeAsync_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeAsyncRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) InvokeAsyncRequest(_a0 *lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InvokeAsyncRequest")
	}

	var r0 *request.Request
	var r1 *lambda.InvokeAsyncOutput
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeAsyncInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeAsyncInput) *lambda.InvokeAsyncOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.InvokeAsyncOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_InvokeAsyncRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeAsyncRequest'
type MockLambdaAPI_InvokeAsyncRequest_Call struct {
	*mock.Call
}

// InvokeAsyncRequest is a helper method to define mock.On call
//   - _a0 *lambda.InvokeAsyncInput
func (_e *MockLambdaAPI_Expecter) InvokeAsyncRequest(_a0 interface{}) *MockLambdaAPI_InvokeAsyncRequest_Call {
	return &MockLambdaAPI_InvokeAsyncRequest_Call{Call: _e.mock.On("InvokeAsyncRequest", _a0)}
}

func (_c *MockLambdaAPI_InvokeAsyncRequest_Call) Run(run func(_a0 *lambda.InvokeAsyncInput)) *MockLambdaAPI_InvokeAsyncRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeAsyncInput))
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeAsyncRequest_Call) Return(_a0 *request.Request, _a1 *lambda.InvokeAsyncOutput) *MockLambdaAPI_InvokeAsyncRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeAsyncRequest_Call) RunAndReturn(run func(*lambda.InvokeAsyncInput) (*request.Request, *lambda.InvokeAsyncOutput)) *MockLambdaAPI_InvokeAsyncRequest_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeAsyncWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) InvokeAsyncWithContext(_a0 context.Context, _a1 *lambda.InvokeAsyncInput, _a2 ...request.Option) (*lambda.InvokeAsyncOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeAsyncWithContext")
	}

	var r0 *lambda.InvokeAsyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) (*lambda.InvokeAsyncOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) *lambda.InvokeAsyncOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeAsyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_InvokeAsyncWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeAsyncWithContext'
type MockLambdaAPI_InvokeAsyncWithContext_Call struct {
	*mock.Call
}

// InvokeAsyncWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.InvokeAsyncInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) InvokeAsyncWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_InvokeAsyncWithContext_Call {
	return &MockLambdaAPI_InvokeAsyncWithContext_Call{Call: _e.mock.On("InvokeAsyncWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_InvokeAsyncWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.InvokeAsyncInput, _a2 ...request.Option)) *MockLambdaAPI_InvokeAsyncWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.InvokeAsyncInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeAsyncWithContext_Call) Return(_a0 *lambda.InvokeAsyncOutput, _a1 error) *MockLambdaAPI_InvokeAsyncWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeAsyncWithContext_Call) RunAndReturn(run func(context.Context, *lambda.InvokeAsyncInput, ...request.Option) (*lambda.InvokeAsyncOutput, error)) *MockLambdaAPI_InvokeAsyncWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) InvokeRequest(_a0 *lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InvokeRequest")
	}

	var r0 *request.Request
	var r1 *lambda.InvokeOutput
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeInput) *lambda.InvokeOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.InvokeOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_InvokeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeRequest'
type MockLambdaAPI_InvokeRequest_Call struct {
	*mock.Call
}

// InvokeRequest is a helper method to define mock.On call
//   - _a0 *lambda.InvokeInput
func (_e *MockLambdaAPI_Expecter) InvokeRequest(_a0 interface{}) *MockLambdaAPI_InvokeRequest_Call {
	return &MockLambdaAPI_InvokeRequest_Call{Call: _e.mock.On("InvokeRequest", _a0)}
}

func (_c *MockLambdaAPI_InvokeRequest_Call) Run(run func(_a0 *lambda.InvokeInput)) *MockLambdaAPI_InvokeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeInput))
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeRequest_Call) Return(_a0 *request.Request, _a1 *lambda.InvokeOutput) *MockLambdaAPI_InvokeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeRequest_Call) RunAndReturn(run func(*lambda.InvokeInput) (*request.Request, *lambda.InvokeOutput)) *MockLambdaAPI_InvokeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) InvokeWithContext(_a0 context.Context, _a1 *lambda.InvokeInput, _a2 ...request.Option) (*lambda.InvokeOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWithContext")
	}

	var r0 *lambda.InvokeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeInput, ...request.Option) (*lambda.InvokeOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeInput, ...request.Option) *lambda.InvokeOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.InvokeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_InvokeWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWithContext'
type MockLambdaAPI_InvokeWithContext_Call struct {
	*mock.Call
}

// InvokeWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.InvokeInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) InvokeWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_InvokeWithContext_Call {
	return &MockLambdaAPI_InvokeWithContext_Call{Call: _e.mock.On("InvokeWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_InvokeWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.InvokeInput, _a2 ...request.Option)) *MockLambdaAPI_InvokeWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.InvokeInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeWithContext_Call) Return(_a0 *lambda.InvokeOutput, _a1 error) *MockLambdaAPI_InvokeWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeWithContext_Call) RunAndReturn(run func(context.Context, *lambda.InvokeInput, ...request.Option) (*lambda.InvokeOutput, error)) *MockLambdaAPI_InvokeWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeWithResponseStream provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) InvokeWithResponseStream(_a0 *lambda.InvokeWithResponseStreamInput) (*lambda.InvokeWithResponseStreamOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWithResponseStream")
	}

	var r0 *lambda.InvokeWithResponseStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.InvokeWithResponseStreamInput) (*lambda.InvokeWithResponseStreamOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeWithResponseStreamInput) *lambda.InvokeWithResponseStreamOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeWithResponseStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeWithResponseStreamInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_InvokeWithResponseStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWithResponseStream'
type MockLambdaAPI_InvokeWithResponseStream_Call struct {
	*mock.Call
}

// InvokeWithResponseStream is a helper method to define mock.On call
//   - _a0 *lambda.InvokeWithResponseStreamInput
func (_e *MockLambdaAPI_Expecter) InvokeWithResponseStream(_a0 interface{}) *MockLambdaAPI_InvokeWithResponseStream_Call {
	return &MockLambdaAPI_InvokeWithResponseStream_Call{Call: _e.mock.On("InvokeWithResponseStream", _a0)}
}

func (_c *MockLambdaAPI_InvokeWithResponseStream_Call) Run(run func(_a0 *lambda.InvokeWithResponseStreamInput)) *MockLambdaAPI_InvokeWithResponseStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeWithResponseStreamInput))
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeWithResponseStream_Call) Return(_a0 *lambda.InvokeWithResponseStreamOutput, _a1 error) *MockLambdaAPI_InvokeWithResponseStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeWithResponseStream_Call) RunAndReturn(run func(*lambda.InvokeWithResponseStreamInput) (*lambda.InvokeWithResponseStreamOutput, error)) *MockLambdaAPI_InvokeWithResponseStream_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeWithResponseStreamRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) InvokeWithResponseStreamRequest(_a0 *lambda.InvokeWithResponseStreamInput) (*request.Request, *lambda.InvokeWithResponseStreamOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWithResponseStreamRequest")
	}

	var r0 *request.Request
	var r1 *lambda.InvokeWithResponseStreamOutput
	if rf, ok := ret.Get(0).(func(*lambda.InvokeWithResponseStreamInput) (*request.Request, *lambda.InvokeWithResponseStreamOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.InvokeWithResponseStreamInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.InvokeWithResponseStreamInput) *lambda.InvokeWithResponseStreamOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.InvokeWithResponseStreamOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_InvokeWithResponseStreamRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWithResponseStreamRequest'
type MockLambdaAPI_InvokeWithResponseStreamRequest_Call struct {
	*mock.Call
}

// InvokeWithResponseStreamRequest is a helper method to define mock.On call
//   - _a0 *lambda.InvokeWithResponseStreamInput
func (_e *MockLambdaAPI_Expecter) InvokeWithResponseStreamRequest(_a0 interface{}) *MockLambdaAPI_InvokeWithResponseStreamRequest_Call {
	return &MockLambdaAPI_InvokeWithResponseStreamRequest_Call{Call: _e.mock.On("InvokeWithResponseStreamRequest", _a0)}
}

func (_c *MockLambdaAPI_InvokeWithResponseStreamRequest_Call) Run(run func(_a0 *lambda.InvokeWithResponseStreamInput)) *MockLambdaAPI_InvokeWithResponseStreamRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.InvokeWithResponseStreamInput))
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeWithResponseStreamRequest_Call) Return(_a0 *request.Request, _a1 *lambda.InvokeWithResponseStreamOutput) *MockLambdaAPI_InvokeWithResponseStreamRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeWithResponseStreamRequest_Call) RunAndReturn(run func(*lambda.InvokeWithResponseStreamInput) (*request.Request, *lambda.InvokeWithResponseStreamOutput)) *MockLambdaAPI_InvokeWithResponseStreamRequest_Call {
	_c.Call.Return(run)
	return _c
}

// InvokeWithResponseStreamWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) InvokeWithResponseStreamWithContext(_a0 context.Context, _a1 *lambda.InvokeWithResponseStreamInput, _a2 ...request.Option) (*lambda.InvokeWithResponseStreamOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeWithResponseStreamWithContext")
	}

	var r0 *lambda.InvokeWithResponseStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeWithResponseStreamInput, ...request.Option) (*lambda.InvokeWithResponseStreamOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.InvokeWithResponseStreamInput, ...request.Option) *lambda.InvokeWithResponseStreamOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.InvokeWithResponseStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.InvokeWithResponseStreamInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_InvokeWithResponseStreamWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvokeWithResponseStreamWithContext'
type MockLambdaAPI_InvokeWithResponseStreamWithContext_Call struct {
	*mock.Call
}

// InvokeWithResponseStreamWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.InvokeWithResponseStreamInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) InvokeWithResponseStreamWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call {
	return &MockLambdaAPI_InvokeWithResponseStreamWithContext_Call{Call: _e.mock.On("InvokeWithResponseStreamWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.InvokeWithResponseStreamInput, _a2 ...request.Option)) *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.InvokeWithResponseStreamInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call) Return(_a0 *lambda.InvokeWithResponseStreamOutput, _a1 error) *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call) RunAndReturn(run func(context.Context, *lambda.InvokeWithResponseStreamInput, ...request.Option) (*lambda.InvokeWithResponseStreamOutput, error)) *MockLambdaAPI_InvokeWithResponseStreamWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliases provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListAliases(_a0 *lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListAliases")
	}

	var r0 *lambda.ListAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) *lambda.ListAliasesOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListAliasesInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListAliases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliases'
type MockLambdaAPI_ListAliases_Call struct {
	*mock.Call
}

// ListAliases is a helper method to define mock.On call
//   - _a0 *lambda.ListAliasesInput
func (_e *MockLambdaAPI_Expecter) ListAliases(_a0 interface{}) *MockLambdaAPI_ListAliases_Call {
	return &MockLambdaAPI_ListAliases_Call{Call: _e.mock.On("ListAliases", _a0)}
}

func (_c *MockLambdaAPI_ListAliases_Call) Run(run func(_a0 *lambda.ListAliasesInput)) *MockLambdaAPI_ListAliases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListAliasesInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListAliases_Call) Return(_a0 *lambda.ListAliasesOutput, _a1 error) *MockLambdaAPI_ListAliases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListAliases_Call) RunAndReturn(run func(*lambda.ListAliasesInput) (*lambda.ListAliasesOutput, error)) *MockLambdaAPI_ListAliases_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListAliasesPages(_a0 *lambda.ListAliasesInput, _a1 func(*lambda.ListAliasesOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListAliasesPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListAliasesPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesPages'
type MockLambdaAPI_ListAliasesPages_Call struct {
	*mock.Call
}

// ListAliasesPages is a helper method to define mock.On call
//   - _a0 *lambda.ListAliasesInput
//   - _a1 func(*lambda.ListAliasesOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListAliasesPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListAliasesPages_Call {
	return &MockLambdaAPI_ListAliasesPages_Call{Call: _e.mock.On("ListAliasesPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListAliasesPages_Call) Run(run func(_a0 *lambda.ListAliasesInput, _a1 func(*lambda.ListAliasesOutput, bool) bool)) *MockLambdaAPI_ListAliasesPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListAliasesInput), args[1].(func(*lambda.ListAliasesOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListAliasesPages_Call) Return(_a0 error) *MockLambdaAPI_ListAliasesPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListAliasesPages_Call) RunAndReturn(run func(*lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool) error) *MockLambdaAPI_ListAliasesPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListAliasesPagesWithContext(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 func(*lambda.ListAliasesOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAliasesPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListAliasesPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesPagesWithContext'
type MockLambdaAPI_ListAliasesPagesWithContext_Call struct {
	*mock.Call
}

// ListAliasesPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListAliasesInput
//   - _a2 func(*lambda.ListAliasesOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListAliasesPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListAliasesPagesWithContext_Call {
	return &MockLambdaAPI_ListAliasesPagesWithContext_Call{Call: _e.mock.On("ListAliasesPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListAliasesPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 func(*lambda.ListAliasesOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListAliasesPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListAliasesInput), args[2].(func(*lambda.ListAliasesOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListAliasesPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListAliasesPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListAliasesPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListAliasesInput, func(*lambda.ListAliasesOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListAliasesPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListAliasesRequest(_a0 *lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListAliasesRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListAliasesOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListAliasesInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListAliasesInput) *lambda.ListAliasesOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListAliasesOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListAliasesRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesRequest'
type MockLambdaAPI_ListAliasesRequest_Call struct {
	*mock.Call
}

// ListAliasesRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListAliasesInput
func (_e *MockLambdaAPI_Expecter) ListAliasesRequest(_a0 interface{}) *MockLambdaAPI_ListAliasesRequest_Call {
	return &MockLambdaAPI_ListAliasesRequest_Call{Call: _e.mock.On("ListAliasesRequest", _a0)}
}

func (_c *MockLambdaAPI_ListAliasesRequest_Call) Run(run func(_a0 *lambda.ListAliasesInput)) *MockLambdaAPI_ListAliasesRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListAliasesInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListAliasesRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListAliasesOutput) *MockLambdaAPI_ListAliasesRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListAliasesRequest_Call) RunAndReturn(run func(*lambda.ListAliasesInput) (*request.Request, *lambda.ListAliasesOutput)) *MockLambdaAPI_ListAliasesRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListAliasesWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListAliasesWithContext(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 ...request.Option) (*lambda.ListAliasesOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAliasesWithContext")
	}

	var r0 *lambda.ListAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, ...request.Option) (*lambda.ListAliasesOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListAliasesInput, ...request.Option) *lambda.ListAliasesOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListAliasesInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListAliasesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAliasesWithContext'
type MockLambdaAPI_ListAliasesWithContext_Call struct {
	*mock.Call
}

// ListAliasesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListAliasesInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListAliasesWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListAliasesWithContext_Call {
	return &MockLambdaAPI_ListAliasesWithContext_Call{Call: _e.mock.On("ListAliasesWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListAliasesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListAliasesInput, _a2 ...request.Option)) *MockLambdaAPI_ListAliasesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListAliasesInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListAliasesWithContext_Call) Return(_a0 *lambda.ListAliasesOutput, _a1 error) *MockLambdaAPI_ListAliasesWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListAliasesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListAliasesInput, ...request.Option) (*lambda.ListAliasesOutput, error)) *MockLambdaAPI_ListAliasesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigs provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListCodeSigningConfigs(_a0 *lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeSigningConfigs")
	}

	var r0 *lambda.ListCodeSigningConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) *lambda.ListCodeSigningConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListCodeSigningConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListCodeSigningConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListCodeSigningConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigs'
type MockLambdaAPI_ListCodeSigningConfigs_Call struct {
	*mock.Call
}

// ListCodeSigningConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListCodeSigningConfigsInput
func (_e *MockLambdaAPI_Expecter) ListCodeSigningConfigs(_a0 interface{}) *MockLambdaAPI_ListCodeSigningConfigs_Call {
	return &MockLambdaAPI_ListCodeSigningConfigs_Call{Call: _e.mock.On("ListCodeSigningConfigs", _a0)}
}

func (_c *MockLambdaAPI_ListCodeSigningConfigs_Call) Run(run func(_a0 *lambda.ListCodeSigningConfigsInput)) *MockLambdaAPI_ListCodeSigningConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListCodeSigningConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigs_Call) Return(_a0 *lambda.ListCodeSigningConfigsOutput, _a1 error) *MockLambdaAPI_ListCodeSigningConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigs_Call) RunAndReturn(run func(*lambda.ListCodeSigningConfigsInput) (*lambda.ListCodeSigningConfigsOutput, error)) *MockLambdaAPI_ListCodeSigningConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListCodeSigningConfigsPages(_a0 *lambda.ListCodeSigningConfigsInput, _a1 func(*lambda.ListCodeSigningConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeSigningConfigsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListCodeSigningConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsPages'
type MockLambdaAPI_ListCodeSigningConfigsPages_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListCodeSigningConfigsInput
//   - _a1 func(*lambda.ListCodeSigningConfigsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListCodeSigningConfigsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListCodeSigningConfigsPages_Call {
	return &MockLambdaAPI_ListCodeSigningConfigsPages_Call{Call: _e.mock.On("ListCodeSigningConfigsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsPages_Call) Run(run func(_a0 *lambda.ListCodeSigningConfigsInput, _a1 func(*lambda.ListCodeSigningConfigsOutput, bool) bool)) *MockLambdaAPI_ListCodeSigningConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListCodeSigningConfigsInput), args[1].(func(*lambda.ListCodeSigningConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsPages_Call) Return(_a0 error) *MockLambdaAPI_ListCodeSigningConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsPages_Call) RunAndReturn(run func(*lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool) error) *MockLambdaAPI_ListCodeSigningConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListCodeSigningConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 func(*lambda.ListCodeSigningConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeSigningConfigsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsPagesWithContext'
type MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListCodeSigningConfigsInput
//   - _a2 func(*lambda.ListCodeSigningConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListCodeSigningConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call {
	return &MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call{Call: _e.mock.On("ListCodeSigningConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 func(*lambda.ListCodeSigningConfigsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListCodeSigningConfigsInput), args[2].(func(*lambda.ListCodeSigningConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListCodeSigningConfigsInput, func(*lambda.ListCodeSigningConfigsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListCodeSigningConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListCodeSigningConfigsRequest(_a0 *lambda.ListCodeSigningConfigsInput) (*request.Request, *lambda.ListCodeSigningConfigsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeSigningConfigsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListCodeSigningConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) (*request.Request, *lambda.ListCodeSigningConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListCodeSigningConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListCodeSigningConfigsInput) *lambda.ListCodeSigningConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListCodeSigningConfigsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListCodeSigningConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsRequest'
type MockLambdaAPI_ListCodeSigningConfigsRequest_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListCodeSigningConfigsInput
func (_e *MockLambdaAPI_Expecter) ListCodeSigningConfigsRequest(_a0 interface{}) *MockLambdaAPI_ListCodeSigningConfigsRequest_Call {
	return &MockLambdaAPI_ListCodeSigningConfigsRequest_Call{Call: _e.mock.On("ListCodeSigningConfigsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsRequest_Call) Run(run func(_a0 *lambda.ListCodeSigningConfigsInput)) *MockLambdaAPI_ListCodeSigningConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListCodeSigningConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListCodeSigningConfigsOutput) *MockLambdaAPI_ListCodeSigningConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsRequest_Call) RunAndReturn(run func(*lambda.ListCodeSigningConfigsInput) (*request.Request, *lambda.ListCodeSigningConfigsOutput)) *MockLambdaAPI_ListCodeSigningConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListCodeSigningConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListCodeSigningConfigsWithContext(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeSigningConfigsWithContext")
	}

	var r0 *lambda.ListCodeSigningConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) *lambda.ListCodeSigningConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListCodeSigningConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListCodeSigningConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCodeSigningConfigsWithContext'
type MockLambdaAPI_ListCodeSigningConfigsWithContext_Call struct {
	*mock.Call
}

// ListCodeSigningConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListCodeSigningConfigsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListCodeSigningConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call {
	return &MockLambdaAPI_ListCodeSigningConfigsWithContext_Call{Call: _e.mock.On("ListCodeSigningConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListCodeSigningConfigsInput, _a2 ...request.Option)) *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListCodeSigningConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call) Return(_a0 *lambda.ListCodeSigningConfigsOutput, _a1 error) *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListCodeSigningConfigsInput, ...request.Option) (*lambda.ListCodeSigningConfigsOutput, error)) *MockLambdaAPI_ListCodeSigningConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappings provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListEventSourceMappings(_a0 *lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListEventSourceMappings")
	}

	var r0 *lambda.ListEventSourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) *lambda.ListEventSourceMappingsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListEventSourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListEventSourceMappingsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListEventSourceMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappings'
type MockLambdaAPI_ListEventSourceMappings_Call struct {
	*mock.Call
}

// ListEventSourceMappings is a helper method to define mock.On call
//   - _a0 *lambda.ListEventSourceMappingsInput
func (_e *MockLambdaAPI_Expecter) ListEventSourceMappings(_a0 interface{}) *MockLambdaAPI_ListEventSourceMappings_Call {
	return &MockLambdaAPI_ListEventSourceMappings_Call{Call: _e.mock.On("ListEventSourceMappings", _a0)}
}

func (_c *MockLambdaAPI_ListEventSourceMappings_Call) Run(run func(_a0 *lambda.ListEventSourceMappingsInput)) *MockLambdaAPI_ListEventSourceMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListEventSourceMappingsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappings_Call) Return(_a0 *lambda.ListEventSourceMappingsOutput, _a1 error) *MockLambdaAPI_ListEventSourceMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappings_Call) RunAndReturn(run func(*lambda.ListEventSourceMappingsInput) (*lambda.ListEventSourceMappingsOutput, error)) *MockLambdaAPI_ListEventSourceMappings_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListEventSourceMappingsPages(_a0 *lambda.ListEventSourceMappingsInput, _a1 func(*lambda.ListEventSourceMappingsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListEventSourceMappingsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListEventSourceMappingsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsPages'
type MockLambdaAPI_ListEventSourceMappingsPages_Call struct {
	*mock.Call
}

// ListEventSourceMappingsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListEventSourceMappingsInput
//   - _a1 func(*lambda.ListEventSourceMappingsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListEventSourceMappingsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListEventSourceMappingsPages_Call {
	return &MockLambdaAPI_ListEventSourceMappingsPages_Call{Call: _e.mock.On("ListEventSourceMappingsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListEventSourceMappingsPages_Call) Run(run func(_a0 *lambda.ListEventSourceMappingsInput, _a1 func(*lambda.ListEventSourceMappingsOutput, bool) bool)) *MockLambdaAPI_ListEventSourceMappingsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListEventSourceMappingsInput), args[1].(func(*lambda.ListEventSourceMappingsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsPages_Call) Return(_a0 error) *MockLambdaAPI_ListEventSourceMappingsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsPages_Call) RunAndReturn(run func(*lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool) error) *MockLambdaAPI_ListEventSourceMappingsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListEventSourceMappingsPagesWithContext(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 func(*lambda.ListEventSourceMappingsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventSourceMappingsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsPagesWithContext'
type MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call struct {
	*mock.Call
}

// ListEventSourceMappingsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListEventSourceMappingsInput
//   - _a2 func(*lambda.ListEventSourceMappingsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListEventSourceMappingsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call {
	return &MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call{Call: _e.mock.On("ListEventSourceMappingsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 func(*lambda.ListEventSourceMappingsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListEventSourceMappingsInput), args[2].(func(*lambda.ListEventSourceMappingsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListEventSourceMappingsInput, func(*lambda.ListEventSourceMappingsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListEventSourceMappingsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListEventSourceMappingsRequest(_a0 *lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListEventSourceMappingsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListEventSourceMappingsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListEventSourceMappingsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListEventSourceMappingsInput) *lambda.ListEventSourceMappingsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListEventSourceMappingsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListEventSourceMappingsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsRequest'
type MockLambdaAPI_ListEventSourceMappingsRequest_Call struct {
	*mock.Call
}

// ListEventSourceMappingsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListEventSourceMappingsInput
func (_e *MockLambdaAPI_Expecter) ListEventSourceMappingsRequest(_a0 interface{}) *MockLambdaAPI_ListEventSourceMappingsRequest_Call {
	return &MockLambdaAPI_ListEventSourceMappingsRequest_Call{Call: _e.mock.On("ListEventSourceMappingsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListEventSourceMappingsRequest_Call) Run(run func(_a0 *lambda.ListEventSourceMappingsInput)) *MockLambdaAPI_ListEventSourceMappingsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListEventSourceMappingsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListEventSourceMappingsOutput) *MockLambdaAPI_ListEventSourceMappingsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsRequest_Call) RunAndReturn(run func(*lambda.ListEventSourceMappingsInput) (*request.Request, *lambda.ListEventSourceMappingsOutput)) *MockLambdaAPI_ListEventSourceMappingsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListEventSourceMappingsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListEventSourceMappingsWithContext(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 ...request.Option) (*lambda.ListEventSourceMappingsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventSourceMappingsWithContext")
	}

	var r0 *lambda.ListEventSourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) (*lambda.ListEventSourceMappingsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) *lambda.ListEventSourceMappingsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListEventSourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListEventSourceMappingsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListEventSourceMappingsWithContext'
type MockLambdaAPI_ListEventSourceMappingsWithContext_Call struct {
	*mock.Call
}

// ListEventSourceMappingsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListEventSourceMappingsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListEventSourceMappingsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListEventSourceMappingsWithContext_Call {
	return &MockLambdaAPI_ListEventSourceMappingsWithContext_Call{Call: _e.mock.On("ListEventSourceMappingsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListEventSourceMappingsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListEventSourceMappingsInput, _a2 ...request.Option)) *MockLambdaAPI_ListEventSourceMappingsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListEventSourceMappingsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsWithContext_Call) Return(_a0 *lambda.ListEventSourceMappingsOutput, _a1 error) *MockLambdaAPI_ListEventSourceMappingsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListEventSourceMappingsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListEventSourceMappingsInput, ...request.Option) (*lambda.ListEventSourceMappingsOutput, error)) *MockLambdaAPI_ListEventSourceMappingsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigs provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionEventInvokeConfigs(_a0 *lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionEventInvokeConfigs")
	}

	var r0 *lambda.ListFunctionEventInvokeConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) *lambda.ListFunctionEventInvokeConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionEventInvokeConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionEventInvokeConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionEventInvokeConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigs'
type MockLambdaAPI_ListFunctionEventInvokeConfigs_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionEventInvokeConfigsInput
func (_e *MockLambdaAPI_Expecter) ListFunctionEventInvokeConfigs(_a0 interface{}) *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call {
	return &MockLambdaAPI_ListFunctionEventInvokeConfigs_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigs", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call) Run(run func(_a0 *lambda.ListFunctionEventInvokeConfigsInput)) *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionEventInvokeConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call) Return(_a0 *lambda.ListFunctionEventInvokeConfigsOutput, _a1 error) *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call) RunAndReturn(run func(*lambda.ListFunctionEventInvokeConfigsInput) (*lambda.ListFunctionEventInvokeConfigsOutput, error)) *MockLambdaAPI_ListFunctionEventInvokeConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListFunctionEventInvokeConfigsPages(_a0 *lambda.ListFunctionEventInvokeConfigsInput, _a1 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionEventInvokeConfigsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsPages'
type MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionEventInvokeConfigsInput
//   - _a1 func(*lambda.ListFunctionEventInvokeConfigsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListFunctionEventInvokeConfigsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call {
	return &MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call) Run(run func(_a0 *lambda.ListFunctionEventInvokeConfigsInput, _a1 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool)) *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionEventInvokeConfigsInput), args[1].(func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call) RunAndReturn(run func(*lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool) error) *MockLambdaAPI_ListFunctionEventInvokeConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListFunctionEventInvokeConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionEventInvokeConfigsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsPagesWithContext'
type MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionEventInvokeConfigsInput
//   - _a2 func(*lambda.ListFunctionEventInvokeConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionEventInvokeConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	return &MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionEventInvokeConfigsInput), args[2].(func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, func(*lambda.ListFunctionEventInvokeConfigsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListFunctionEventInvokeConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionEventInvokeConfigsRequest(_a0 *lambda.ListFunctionEventInvokeConfigsInput) (*request.Request, *lambda.ListFunctionEventInvokeConfigsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionEventInvokeConfigsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListFunctionEventInvokeConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) (*request.Request, *lambda.ListFunctionEventInvokeConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionEventInvokeConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionEventInvokeConfigsInput) *lambda.ListFunctionEventInvokeConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionEventInvokeConfigsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsRequest'
type MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionEventInvokeConfigsInput
func (_e *MockLambdaAPI_Expecter) ListFunctionEventInvokeConfigsRequest(_a0 interface{}) *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call {
	return &MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call) Run(run func(_a0 *lambda.ListFunctionEventInvokeConfigsInput)) *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionEventInvokeConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionEventInvokeConfigsOutput) *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call) RunAndReturn(run func(*lambda.ListFunctionEventInvokeConfigsInput) (*request.Request, *lambda.ListFunctionEventInvokeConfigsOutput)) *MockLambdaAPI_ListFunctionEventInvokeConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionEventInvokeConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListFunctionEventInvokeConfigsWithContext(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionEventInvokeConfigsWithContext")
	}

	var r0 *lambda.ListFunctionEventInvokeConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) *lambda.ListFunctionEventInvokeConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionEventInvokeConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionEventInvokeConfigsWithContext'
type MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call struct {
	*mock.Call
}

// ListFunctionEventInvokeConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionEventInvokeConfigsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionEventInvokeConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call {
	return &MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call{Call: _e.mock.On("ListFunctionEventInvokeConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionEventInvokeConfigsInput, _a2 ...request.Option)) *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionEventInvokeConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call) Return(_a0 *lambda.ListFunctionEventInvokeConfigsOutput, _a1 error) *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionEventInvokeConfigsInput, ...request.Option) (*lambda.ListFunctionEventInvokeConfigsOutput, error)) *MockLambdaAPI_ListFunctionEventInvokeConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigs provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionUrlConfigs(_a0 *lambda.ListFunctionUrlConfigsInput) (*lambda.ListFunctionUrlConfigsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionUrlConfigs")
	}

	var r0 *lambda.ListFunctionUrlConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) (*lambda.ListFunctionUrlConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) *lambda.ListFunctionUrlConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionUrlConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionUrlConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionUrlConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigs'
type MockLambdaAPI_ListFunctionUrlConfigs_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionUrlConfigsInput
func (_e *MockLambdaAPI_Expecter) ListFunctionUrlConfigs(_a0 interface{}) *MockLambdaAPI_ListFunctionUrlConfigs_Call {
	return &MockLambdaAPI_ListFunctionUrlConfigs_Call{Call: _e.mock.On("ListFunctionUrlConfigs", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigs_Call) Run(run func(_a0 *lambda.ListFunctionUrlConfigsInput)) *MockLambdaAPI_ListFunctionUrlConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionUrlConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigs_Call) Return(_a0 *lambda.ListFunctionUrlConfigsOutput, _a1 error) *MockLambdaAPI_ListFunctionUrlConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigs_Call) RunAndReturn(run func(*lambda.ListFunctionUrlConfigsInput) (*lambda.ListFunctionUrlConfigsOutput, error)) *MockLambdaAPI_ListFunctionUrlConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListFunctionUrlConfigsPages(_a0 *lambda.ListFunctionUrlConfigsInput, _a1 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionUrlConfigsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionUrlConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsPages'
type MockLambdaAPI_ListFunctionUrlConfigsPages_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionUrlConfigsInput
//   - _a1 func(*lambda.ListFunctionUrlConfigsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListFunctionUrlConfigsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListFunctionUrlConfigsPages_Call {
	return &MockLambdaAPI_ListFunctionUrlConfigsPages_Call{Call: _e.mock.On("ListFunctionUrlConfigsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsPages_Call) Run(run func(_a0 *lambda.ListFunctionUrlConfigsInput, _a1 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool)) *MockLambdaAPI_ListFunctionUrlConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionUrlConfigsInput), args[1].(func(*lambda.ListFunctionUrlConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsPages_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionUrlConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsPages_Call) RunAndReturn(run func(*lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool) error) *MockLambdaAPI_ListFunctionUrlConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListFunctionUrlConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionUrlConfigsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsPagesWithContext'
type MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionUrlConfigsInput
//   - _a2 func(*lambda.ListFunctionUrlConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionUrlConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call {
	return &MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call{Call: _e.mock.On("ListFunctionUrlConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionUrlConfigsInput), args[2].(func(*lambda.ListFunctionUrlConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionUrlConfigsInput, func(*lambda.ListFunctionUrlConfigsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListFunctionUrlConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionUrlConfigsRequest(_a0 *lambda.ListFunctionUrlConfigsInput) (*request.Request, *lambda.ListFunctionUrlConfigsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionUrlConfigsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListFunctionUrlConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) (*request.Request, *lambda.ListFunctionUrlConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionUrlConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionUrlConfigsInput) *lambda.ListFunctionUrlConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionUrlConfigsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionUrlConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsRequest'
type MockLambdaAPI_ListFunctionUrlConfigsRequest_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionUrlConfigsInput
func (_e *MockLambdaAPI_Expecter) ListFunctionUrlConfigsRequest(_a0 interface{}) *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call {
	return &MockLambdaAPI_ListFunctionUrlConfigsRequest_Call{Call: _e.mock.On("ListFunctionUrlConfigsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call) Run(run func(_a0 *lambda.ListFunctionUrlConfigsInput)) *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionUrlConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionUrlConfigsOutput) *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call) RunAndReturn(run func(*lambda.ListFunctionUrlConfigsInput) (*request.Request, *lambda.ListFunctionUrlConfigsOutput)) *MockLambdaAPI_ListFunctionUrlConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionUrlConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListFunctionUrlConfigsWithContext(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionUrlConfigsWithContext")
	}

	var r0 *lambda.ListFunctionUrlConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) *lambda.ListFunctionUrlConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionUrlConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionUrlConfigsWithContext'
type MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call struct {
	*mock.Call
}

// ListFunctionUrlConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionUrlConfigsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionUrlConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call {
	return &MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call{Call: _e.mock.On("ListFunctionUrlConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionUrlConfigsInput, _a2 ...request.Option)) *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionUrlConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call) Return(_a0 *lambda.ListFunctionUrlConfigsOutput, _a1 error) *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionUrlConfigsInput, ...request.Option) (*lambda.ListFunctionUrlConfigsOutput, error)) *MockLambdaAPI_ListFunctionUrlConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctions provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctions(_a0 *lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctions")
	}

	var r0 *lambda.ListFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) *lambda.ListFunctionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctions'
type MockLambdaAPI_ListFunctions_Call struct {
	*mock.Call
}

// ListFunctions is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsInput
func (_e *MockLambdaAPI_Expecter) ListFunctions(_a0 interface{}) *MockLambdaAPI_ListFunctions_Call {
	return &MockLambdaAPI_ListFunctions_Call{Call: _e.mock.On("ListFunctions", _a0)}
}

func (_c *MockLambdaAPI_ListFunctions_Call) Run(run func(_a0 *lambda.ListFunctionsInput)) *MockLambdaAPI_ListFunctions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctions_Call) Return(_a0 *lambda.ListFunctionsOutput, _a1 error) *MockLambdaAPI_ListFunctions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctions_Call) RunAndReturn(run func(*lambda.ListFunctionsInput) (*lambda.ListFunctionsOutput, error)) *MockLambdaAPI_ListFunctions_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionsByCodeSigningConfig(_a0 *lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsByCodeSigningConfig")
	}

	var r0 *lambda.ListFunctionsByCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) *lambda.ListFunctionsByCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsByCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsByCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfig'
type MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsByCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) ListFunctionsByCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call {
	return &MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call) Run(run func(_a0 *lambda.ListFunctionsByCodeSigningConfigInput)) *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsByCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call) Return(_a0 *lambda.ListFunctionsByCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call) RunAndReturn(run func(*lambda.ListFunctionsByCodeSigningConfigInput) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)) *MockLambdaAPI_ListFunctionsByCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListFunctionsByCodeSigningConfigPages(_a0 *lambda.ListFunctionsByCodeSigningConfigInput, _a1 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsByCodeSigningConfigPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigPages'
type MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsByCodeSigningConfigInput
//   - _a1 func(*lambda.ListFunctionsByCodeSigningConfigOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListFunctionsByCodeSigningConfigPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call {
	return &MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call) Run(run func(_a0 *lambda.ListFunctionsByCodeSigningConfigInput, _a1 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool)) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsByCodeSigningConfigInput), args[1].(func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call) RunAndReturn(run func(*lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool) error) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListFunctionsByCodeSigningConfigPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsByCodeSigningConfigPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigPagesWithContext'
type MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsByCodeSigningConfigInput
//   - _a2 func(*lambda.ListFunctionsByCodeSigningConfigOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionsByCodeSigningConfigPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	return &MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsByCodeSigningConfigInput), args[2].(func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, func(*lambda.ListFunctionsByCodeSigningConfigOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListFunctionsByCodeSigningConfigPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionsByCodeSigningConfigRequest(_a0 *lambda.ListFunctionsByCodeSigningConfigInput) (*request.Request, *lambda.ListFunctionsByCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsByCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListFunctionsByCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) (*request.Request, *lambda.ListFunctionsByCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsByCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsByCodeSigningConfigInput) *lambda.ListFunctionsByCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionsByCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigRequest'
type MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsByCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) ListFunctionsByCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.ListFunctionsByCodeSigningConfigInput)) *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsByCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionsByCodeSigningConfigOutput) *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.ListFunctionsByCodeSigningConfigInput) (*request.Request, *lambda.ListFunctionsByCodeSigningConfigOutput)) *MockLambdaAPI_ListFunctionsByCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsByCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListFunctionsByCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsByCodeSigningConfigWithContext")
	}

	var r0 *lambda.ListFunctionsByCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) *lambda.ListFunctionsByCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsByCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsByCodeSigningConfigWithContext'
type MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// ListFunctionsByCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsByCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionsByCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call{Call: _e.mock.On("ListFunctionsByCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsByCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsByCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call) Return(_a0 *lambda.ListFunctionsByCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsByCodeSigningConfigInput, ...request.Option) (*lambda.ListFunctionsByCodeSigningConfigOutput, error)) *MockLambdaAPI_ListFunctionsByCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListFunctionsPages(_a0 *lambda.ListFunctionsInput, _a1 func(*lambda.ListFunctionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsPages'
type MockLambdaAPI_ListFunctionsPages_Call struct {
	*mock.Call
}

// ListFunctionsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsInput
//   - _a1 func(*lambda.ListFunctionsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListFunctionsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListFunctionsPages_Call {
	return &MockLambdaAPI_ListFunctionsPages_Call{Call: _e.mock.On("ListFunctionsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListFunctionsPages_Call) Run(run func(_a0 *lambda.ListFunctionsInput, _a1 func(*lambda.ListFunctionsOutput, bool) bool)) *MockLambdaAPI_ListFunctionsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsInput), args[1].(func(*lambda.ListFunctionsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsPages_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsPages_Call) RunAndReturn(run func(*lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool) error) *MockLambdaAPI_ListFunctionsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListFunctionsPagesWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 func(*lambda.ListFunctionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListFunctionsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsPagesWithContext'
type MockLambdaAPI_ListFunctionsPagesWithContext_Call struct {
	*mock.Call
}

// ListFunctionsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsInput
//   - _a2 func(*lambda.ListFunctionsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListFunctionsPagesWithContext_Call {
	return &MockLambdaAPI_ListFunctionsPagesWithContext_Call{Call: _e.mock.On("ListFunctionsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListFunctionsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 func(*lambda.ListFunctionsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListFunctionsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsInput), args[2].(func(*lambda.ListFunctionsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListFunctionsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsInput, func(*lambda.ListFunctionsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListFunctionsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListFunctionsRequest(_a0 *lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListFunctionsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListFunctionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListFunctionsInput) *lambda.ListFunctionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListFunctionsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsRequest'
type MockLambdaAPI_ListFunctionsRequest_Call struct {
	*mock.Call
}

// ListFunctionsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListFunctionsInput
func (_e *MockLambdaAPI_Expecter) ListFunctionsRequest(_a0 interface{}) *MockLambdaAPI_ListFunctionsRequest_Call {
	return &MockLambdaAPI_ListFunctionsRequest_Call{Call: _e.mock.On("ListFunctionsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListFunctionsRequest_Call) Run(run func(_a0 *lambda.ListFunctionsInput)) *MockLambdaAPI_ListFunctionsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListFunctionsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListFunctionsOutput) *MockLambdaAPI_ListFunctionsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsRequest_Call) RunAndReturn(run func(*lambda.ListFunctionsInput) (*request.Request, *lambda.ListFunctionsOutput)) *MockLambdaAPI_ListFunctionsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListFunctionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListFunctionsWithContext(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 ...request.Option) (*lambda.ListFunctionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionsWithContext")
	}

	var r0 *lambda.ListFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, ...request.Option) (*lambda.ListFunctionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListFunctionsInput, ...request.Option) *lambda.ListFunctionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListFunctionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListFunctionsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFunctionsWithContext'
type MockLambdaAPI_ListFunctionsWithContext_Call struct {
	*mock.Call
}

// ListFunctionsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListFunctionsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListFunctionsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListFunctionsWithContext_Call {
	return &MockLambdaAPI_ListFunctionsWithContext_Call{Call: _e.mock.On("ListFunctionsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListFunctionsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListFunctionsInput, _a2 ...request.Option)) *MockLambdaAPI_ListFunctionsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListFunctionsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsWithContext_Call) Return(_a0 *lambda.ListFunctionsOutput, _a1 error) *MockLambdaAPI_ListFunctionsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListFunctionsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListFunctionsInput, ...request.Option) (*lambda.ListFunctionsOutput, error)) *MockLambdaAPI_ListFunctionsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersions provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListLayerVersions(_a0 *lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListLayerVersions")
	}

	var r0 *lambda.ListLayerVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) *lambda.ListLayerVersionsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayerVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayerVersionsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListLayerVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersions'
type MockLambdaAPI_ListLayerVersions_Call struct {
	*mock.Call
}

// ListLayerVersions is a helper method to define mock.On call
//   - _a0 *lambda.ListLayerVersionsInput
func (_e *MockLambdaAPI_Expecter) ListLayerVersions(_a0 interface{}) *MockLambdaAPI_ListLayerVersions_Call {
	return &MockLambdaAPI_ListLayerVersions_Call{Call: _e.mock.On("ListLayerVersions", _a0)}
}

func (_c *MockLambdaAPI_ListLayerVersions_Call) Run(run func(_a0 *lambda.ListLayerVersionsInput)) *MockLambdaAPI_ListLayerVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayerVersionsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersions_Call) Return(_a0 *lambda.ListLayerVersionsOutput, _a1 error) *MockLambdaAPI_ListLayerVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersions_Call) RunAndReturn(run func(*lambda.ListLayerVersionsInput) (*lambda.ListLayerVersionsOutput, error)) *MockLambdaAPI_ListLayerVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListLayerVersionsPages(_a0 *lambda.ListLayerVersionsInput, _a1 func(*lambda.ListLayerVersionsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListLayerVersionsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListLayerVersionsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsPages'
type MockLambdaAPI_ListLayerVersionsPages_Call struct {
	*mock.Call
}

// ListLayerVersionsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListLayerVersionsInput
//   - _a1 func(*lambda.ListLayerVersionsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListLayerVersionsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListLayerVersionsPages_Call {
	return &MockLambdaAPI_ListLayerVersionsPages_Call{Call: _e.mock.On("ListLayerVersionsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListLayerVersionsPages_Call) Run(run func(_a0 *lambda.ListLayerVersionsInput, _a1 func(*lambda.ListLayerVersionsOutput, bool) bool)) *MockLambdaAPI_ListLayerVersionsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayerVersionsInput), args[1].(func(*lambda.ListLayerVersionsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsPages_Call) Return(_a0 error) *MockLambdaAPI_ListLayerVersionsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsPages_Call) RunAndReturn(run func(*lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool) error) *MockLambdaAPI_ListLayerVersionsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListLayerVersionsPagesWithContext(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 func(*lambda.ListLayerVersionsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLayerVersionsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListLayerVersionsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsPagesWithContext'
type MockLambdaAPI_ListLayerVersionsPagesWithContext_Call struct {
	*mock.Call
}

// ListLayerVersionsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayerVersionsInput
//   - _a2 func(*lambda.ListLayerVersionsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListLayerVersionsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call {
	return &MockLambdaAPI_ListLayerVersionsPagesWithContext_Call{Call: _e.mock.On("ListLayerVersionsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 func(*lambda.ListLayerVersionsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayerVersionsInput), args[2].(func(*lambda.ListLayerVersionsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayerVersionsInput, func(*lambda.ListLayerVersionsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListLayerVersionsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListLayerVersionsRequest(_a0 *lambda.ListLayerVersionsInput) (*request.Request, *lambda.ListLayerVersionsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListLayerVersionsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListLayerVersionsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) (*request.Request, *lambda.ListLayerVersionsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayerVersionsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayerVersionsInput) *lambda.ListLayerVersionsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListLayerVersionsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListLayerVersionsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsRequest'
type MockLambdaAPI_ListLayerVersionsRequest_Call struct {
	*mock.Call
}

// ListLayerVersionsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListLayerVersionsInput
func (_e *MockLambdaAPI_Expecter) ListLayerVersionsRequest(_a0 interface{}) *MockLambdaAPI_ListLayerVersionsRequest_Call {
	return &MockLambdaAPI_ListLayerVersionsRequest_Call{Call: _e.mock.On("ListLayerVersionsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListLayerVersionsRequest_Call) Run(run func(_a0 *lambda.ListLayerVersionsInput)) *MockLambdaAPI_ListLayerVersionsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayerVersionsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListLayerVersionsOutput) *MockLambdaAPI_ListLayerVersionsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsRequest_Call) RunAndReturn(run func(*lambda.ListLayerVersionsInput) (*request.Request, *lambda.ListLayerVersionsOutput)) *MockLambdaAPI_ListLayerVersionsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayerVersionsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListLayerVersionsWithContext(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 ...request.Option) (*lambda.ListLayerVersionsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLayerVersionsWithContext")
	}

	var r0 *lambda.ListLayerVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) (*lambda.ListLayerVersionsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) *lambda.ListLayerVersionsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayerVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListLayerVersionsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayerVersionsWithContext'
type MockLambdaAPI_ListLayerVersionsWithContext_Call struct {
	*mock.Call
}

// ListLayerVersionsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayerVersionsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListLayerVersionsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListLayerVersionsWithContext_Call {
	return &MockLambdaAPI_ListLayerVersionsWithContext_Call{Call: _e.mock.On("ListLayerVersionsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListLayerVersionsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayerVersionsInput, _a2 ...request.Option)) *MockLambdaAPI_ListLayerVersionsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayerVersionsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsWithContext_Call) Return(_a0 *lambda.ListLayerVersionsOutput, _a1 error) *MockLambdaAPI_ListLayerVersionsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListLayerVersionsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayerVersionsInput, ...request.Option) (*lambda.ListLayerVersionsOutput, error)) *MockLambdaAPI_ListLayerVersionsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayers provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListLayers(_a0 *lambda.ListLayersInput) (*lambda.ListLayersOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListLayers")
	}

	var r0 *lambda.ListLayersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) (*lambda.ListLayersOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) *lambda.ListLayersOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayersInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListLayers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayers'
type MockLambdaAPI_ListLayers_Call struct {
	*mock.Call
}

// ListLayers is a helper method to define mock.On call
//   - _a0 *lambda.ListLayersInput
func (_e *MockLambdaAPI_Expecter) ListLayers(_a0 interface{}) *MockLambdaAPI_ListLayers_Call {
	return &MockLambdaAPI_ListLayers_Call{Call: _e.mock.On("ListLayers", _a0)}
}

func (_c *MockLambdaAPI_ListLayers_Call) Run(run func(_a0 *lambda.ListLayersInput)) *MockLambdaAPI_ListLayers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayersInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayers_Call) Return(_a0 *lambda.ListLayersOutput, _a1 error) *MockLambdaAPI_ListLayers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListLayers_Call) RunAndReturn(run func(*lambda.ListLayersInput) (*lambda.ListLayersOutput, error)) *MockLambdaAPI_ListLayers_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListLayersPages(_a0 *lambda.ListLayersInput, _a1 func(*lambda.ListLayersOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListLayersPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListLayersPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersPages'
type MockLambdaAPI_ListLayersPages_Call struct {
	*mock.Call
}

// ListLayersPages is a helper method to define mock.On call
//   - _a0 *lambda.ListLayersInput
//   - _a1 func(*lambda.ListLayersOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListLayersPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListLayersPages_Call {
	return &MockLambdaAPI_ListLayersPages_Call{Call: _e.mock.On("ListLayersPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListLayersPages_Call) Run(run func(_a0 *lambda.ListLayersInput, _a1 func(*lambda.ListLayersOutput, bool) bool)) *MockLambdaAPI_ListLayersPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayersInput), args[1].(func(*lambda.ListLayersOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayersPages_Call) Return(_a0 error) *MockLambdaAPI_ListLayersPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListLayersPages_Call) RunAndReturn(run func(*lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool) error) *MockLambdaAPI_ListLayersPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListLayersPagesWithContext(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 func(*lambda.ListLayersOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLayersPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListLayersPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersPagesWithContext'
type MockLambdaAPI_ListLayersPagesWithContext_Call struct {
	*mock.Call
}

// ListLayersPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayersInput
//   - _a2 func(*lambda.ListLayersOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListLayersPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListLayersPagesWithContext_Call {
	return &MockLambdaAPI_ListLayersPagesWithContext_Call{Call: _e.mock.On("ListLayersPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListLayersPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 func(*lambda.ListLayersOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListLayersPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayersInput), args[2].(func(*lambda.ListLayersOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayersPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListLayersPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListLayersPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayersInput, func(*lambda.ListLayersOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListLayersPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListLayersRequest(_a0 *lambda.ListLayersInput) (*request.Request, *lambda.ListLayersOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListLayersRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListLayersOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) (*request.Request, *lambda.ListLayersOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListLayersInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListLayersInput) *lambda.ListLayersOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListLayersOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListLayersRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersRequest'
type MockLambdaAPI_ListLayersRequest_Call struct {
	*mock.Call
}

// ListLayersRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListLayersInput
func (_e *MockLambdaAPI_Expecter) ListLayersRequest(_a0 interface{}) *MockLambdaAPI_ListLayersRequest_Call {
	return &MockLambdaAPI_ListLayersRequest_Call{Call: _e.mock.On("ListLayersRequest", _a0)}
}

func (_c *MockLambdaAPI_ListLayersRequest_Call) Run(run func(_a0 *lambda.ListLayersInput)) *MockLambdaAPI_ListLayersRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListLayersInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayersRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListLayersOutput) *MockLambdaAPI_ListLayersRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListLayersRequest_Call) RunAndReturn(run func(*lambda.ListLayersInput) (*request.Request, *lambda.ListLayersOutput)) *MockLambdaAPI_ListLayersRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListLayersWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListLayersWithContext(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 ...request.Option) (*lambda.ListLayersOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLayersWithContext")
	}

	var r0 *lambda.ListLayersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, ...request.Option) (*lambda.ListLayersOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListLayersInput, ...request.Option) *lambda.ListLayersOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListLayersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListLayersInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListLayersWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLayersWithContext'
type MockLambdaAPI_ListLayersWithContext_Call struct {
	*mock.Call
}

// ListLayersWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListLayersInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListLayersWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListLayersWithContext_Call {
	return &MockLambdaAPI_ListLayersWithContext_Call{Call: _e.mock.On("ListLayersWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListLayersWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListLayersInput, _a2 ...request.Option)) *MockLambdaAPI_ListLayersWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListLayersInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListLayersWithContext_Call) Return(_a0 *lambda.ListLayersOutput, _a1 error) *MockLambdaAPI_ListLayersWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListLayersWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListLayersInput, ...request.Option) (*lambda.ListLayersOutput, error)) *MockLambdaAPI_ListLayersWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigs provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListProvisionedConcurrencyConfigs(_a0 *lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisionedConcurrencyConfigs")
	}

	var r0 *lambda.ListProvisionedConcurrencyConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) *lambda.ListProvisionedConcurrencyConfigsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListProvisionedConcurrencyConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListProvisionedConcurrencyConfigsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigs'
type MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigs is a helper method to define mock.On call
//   - _a0 *lambda.ListProvisionedConcurrencyConfigsInput
func (_e *MockLambdaAPI_Expecter) ListProvisionedConcurrencyConfigs(_a0 interface{}) *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call {
	return &MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigs", _a0)}
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call) Run(run func(_a0 *lambda.ListProvisionedConcurrencyConfigsInput)) *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListProvisionedConcurrencyConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call) Return(_a0 *lambda.ListProvisionedConcurrencyConfigsOutput, _a1 error) *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call) RunAndReturn(run func(*lambda.ListProvisionedConcurrencyConfigsInput) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)) *MockLambdaAPI_ListProvisionedConcurrencyConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListProvisionedConcurrencyConfigsPages(_a0 *lambda.ListProvisionedConcurrencyConfigsInput, _a1 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisionedConcurrencyConfigsPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsPages'
type MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsPages is a helper method to define mock.On call
//   - _a0 *lambda.ListProvisionedConcurrencyConfigsInput
//   - _a1 func(*lambda.ListProvisionedConcurrencyConfigsOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListProvisionedConcurrencyConfigsPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call {
	return &MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call) Run(run func(_a0 *lambda.ListProvisionedConcurrencyConfigsInput, _a1 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool)) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListProvisionedConcurrencyConfigsInput), args[1].(func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call) Return(_a0 error) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call) RunAndReturn(run func(*lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool) error) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListProvisionedConcurrencyConfigsPagesWithContext(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisionedConcurrencyConfigsPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsPagesWithContext'
type MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListProvisionedConcurrencyConfigsInput
//   - _a2 func(*lambda.ListProvisionedConcurrencyConfigsOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListProvisionedConcurrencyConfigsPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	return &MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListProvisionedConcurrencyConfigsInput), args[2].(func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, func(*lambda.ListProvisionedConcurrencyConfigsOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListProvisionedConcurrencyConfigsPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListProvisionedConcurrencyConfigsRequest(_a0 *lambda.ListProvisionedConcurrencyConfigsInput) (*request.Request, *lambda.ListProvisionedConcurrencyConfigsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisionedConcurrencyConfigsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListProvisionedConcurrencyConfigsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) (*request.Request, *lambda.ListProvisionedConcurrencyConfigsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListProvisionedConcurrencyConfigsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListProvisionedConcurrencyConfigsInput) *lambda.ListProvisionedConcurrencyConfigsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListProvisionedConcurrencyConfigsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsRequest'
type MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListProvisionedConcurrencyConfigsInput
func (_e *MockLambdaAPI_Expecter) ListProvisionedConcurrencyConfigsRequest(_a0 interface{}) *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call {
	return &MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call) Run(run func(_a0 *lambda.ListProvisionedConcurrencyConfigsInput)) *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListProvisionedConcurrencyConfigsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListProvisionedConcurrencyConfigsOutput) *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call) RunAndReturn(run func(*lambda.ListProvisionedConcurrencyConfigsInput) (*request.Request, *lambda.ListProvisionedConcurrencyConfigsOutput)) *MockLambdaAPI_ListProvisionedConcurrencyConfigsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListProvisionedConcurrencyConfigsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListProvisionedConcurrencyConfigsWithContext(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisionedConcurrencyConfigsWithContext")
	}

	var r0 *lambda.ListProvisionedConcurrencyConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) *lambda.ListProvisionedConcurrencyConfigsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListProvisionedConcurrencyConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProvisionedConcurrencyConfigsWithContext'
type MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call struct {
	*mock.Call
}

// ListProvisionedConcurrencyConfigsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListProvisionedConcurrencyConfigsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListProvisionedConcurrencyConfigsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call {
	return &MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call{Call: _e.mock.On("ListProvisionedConcurrencyConfigsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListProvisionedConcurrencyConfigsInput, _a2 ...request.Option)) *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListProvisionedConcurrencyConfigsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call) Return(_a0 *lambda.ListProvisionedConcurrencyConfigsOutput, _a1 error) *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListProvisionedConcurrencyConfigsInput, ...request.Option) (*lambda.ListProvisionedConcurrencyConfigsOutput, error)) *MockLambdaAPI_ListProvisionedConcurrencyConfigsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListTags(_a0 *lambda.ListTagsInput) (*lambda.ListTagsOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *lambda.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) (*lambda.ListTagsOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) *lambda.ListTagsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListTagsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type MockLambdaAPI_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
//   - _a0 *lambda.ListTagsInput
func (_e *MockLambdaAPI_Expecter) ListTags(_a0 interface{}) *MockLambdaAPI_ListTags_Call {
	return &MockLambdaAPI_ListTags_Call{Call: _e.mock.On("ListTags", _a0)}
}

func (_c *MockLambdaAPI_ListTags_Call) Run(run func(_a0 *lambda.ListTagsInput)) *MockLambdaAPI_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListTagsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListTags_Call) Return(_a0 *lambda.ListTagsOutput, _a1 error) *MockLambdaAPI_ListTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListTags_Call) RunAndReturn(run func(*lambda.ListTagsInput) (*lambda.ListTagsOutput, error)) *MockLambdaAPI_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListTagsRequest(_a0 *lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListTagsOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListTagsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListTagsInput) *lambda.ListTagsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListTagsOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListTagsRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsRequest'
type MockLambdaAPI_ListTagsRequest_Call struct {
	*mock.Call
}

// ListTagsRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListTagsInput
func (_e *MockLambdaAPI_Expecter) ListTagsRequest(_a0 interface{}) *MockLambdaAPI_ListTagsRequest_Call {
	return &MockLambdaAPI_ListTagsRequest_Call{Call: _e.mock.On("ListTagsRequest", _a0)}
}

func (_c *MockLambdaAPI_ListTagsRequest_Call) Run(run func(_a0 *lambda.ListTagsInput)) *MockLambdaAPI_ListTagsRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListTagsInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListTagsRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListTagsOutput) *MockLambdaAPI_ListTagsRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListTagsRequest_Call) RunAndReturn(run func(*lambda.ListTagsInput) (*request.Request, *lambda.ListTagsOutput)) *MockLambdaAPI_ListTagsRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListTagsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListTagsWithContext(_a0 context.Context, _a1 *lambda.ListTagsInput, _a2 ...request.Option) (*lambda.ListTagsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsWithContext")
	}

	var r0 *lambda.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListTagsInput, ...request.Option) (*lambda.ListTagsOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListTagsInput, ...request.Option) *lambda.ListTagsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListTagsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListTagsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTagsWithContext'
type MockLambdaAPI_ListTagsWithContext_Call struct {
	*mock.Call
}

// ListTagsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListTagsInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListTagsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListTagsWithContext_Call {
	return &MockLambdaAPI_ListTagsWithContext_Call{Call: _e.mock.On("ListTagsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListTagsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListTagsInput, _a2 ...request.Option)) *MockLambdaAPI_ListTagsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListTagsInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListTagsWithContext_Call) Return(_a0 *lambda.ListTagsOutput, _a1 error) *MockLambdaAPI_ListTagsWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListTagsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListTagsInput, ...request.Option) (*lambda.ListTagsOutput, error)) *MockLambdaAPI_ListTagsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunction provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListVersionsByFunction(_a0 *lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListVersionsByFunction")
	}

	var r0 *lambda.ListVersionsByFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) *lambda.ListVersionsByFunctionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListVersionsByFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListVersionsByFunctionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListVersionsByFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunction'
type MockLambdaAPI_ListVersionsByFunction_Call struct {
	*mock.Call
}

// ListVersionsByFunction is a helper method to define mock.On call
//   - _a0 *lambda.ListVersionsByFunctionInput
func (_e *MockLambdaAPI_Expecter) ListVersionsByFunction(_a0 interface{}) *MockLambdaAPI_ListVersionsByFunction_Call {
	return &MockLambdaAPI_ListVersionsByFunction_Call{Call: _e.mock.On("ListVersionsByFunction", _a0)}
}

func (_c *MockLambdaAPI_ListVersionsByFunction_Call) Run(run func(_a0 *lambda.ListVersionsByFunctionInput)) *MockLambdaAPI_ListVersionsByFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListVersionsByFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunction_Call) Return(_a0 *lambda.ListVersionsByFunctionOutput, _a1 error) *MockLambdaAPI_ListVersionsByFunction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunction_Call) RunAndReturn(run func(*lambda.ListVersionsByFunctionInput) (*lambda.ListVersionsByFunctionOutput, error)) *MockLambdaAPI_ListVersionsByFunction_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionPages provides a mock function with given fields: _a0, _a1
func (_m *MockLambdaAPI) ListVersionsByFunctionPages(_a0 *lambda.ListVersionsByFunctionInput, _a1 func(*lambda.ListVersionsByFunctionOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListVersionsByFunctionPages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListVersionsByFunctionPages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionPages'
type MockLambdaAPI_ListVersionsByFunctionPages_Call struct {
	*mock.Call
}

// ListVersionsByFunctionPages is a helper method to define mock.On call
//   - _a0 *lambda.ListVersionsByFunctionInput
//   - _a1 func(*lambda.ListVersionsByFunctionOutput , bool) bool
func (_e *MockLambdaAPI_Expecter) ListVersionsByFunctionPages(_a0 interface{}, _a1 interface{}) *MockLambdaAPI_ListVersionsByFunctionPages_Call {
	return &MockLambdaAPI_ListVersionsByFunctionPages_Call{Call: _e.mock.On("ListVersionsByFunctionPages", _a0, _a1)}
}

func (_c *MockLambdaAPI_ListVersionsByFunctionPages_Call) Run(run func(_a0 *lambda.ListVersionsByFunctionInput, _a1 func(*lambda.ListVersionsByFunctionOutput, bool) bool)) *MockLambdaAPI_ListVersionsByFunctionPages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListVersionsByFunctionInput), args[1].(func(*lambda.ListVersionsByFunctionOutput, bool) bool))
	})
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionPages_Call) Return(_a0 error) *MockLambdaAPI_ListVersionsByFunctionPages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionPages_Call) RunAndReturn(run func(*lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool) error) *MockLambdaAPI_ListVersionsByFunctionPages_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockLambdaAPI) ListVersionsByFunctionPagesWithContext(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 func(*lambda.ListVersionsByFunctionOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVersionsByFunctionPagesWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionPagesWithContext'
type MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call struct {
	*mock.Call
}

// ListVersionsByFunctionPagesWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListVersionsByFunctionInput
//   - _a2 func(*lambda.ListVersionsByFunctionOutput , bool) bool
//   - _a3 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListVersionsByFunctionPagesWithContext(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call {
	return &MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call{Call: _e.mock.On("ListVersionsByFunctionPagesWithContext",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 func(*lambda.ListVersionsByFunctionOutput, bool) bool, _a3 ...request.Option)) *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListVersionsByFunctionInput), args[2].(func(*lambda.ListVersionsByFunctionOutput, bool) bool), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call) Return(_a0 error) *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListVersionsByFunctionInput, func(*lambda.ListVersionsByFunctionOutput, bool) bool, ...request.Option) error) *MockLambdaAPI_ListVersionsByFunctionPagesWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) ListVersionsByFunctionRequest(_a0 *lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListVersionsByFunctionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.ListVersionsByFunctionOutput
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.ListVersionsByFunctionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.ListVersionsByFunctionInput) *lambda.ListVersionsByFunctionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.ListVersionsByFunctionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_ListVersionsByFunctionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionRequest'
type MockLambdaAPI_ListVersionsByFunctionRequest_Call struct {
	*mock.Call
}

// ListVersionsByFunctionRequest is a helper method to define mock.On call
//   - _a0 *lambda.ListVersionsByFunctionInput
func (_e *MockLambdaAPI_Expecter) ListVersionsByFunctionRequest(_a0 interface{}) *MockLambdaAPI_ListVersionsByFunctionRequest_Call {
	return &MockLambdaAPI_ListVersionsByFunctionRequest_Call{Call: _e.mock.On("ListVersionsByFunctionRequest", _a0)}
}

func (_c *MockLambdaAPI_ListVersionsByFunctionRequest_Call) Run(run func(_a0 *lambda.ListVersionsByFunctionInput)) *MockLambdaAPI_ListVersionsByFunctionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.ListVersionsByFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.ListVersionsByFunctionOutput) *MockLambdaAPI_ListVersionsByFunctionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionRequest_Call) RunAndReturn(run func(*lambda.ListVersionsByFunctionInput) (*request.Request, *lambda.ListVersionsByFunctionOutput)) *MockLambdaAPI_ListVersionsByFunctionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ListVersionsByFunctionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) ListVersionsByFunctionWithContext(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 ...request.Option) (*lambda.ListVersionsByFunctionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVersionsByFunctionWithContext")
	}

	var r0 *lambda.ListVersionsByFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) (*lambda.ListVersionsByFunctionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) *lambda.ListVersionsByFunctionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.ListVersionsByFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_ListVersionsByFunctionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVersionsByFunctionWithContext'
type MockLambdaAPI_ListVersionsByFunctionWithContext_Call struct {
	*mock.Call
}

// ListVersionsByFunctionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.ListVersionsByFunctionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) ListVersionsByFunctionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_ListVersionsByFunctionWithContext_Call {
	return &MockLambdaAPI_ListVersionsByFunctionWithContext_Call{Call: _e.mock.On("ListVersionsByFunctionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_ListVersionsByFunctionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.ListVersionsByFunctionInput, _a2 ...request.Option)) *MockLambdaAPI_ListVersionsByFunctionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.ListVersionsByFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionWithContext_Call) Return(_a0 *lambda.ListVersionsByFunctionOutput, _a1 error) *MockLambdaAPI_ListVersionsByFunctionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_ListVersionsByFunctionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.ListVersionsByFunctionInput, ...request.Option) (*lambda.ListVersionsByFunctionOutput, error)) *MockLambdaAPI_ListVersionsByFunctionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PublishLayerVersion provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PublishLayerVersion(_a0 *lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PublishLayerVersion")
	}

	var r0 *lambda.PublishLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) *lambda.PublishLayerVersionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PublishLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishLayerVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PublishLayerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishLayerVersion'
type MockLambdaAPI_PublishLayerVersion_Call struct {
	*mock.Call
}

// PublishLayerVersion is a helper method to define mock.On call
//   - _a0 *lambda.PublishLayerVersionInput
func (_e *MockLambdaAPI_Expecter) PublishLayerVersion(_a0 interface{}) *MockLambdaAPI_PublishLayerVersion_Call {
	return &MockLambdaAPI_PublishLayerVersion_Call{Call: _e.mock.On("PublishLayerVersion", _a0)}
}

func (_c *MockLambdaAPI_PublishLayerVersion_Call) Run(run func(_a0 *lambda.PublishLayerVersionInput)) *MockLambdaAPI_PublishLayerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishLayerVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PublishLayerVersion_Call) Return(_a0 *lambda.PublishLayerVersionOutput, _a1 error) *MockLambdaAPI_PublishLayerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PublishLayerVersion_Call) RunAndReturn(run func(*lambda.PublishLayerVersionInput) (*lambda.PublishLayerVersionOutput, error)) *MockLambdaAPI_PublishLayerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PublishLayerVersionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PublishLayerVersionRequest(_a0 *lambda.PublishLayerVersionInput) (*request.Request, *lambda.PublishLayerVersionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PublishLayerVersionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.PublishLayerVersionOutput
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) (*request.Request, *lambda.PublishLayerVersionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishLayerVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishLayerVersionInput) *lambda.PublishLayerVersionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PublishLayerVersionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PublishLayerVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishLayerVersionRequest'
type MockLambdaAPI_PublishLayerVersionRequest_Call struct {
	*mock.Call
}

// PublishLayerVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.PublishLayerVersionInput
func (_e *MockLambdaAPI_Expecter) PublishLayerVersionRequest(_a0 interface{}) *MockLambdaAPI_PublishLayerVersionRequest_Call {
	return &MockLambdaAPI_PublishLayerVersionRequest_Call{Call: _e.mock.On("PublishLayerVersionRequest", _a0)}
}

func (_c *MockLambdaAPI_PublishLayerVersionRequest_Call) Run(run func(_a0 *lambda.PublishLayerVersionInput)) *MockLambdaAPI_PublishLayerVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishLayerVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PublishLayerVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PublishLayerVersionOutput) *MockLambdaAPI_PublishLayerVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PublishLayerVersionRequest_Call) RunAndReturn(run func(*lambda.PublishLayerVersionInput) (*request.Request, *lambda.PublishLayerVersionOutput)) *MockLambdaAPI_PublishLayerVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PublishLayerVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PublishLayerVersionWithContext(_a0 context.Context, _a1 *lambda.PublishLayerVersionInput, _a2 ...request.Option) (*lambda.PublishLayerVersionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishLayerVersionWithContext")
	}

	var r0 *lambda.PublishLayerVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) (*lambda.PublishLayerVersionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) *lambda.PublishLayerVersionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PublishLayerVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PublishLayerVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishLayerVersionWithContext'
type MockLambdaAPI_PublishLayerVersionWithContext_Call struct {
	*mock.Call
}

// PublishLayerVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PublishLayerVersionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PublishLayerVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PublishLayerVersionWithContext_Call {
	return &MockLambdaAPI_PublishLayerVersionWithContext_Call{Call: _e.mock.On("PublishLayerVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PublishLayerVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PublishLayerVersionInput, _a2 ...request.Option)) *MockLambdaAPI_PublishLayerVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PublishLayerVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PublishLayerVersionWithContext_Call) Return(_a0 *lambda.PublishLayerVersionOutput, _a1 error) *MockLambdaAPI_PublishLayerVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PublishLayerVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PublishLayerVersionInput, ...request.Option) (*lambda.PublishLayerVersionOutput, error)) *MockLambdaAPI_PublishLayerVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVersion provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PublishVersion(_a0 *lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PublishVersion")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishVersionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PublishVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVersion'
type MockLambdaAPI_PublishVersion_Call struct {
	*mock.Call
}

// PublishVersion is a helper method to define mock.On call
//   - _a0 *lambda.PublishVersionInput
func (_e *MockLambdaAPI_Expecter) PublishVersion(_a0 interface{}) *MockLambdaAPI_PublishVersion_Call {
	return &MockLambdaAPI_PublishVersion_Call{Call: _e.mock.On("PublishVersion", _a0)}
}

func (_c *MockLambdaAPI_PublishVersion_Call) Run(run func(_a0 *lambda.PublishVersionInput)) *MockLambdaAPI_PublishVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PublishVersion_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_PublishVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PublishVersion_Call) RunAndReturn(run func(*lambda.PublishVersionInput) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_PublishVersion_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVersionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PublishVersionRequest(_a0 *lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PublishVersionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PublishVersionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PublishVersionInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PublishVersionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVersionRequest'
type MockLambdaAPI_PublishVersionRequest_Call struct {
	*mock.Call
}

// PublishVersionRequest is a helper method to define mock.On call
//   - _a0 *lambda.PublishVersionInput
func (_e *MockLambdaAPI_Expecter) PublishVersionRequest(_a0 interface{}) *MockLambdaAPI_PublishVersionRequest_Call {
	return &MockLambdaAPI_PublishVersionRequest_Call{Call: _e.mock.On("PublishVersionRequest", _a0)}
}

func (_c *MockLambdaAPI_PublishVersionRequest_Call) Run(run func(_a0 *lambda.PublishVersionInput)) *MockLambdaAPI_PublishVersionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PublishVersionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PublishVersionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *MockLambdaAPI_PublishVersionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PublishVersionRequest_Call) RunAndReturn(run func(*lambda.PublishVersionInput) (*request.Request, *lambda.FunctionConfiguration)) *MockLambdaAPI_PublishVersionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PublishVersionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PublishVersionWithContext(_a0 context.Context, _a1 *lambda.PublishVersionInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishVersionWithContext")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishVersionInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PublishVersionInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PublishVersionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PublishVersionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishVersionWithContext'
type MockLambdaAPI_PublishVersionWithContext_Call struct {
	*mock.Call
}

// PublishVersionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PublishVersionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PublishVersionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PublishVersionWithContext_Call {
	return &MockLambdaAPI_PublishVersionWithContext_Call{Call: _e.mock.On("PublishVersionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PublishVersionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PublishVersionInput, _a2 ...request.Option)) *MockLambdaAPI_PublishVersionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PublishVersionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PublishVersionWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_PublishVersionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PublishVersionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PublishVersionInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_PublishVersionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutFunctionCodeSigningConfig(_a0 *lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionCodeSigningConfig")
	}

	var r0 *lambda.PutFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) *lambda.PutFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionCodeSigningConfig'
type MockLambdaAPI_PutFunctionCodeSigningConfig_Call struct {
	*mock.Call
}

// PutFunctionCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) PutFunctionCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_PutFunctionCodeSigningConfig_Call {
	return &MockLambdaAPI_PutFunctionCodeSigningConfig_Call{Call: _e.mock.On("PutFunctionCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfig_Call) Run(run func(_a0 *lambda.PutFunctionCodeSigningConfigInput)) *MockLambdaAPI_PutFunctionCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfig_Call) Return(_a0 *lambda.PutFunctionCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_PutFunctionCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfig_Call) RunAndReturn(run func(*lambda.PutFunctionCodeSigningConfigInput) (*lambda.PutFunctionCodeSigningConfigOutput, error)) *MockLambdaAPI_PutFunctionCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutFunctionCodeSigningConfigRequest(_a0 *lambda.PutFunctionCodeSigningConfigInput) (*request.Request, *lambda.PutFunctionCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.PutFunctionCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) (*request.Request, *lambda.PutFunctionCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionCodeSigningConfigInput) *lambda.PutFunctionCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutFunctionCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionCodeSigningConfigRequest'
type MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// PutFunctionCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) PutFunctionCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call{Call: _e.mock.On("PutFunctionCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.PutFunctionCodeSigningConfigInput)) *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutFunctionCodeSigningConfigOutput) *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.PutFunctionCodeSigningConfigInput) (*request.Request, *lambda.PutFunctionCodeSigningConfigOutput)) *MockLambdaAPI_PutFunctionCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PutFunctionCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.PutFunctionCodeSigningConfigInput, _a2 ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionCodeSigningConfigWithContext")
	}

	var r0 *lambda.PutFunctionCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) *lambda.PutFunctionCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionCodeSigningConfigWithContext'
type MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// PutFunctionCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutFunctionCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PutFunctionCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call{Call: _e.mock.On("PutFunctionCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutFunctionCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutFunctionCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call) Return(_a0 *lambda.PutFunctionCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutFunctionCodeSigningConfigInput, ...request.Option) (*lambda.PutFunctionCodeSigningConfigOutput, error)) *MockLambdaAPI_PutFunctionCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionConcurrency provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutFunctionConcurrency(_a0 *lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionConcurrency")
	}

	var r0 *lambda.PutFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) *lambda.PutFunctionConcurrencyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionConcurrencyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionConcurrency_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionConcurrency'
type MockLambdaAPI_PutFunctionConcurrency_Call struct {
	*mock.Call
}

// PutFunctionConcurrency is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionConcurrencyInput
func (_e *MockLambdaAPI_Expecter) PutFunctionConcurrency(_a0 interface{}) *MockLambdaAPI_PutFunctionConcurrency_Call {
	return &MockLambdaAPI_PutFunctionConcurrency_Call{Call: _e.mock.On("PutFunctionConcurrency", _a0)}
}

func (_c *MockLambdaAPI_PutFunctionConcurrency_Call) Run(run func(_a0 *lambda.PutFunctionConcurrencyInput)) *MockLambdaAPI_PutFunctionConcurrency_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionConcurrencyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionConcurrency_Call) Return(_a0 *lambda.PutFunctionConcurrencyOutput, _a1 error) *MockLambdaAPI_PutFunctionConcurrency_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionConcurrency_Call) RunAndReturn(run func(*lambda.PutFunctionConcurrencyInput) (*lambda.PutFunctionConcurrencyOutput, error)) *MockLambdaAPI_PutFunctionConcurrency_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionConcurrencyRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutFunctionConcurrencyRequest(_a0 *lambda.PutFunctionConcurrencyInput) (*request.Request, *lambda.PutFunctionConcurrencyOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionConcurrencyRequest")
	}

	var r0 *request.Request
	var r1 *lambda.PutFunctionConcurrencyOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) (*request.Request, *lambda.PutFunctionConcurrencyOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionConcurrencyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionConcurrencyInput) *lambda.PutFunctionConcurrencyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionConcurrencyRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionConcurrencyRequest'
type MockLambdaAPI_PutFunctionConcurrencyRequest_Call struct {
	*mock.Call
}

// PutFunctionConcurrencyRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionConcurrencyInput
func (_e *MockLambdaAPI_Expecter) PutFunctionConcurrencyRequest(_a0 interface{}) *MockLambdaAPI_PutFunctionConcurrencyRequest_Call {
	return &MockLambdaAPI_PutFunctionConcurrencyRequest_Call{Call: _e.mock.On("PutFunctionConcurrencyRequest", _a0)}
}

func (_c *MockLambdaAPI_PutFunctionConcurrencyRequest_Call) Run(run func(_a0 *lambda.PutFunctionConcurrencyInput)) *MockLambdaAPI_PutFunctionConcurrencyRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionConcurrencyInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionConcurrencyRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutFunctionConcurrencyOutput) *MockLambdaAPI_PutFunctionConcurrencyRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionConcurrencyRequest_Call) RunAndReturn(run func(*lambda.PutFunctionConcurrencyInput) (*request.Request, *lambda.PutFunctionConcurrencyOutput)) *MockLambdaAPI_PutFunctionConcurrencyRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionConcurrencyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PutFunctionConcurrencyWithContext(_a0 context.Context, _a1 *lambda.PutFunctionConcurrencyInput, _a2 ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionConcurrencyWithContext")
	}

	var r0 *lambda.PutFunctionConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) *lambda.PutFunctionConcurrencyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionConcurrencyWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionConcurrencyWithContext'
type MockLambdaAPI_PutFunctionConcurrencyWithContext_Call struct {
	*mock.Call
}

// PutFunctionConcurrencyWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutFunctionConcurrencyInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PutFunctionConcurrencyWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call {
	return &MockLambdaAPI_PutFunctionConcurrencyWithContext_Call{Call: _e.mock.On("PutFunctionConcurrencyWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutFunctionConcurrencyInput, _a2 ...request.Option)) *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutFunctionConcurrencyInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call) Return(_a0 *lambda.PutFunctionConcurrencyOutput, _a1 error) *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutFunctionConcurrencyInput, ...request.Option) (*lambda.PutFunctionConcurrencyOutput, error)) *MockLambdaAPI_PutFunctionConcurrencyWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutFunctionEventInvokeConfig(_a0 *lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionEventInvokeConfig")
	}

	var r0 *lambda.PutFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) *lambda.PutFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionEventInvokeConfig'
type MockLambdaAPI_PutFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// PutFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) PutFunctionEventInvokeConfig(_a0 interface{}) *MockLambdaAPI_PutFunctionEventInvokeConfig_Call {
	return &MockLambdaAPI_PutFunctionEventInvokeConfig_Call{Call: _e.mock.On("PutFunctionEventInvokeConfig", _a0)}
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.PutFunctionEventInvokeConfigInput)) *MockLambdaAPI_PutFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfig_Call) Return(_a0 *lambda.PutFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_PutFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.PutFunctionEventInvokeConfigInput) (*lambda.PutFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_PutFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutFunctionEventInvokeConfigRequest(_a0 *lambda.PutFunctionEventInvokeConfigInput) (*request.Request, *lambda.PutFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionEventInvokeConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.PutFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) (*request.Request, *lambda.PutFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutFunctionEventInvokeConfigInput) *lambda.PutFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionEventInvokeConfigRequest'
type MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// PutFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) PutFunctionEventInvokeConfigRequest(_a0 interface{}) *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call {
	return &MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("PutFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.PutFunctionEventInvokeConfigInput)) *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutFunctionEventInvokeConfigOutput) *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.PutFunctionEventInvokeConfigInput) (*request.Request, *lambda.PutFunctionEventInvokeConfigOutput)) *MockLambdaAPI_PutFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PutFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.PutFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFunctionEventInvokeConfigWithContext")
	}

	var r0 *lambda.PutFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) *lambda.PutFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFunctionEventInvokeConfigWithContext'
type MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// PutFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PutFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call {
	return &MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("PutFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutFunctionEventInvokeConfigInput, _a2 ...request.Option)) *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.PutFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutFunctionEventInvokeConfigInput, ...request.Option) (*lambda.PutFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_PutFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutProvisionedConcurrencyConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutProvisionedConcurrencyConfig(_a0 *lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutProvisionedConcurrencyConfig")
	}

	var r0 *lambda.PutProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutProvisionedConcurrencyConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutProvisionedConcurrencyConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProvisionedConcurrencyConfig'
type MockLambdaAPI_PutProvisionedConcurrencyConfig_Call struct {
	*mock.Call
}

// PutProvisionedConcurrencyConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutProvisionedConcurrencyConfigInput
func (_e *MockLambdaAPI_Expecter) PutProvisionedConcurrencyConfig(_a0 interface{}) *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call {
	return &MockLambdaAPI_PutProvisionedConcurrencyConfig_Call{Call: _e.mock.On("PutProvisionedConcurrencyConfig", _a0)}
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call) Run(run func(_a0 *lambda.PutProvisionedConcurrencyConfigInput)) *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call) Return(_a0 *lambda.PutProvisionedConcurrencyConfigOutput, _a1 error) *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call) RunAndReturn(run func(*lambda.PutProvisionedConcurrencyConfigInput) (*lambda.PutProvisionedConcurrencyConfigOutput, error)) *MockLambdaAPI_PutProvisionedConcurrencyConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutProvisionedConcurrencyConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutProvisionedConcurrencyConfigRequest(_a0 *lambda.PutProvisionedConcurrencyConfigInput) (*request.Request, *lambda.PutProvisionedConcurrencyConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutProvisionedConcurrencyConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.PutProvisionedConcurrencyConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) (*request.Request, *lambda.PutProvisionedConcurrencyConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutProvisionedConcurrencyConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutProvisionedConcurrencyConfigInput) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProvisionedConcurrencyConfigRequest'
type MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call struct {
	*mock.Call
}

// PutProvisionedConcurrencyConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutProvisionedConcurrencyConfigInput
func (_e *MockLambdaAPI_Expecter) PutProvisionedConcurrencyConfigRequest(_a0 interface{}) *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call {
	return &MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call{Call: _e.mock.On("PutProvisionedConcurrencyConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call) Run(run func(_a0 *lambda.PutProvisionedConcurrencyConfigInput)) *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutProvisionedConcurrencyConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutProvisionedConcurrencyConfigOutput) *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call) RunAndReturn(run func(*lambda.PutProvisionedConcurrencyConfigInput) (*request.Request, *lambda.PutProvisionedConcurrencyConfigOutput)) *MockLambdaAPI_PutProvisionedConcurrencyConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutProvisionedConcurrencyConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PutProvisionedConcurrencyConfigWithContext(_a0 context.Context, _a1 *lambda.PutProvisionedConcurrencyConfigInput, _a2 ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProvisionedConcurrencyConfigWithContext")
	}

	var r0 *lambda.PutProvisionedConcurrencyConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) *lambda.PutProvisionedConcurrencyConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutProvisionedConcurrencyConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutProvisionedConcurrencyConfigWithContext'
type MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call struct {
	*mock.Call
}

// PutProvisionedConcurrencyConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutProvisionedConcurrencyConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PutProvisionedConcurrencyConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call {
	return &MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call{Call: _e.mock.On("PutProvisionedConcurrencyConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutProvisionedConcurrencyConfigInput, _a2 ...request.Option)) *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutProvisionedConcurrencyConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call) Return(_a0 *lambda.PutProvisionedConcurrencyConfigOutput, _a1 error) *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutProvisionedConcurrencyConfigInput, ...request.Option) (*lambda.PutProvisionedConcurrencyConfigOutput, error)) *MockLambdaAPI_PutProvisionedConcurrencyConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// PutRuntimeManagementConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutRuntimeManagementConfig(_a0 *lambda.PutRuntimeManagementConfigInput) (*lambda.PutRuntimeManagementConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutRuntimeManagementConfig")
	}

	var r0 *lambda.PutRuntimeManagementConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.PutRuntimeManagementConfigInput) (*lambda.PutRuntimeManagementConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutRuntimeManagementConfigInput) *lambda.PutRuntimeManagementConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutRuntimeManagementConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutRuntimeManagementConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutRuntimeManagementConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRuntimeManagementConfig'
type MockLambdaAPI_PutRuntimeManagementConfig_Call struct {
	*mock.Call
}

// PutRuntimeManagementConfig is a helper method to define mock.On call
//   - _a0 *lambda.PutRuntimeManagementConfigInput
func (_e *MockLambdaAPI_Expecter) PutRuntimeManagementConfig(_a0 interface{}) *MockLambdaAPI_PutRuntimeManagementConfig_Call {
	return &MockLambdaAPI_PutRuntimeManagementConfig_Call{Call: _e.mock.On("PutRuntimeManagementConfig", _a0)}
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfig_Call) Run(run func(_a0 *lambda.PutRuntimeManagementConfigInput)) *MockLambdaAPI_PutRuntimeManagementConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutRuntimeManagementConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfig_Call) Return(_a0 *lambda.PutRuntimeManagementConfigOutput, _a1 error) *MockLambdaAPI_PutRuntimeManagementConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfig_Call) RunAndReturn(run func(*lambda.PutRuntimeManagementConfigInput) (*lambda.PutRuntimeManagementConfigOutput, error)) *MockLambdaAPI_PutRuntimeManagementConfig_Call {
	_c.Call.Return(run)
	return _c
}

// PutRuntimeManagementConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) PutRuntimeManagementConfigRequest(_a0 *lambda.PutRuntimeManagementConfigInput) (*request.Request, *lambda.PutRuntimeManagementConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for PutRuntimeManagementConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.PutRuntimeManagementConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.PutRuntimeManagementConfigInput) (*request.Request, *lambda.PutRuntimeManagementConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.PutRuntimeManagementConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.PutRuntimeManagementConfigInput) *lambda.PutRuntimeManagementConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.PutRuntimeManagementConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_PutRuntimeManagementConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRuntimeManagementConfigRequest'
type MockLambdaAPI_PutRuntimeManagementConfigRequest_Call struct {
	*mock.Call
}

// PutRuntimeManagementConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.PutRuntimeManagementConfigInput
func (_e *MockLambdaAPI_Expecter) PutRuntimeManagementConfigRequest(_a0 interface{}) *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call {
	return &MockLambdaAPI_PutRuntimeManagementConfigRequest_Call{Call: _e.mock.On("PutRuntimeManagementConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call) Run(run func(_a0 *lambda.PutRuntimeManagementConfigInput)) *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.PutRuntimeManagementConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.PutRuntimeManagementConfigOutput) *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call) RunAndReturn(run func(*lambda.PutRuntimeManagementConfigInput) (*request.Request, *lambda.PutRuntimeManagementConfigOutput)) *MockLambdaAPI_PutRuntimeManagementConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// PutRuntimeManagementConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) PutRuntimeManagementConfigWithContext(_a0 context.Context, _a1 *lambda.PutRuntimeManagementConfigInput, _a2 ...request.Option) (*lambda.PutRuntimeManagementConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRuntimeManagementConfigWithContext")
	}

	var r0 *lambda.PutRuntimeManagementConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutRuntimeManagementConfigInput, ...request.Option) (*lambda.PutRuntimeManagementConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.PutRuntimeManagementConfigInput, ...request.Option) *lambda.PutRuntimeManagementConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.PutRuntimeManagementConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.PutRuntimeManagementConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutRuntimeManagementConfigWithContext'
type MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call struct {
	*mock.Call
}

// PutRuntimeManagementConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.PutRuntimeManagementConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) PutRuntimeManagementConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call {
	return &MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call{Call: _e.mock.On("PutRuntimeManagementConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.PutRuntimeManagementConfigInput, _a2 ...request.Option)) *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.PutRuntimeManagementConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call) Return(_a0 *lambda.PutRuntimeManagementConfigOutput, _a1 error) *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.PutRuntimeManagementConfigInput, ...request.Option) (*lambda.PutRuntimeManagementConfigOutput, error)) *MockLambdaAPI_PutRuntimeManagementConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLayerVersionPermission provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) RemoveLayerVersionPermission(_a0 *lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLayerVersionPermission")
	}

	var r0 *lambda.RemoveLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) *lambda.RemoveLayerVersionPermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemoveLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemoveLayerVersionPermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_RemoveLayerVersionPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLayerVersionPermission'
type MockLambdaAPI_RemoveLayerVersionPermission_Call struct {
	*mock.Call
}

// RemoveLayerVersionPermission is a helper method to define mock.On call
//   - _a0 *lambda.RemoveLayerVersionPermissionInput
func (_e *MockLambdaAPI_Expecter) RemoveLayerVersionPermission(_a0 interface{}) *MockLambdaAPI_RemoveLayerVersionPermission_Call {
	return &MockLambdaAPI_RemoveLayerVersionPermission_Call{Call: _e.mock.On("RemoveLayerVersionPermission", _a0)}
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermission_Call) Run(run func(_a0 *lambda.RemoveLayerVersionPermissionInput)) *MockLambdaAPI_RemoveLayerVersionPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemoveLayerVersionPermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermission_Call) Return(_a0 *lambda.RemoveLayerVersionPermissionOutput, _a1 error) *MockLambdaAPI_RemoveLayerVersionPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermission_Call) RunAndReturn(run func(*lambda.RemoveLayerVersionPermissionInput) (*lambda.RemoveLayerVersionPermissionOutput, error)) *MockLambdaAPI_RemoveLayerVersionPermission_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLayerVersionPermissionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) RemoveLayerVersionPermissionRequest(_a0 *lambda.RemoveLayerVersionPermissionInput) (*request.Request, *lambda.RemoveLayerVersionPermissionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLayerVersionPermissionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.RemoveLayerVersionPermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) (*request.Request, *lambda.RemoveLayerVersionPermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemoveLayerVersionPermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemoveLayerVersionPermissionInput) *lambda.RemoveLayerVersionPermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.RemoveLayerVersionPermissionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLayerVersionPermissionRequest'
type MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call struct {
	*mock.Call
}

// RemoveLayerVersionPermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.RemoveLayerVersionPermissionInput
func (_e *MockLambdaAPI_Expecter) RemoveLayerVersionPermissionRequest(_a0 interface{}) *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call {
	return &MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call{Call: _e.mock.On("RemoveLayerVersionPermissionRequest", _a0)}
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call) Run(run func(_a0 *lambda.RemoveLayerVersionPermissionInput)) *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemoveLayerVersionPermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.RemoveLayerVersionPermissionOutput) *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call) RunAndReturn(run func(*lambda.RemoveLayerVersionPermissionInput) (*request.Request, *lambda.RemoveLayerVersionPermissionOutput)) *MockLambdaAPI_RemoveLayerVersionPermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLayerVersionPermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) RemoveLayerVersionPermissionWithContext(_a0 context.Context, _a1 *lambda.RemoveLayerVersionPermissionInput, _a2 ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLayerVersionPermissionWithContext")
	}

	var r0 *lambda.RemoveLayerVersionPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) *lambda.RemoveLayerVersionPermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemoveLayerVersionPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLayerVersionPermissionWithContext'
type MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call struct {
	*mock.Call
}

// RemoveLayerVersionPermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.RemoveLayerVersionPermissionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) RemoveLayerVersionPermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call {
	return &MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call{Call: _e.mock.On("RemoveLayerVersionPermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.RemoveLayerVersionPermissionInput, _a2 ...request.Option)) *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.RemoveLayerVersionPermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call) Return(_a0 *lambda.RemoveLayerVersionPermissionOutput, _a1 error) *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.RemoveLayerVersionPermissionInput, ...request.Option) (*lambda.RemoveLayerVersionPermissionOutput, error)) *MockLambdaAPI_RemoveLayerVersionPermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermission provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) RemovePermission(_a0 *lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermission")
	}

	var r0 *lambda.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) *lambda.RemovePermissionOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemovePermissionInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_RemovePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermission'
type MockLambdaAPI_RemovePermission_Call struct {
	*mock.Call
}

// RemovePermission is a helper method to define mock.On call
//   - _a0 *lambda.RemovePermissionInput
func (_e *MockLambdaAPI_Expecter) RemovePermission(_a0 interface{}) *MockLambdaAPI_RemovePermission_Call {
	return &MockLambdaAPI_RemovePermission_Call{Call: _e.mock.On("RemovePermission", _a0)}
}

func (_c *MockLambdaAPI_RemovePermission_Call) Run(run func(_a0 *lambda.RemovePermissionInput)) *MockLambdaAPI_RemovePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemovePermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_RemovePermission_Call) Return(_a0 *lambda.RemovePermissionOutput, _a1 error) *MockLambdaAPI_RemovePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_RemovePermission_Call) RunAndReturn(run func(*lambda.RemovePermissionInput) (*lambda.RemovePermissionOutput, error)) *MockLambdaAPI_RemovePermission_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) RemovePermissionRequest(_a0 *lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionRequest")
	}

	var r0 *request.Request
	var r1 *lambda.RemovePermissionOutput
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.RemovePermissionInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.RemovePermissionInput) *lambda.RemovePermissionOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.RemovePermissionOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_RemovePermissionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionRequest'
type MockLambdaAPI_RemovePermissionRequest_Call struct {
	*mock.Call
}

// RemovePermissionRequest is a helper method to define mock.On call
//   - _a0 *lambda.RemovePermissionInput
func (_e *MockLambdaAPI_Expecter) RemovePermissionRequest(_a0 interface{}) *MockLambdaAPI_RemovePermissionRequest_Call {
	return &MockLambdaAPI_RemovePermissionRequest_Call{Call: _e.mock.On("RemovePermissionRequest", _a0)}
}

func (_c *MockLambdaAPI_RemovePermissionRequest_Call) Run(run func(_a0 *lambda.RemovePermissionInput)) *MockLambdaAPI_RemovePermissionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.RemovePermissionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_RemovePermissionRequest_Call) Return(_a0 *request.Request, _a1 *lambda.RemovePermissionOutput) *MockLambdaAPI_RemovePermissionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_RemovePermissionRequest_Call) RunAndReturn(run func(*lambda.RemovePermissionInput) (*request.Request, *lambda.RemovePermissionOutput)) *MockLambdaAPI_RemovePermissionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) RemovePermissionWithContext(_a0 context.Context, _a1 *lambda.RemovePermissionInput, _a2 ...request.Option) (*lambda.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionWithContext")
	}

	var r0 *lambda.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemovePermissionInput, ...request.Option) (*lambda.RemovePermissionOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.RemovePermissionInput, ...request.Option) *lambda.RemovePermissionOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.RemovePermissionInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_RemovePermissionWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionWithContext'
type MockLambdaAPI_RemovePermissionWithContext_Call struct {
	*mock.Call
}

// RemovePermissionWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.RemovePermissionInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) RemovePermissionWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_RemovePermissionWithContext_Call {
	return &MockLambdaAPI_RemovePermissionWithContext_Call{Call: _e.mock.On("RemovePermissionWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_RemovePermissionWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.RemovePermissionInput, _a2 ...request.Option)) *MockLambdaAPI_RemovePermissionWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.RemovePermissionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_RemovePermissionWithContext_Call) Return(_a0 *lambda.RemovePermissionOutput, _a1 error) *MockLambdaAPI_RemovePermissionWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_RemovePermissionWithContext_Call) RunAndReturn(run func(context.Context, *lambda.RemovePermissionInput, ...request.Option) (*lambda.RemovePermissionOutput, error)) *MockLambdaAPI_RemovePermissionWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// TagResource provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) TagResource(_a0 *lambda.TagResourceInput) (*lambda.TagResourceOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *lambda.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) (*lambda.TagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) *lambda.TagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.TagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_TagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResource'
type MockLambdaAPI_TagResource_Call struct {
	*mock.Call
}

// TagResource is a helper method to define mock.On call
//   - _a0 *lambda.TagResourceInput
func (_e *MockLambdaAPI_Expecter) TagResource(_a0 interface{}) *MockLambdaAPI_TagResource_Call {
	return &MockLambdaAPI_TagResource_Call{Call: _e.mock.On("TagResource", _a0)}
}

func (_c *MockLambdaAPI_TagResource_Call) Run(run func(_a0 *lambda.TagResourceInput)) *MockLambdaAPI_TagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.TagResourceInput))
	})
	return _c
}

func (_c *MockLambdaAPI_TagResource_Call) Return(_a0 *lambda.TagResourceOutput, _a1 error) *MockLambdaAPI_TagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_TagResource_Call) RunAndReturn(run func(*lambda.TagResourceInput) (*lambda.TagResourceOutput, error)) *MockLambdaAPI_TagResource_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) TagResourceRequest(_a0 *lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for TagResourceRequest")
	}

	var r0 *request.Request
	var r1 *lambda.TagResourceOutput
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.TagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.TagResourceInput) *lambda.TagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.TagResourceOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_TagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceRequest'
type MockLambdaAPI_TagResourceRequest_Call struct {
	*mock.Call
}

// TagResourceRequest is a helper method to define mock.On call
//   - _a0 *lambda.TagResourceInput
func (_e *MockLambdaAPI_Expecter) TagResourceRequest(_a0 interface{}) *MockLambdaAPI_TagResourceRequest_Call {
	return &MockLambdaAPI_TagResourceRequest_Call{Call: _e.mock.On("TagResourceRequest", _a0)}
}

func (_c *MockLambdaAPI_TagResourceRequest_Call) Run(run func(_a0 *lambda.TagResourceInput)) *MockLambdaAPI_TagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.TagResourceInput))
	})
	return _c
}

func (_c *MockLambdaAPI_TagResourceRequest_Call) Return(_a0 *request.Request, _a1 *lambda.TagResourceOutput) *MockLambdaAPI_TagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_TagResourceRequest_Call) RunAndReturn(run func(*lambda.TagResourceInput) (*request.Request, *lambda.TagResourceOutput)) *MockLambdaAPI_TagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// TagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) TagResourceWithContext(_a0 context.Context, _a1 *lambda.TagResourceInput, _a2 ...request.Option) (*lambda.TagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResourceWithContext")
	}

	var r0 *lambda.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.TagResourceInput, ...request.Option) (*lambda.TagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.TagResourceInput, ...request.Option) *lambda.TagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.TagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_TagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagResourceWithContext'
type MockLambdaAPI_TagResourceWithContext_Call struct {
	*mock.Call
}

// TagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.TagResourceInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) TagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_TagResourceWithContext_Call {
	return &MockLambdaAPI_TagResourceWithContext_Call{Call: _e.mock.On("TagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_TagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.TagResourceInput, _a2 ...request.Option)) *MockLambdaAPI_TagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.TagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_TagResourceWithContext_Call) Return(_a0 *lambda.TagResourceOutput, _a1 error) *MockLambdaAPI_TagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_TagResourceWithContext_Call) RunAndReturn(run func(context.Context, *lambda.TagResourceInput, ...request.Option) (*lambda.TagResourceOutput, error)) *MockLambdaAPI_TagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResource provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UntagResource(_a0 *lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *lambda.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) *lambda.UntagResourceOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UntagResourceInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UntagResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResource'
type MockLambdaAPI_UntagResource_Call struct {
	*mock.Call
}

// UntagResource is a helper method to define mock.On call
//   - _a0 *lambda.UntagResourceInput
func (_e *MockLambdaAPI_Expecter) UntagResource(_a0 interface{}) *MockLambdaAPI_UntagResource_Call {
	return &MockLambdaAPI_UntagResource_Call{Call: _e.mock.On("UntagResource", _a0)}
}

func (_c *MockLambdaAPI_UntagResource_Call) Run(run func(_a0 *lambda.UntagResourceInput)) *MockLambdaAPI_UntagResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UntagResourceInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UntagResource_Call) Return(_a0 *lambda.UntagResourceOutput, _a1 error) *MockLambdaAPI_UntagResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UntagResource_Call) RunAndReturn(run func(*lambda.UntagResourceInput) (*lambda.UntagResourceOutput, error)) *MockLambdaAPI_UntagResource_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UntagResourceRequest(_a0 *lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UntagResourceRequest")
	}

	var r0 *request.Request
	var r1 *lambda.UntagResourceOutput
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UntagResourceInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UntagResourceInput) *lambda.UntagResourceOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UntagResourceOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UntagResourceRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceRequest'
type MockLambdaAPI_UntagResourceRequest_Call struct {
	*mock.Call
}

// UntagResourceRequest is a helper method to define mock.On call
//   - _a0 *lambda.UntagResourceInput
func (_e *MockLambdaAPI_Expecter) UntagResourceRequest(_a0 interface{}) *MockLambdaAPI_UntagResourceRequest_Call {
	return &MockLambdaAPI_UntagResourceRequest_Call{Call: _e.mock.On("UntagResourceRequest", _a0)}
}

func (_c *MockLambdaAPI_UntagResourceRequest_Call) Run(run func(_a0 *lambda.UntagResourceInput)) *MockLambdaAPI_UntagResourceRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UntagResourceInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UntagResourceRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UntagResourceOutput) *MockLambdaAPI_UntagResourceRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UntagResourceRequest_Call) RunAndReturn(run func(*lambda.UntagResourceInput) (*request.Request, *lambda.UntagResourceOutput)) *MockLambdaAPI_UntagResourceRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UntagResourceWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UntagResourceWithContext(_a0 context.Context, _a1 *lambda.UntagResourceInput, _a2 ...request.Option) (*lambda.UntagResourceOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResourceWithContext")
	}

	var r0 *lambda.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UntagResourceInput, ...request.Option) (*lambda.UntagResourceOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UntagResourceInput, ...request.Option) *lambda.UntagResourceOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UntagResourceInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UntagResourceWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagResourceWithContext'
type MockLambdaAPI_UntagResourceWithContext_Call struct {
	*mock.Call
}

// UntagResourceWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UntagResourceInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UntagResourceWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UntagResourceWithContext_Call {
	return &MockLambdaAPI_UntagResourceWithContext_Call{Call: _e.mock.On("UntagResourceWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UntagResourceWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UntagResourceInput, _a2 ...request.Option)) *MockLambdaAPI_UntagResourceWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UntagResourceInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UntagResourceWithContext_Call) Return(_a0 *lambda.UntagResourceOutput, _a1 error) *MockLambdaAPI_UntagResourceWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UntagResourceWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UntagResourceInput, ...request.Option) (*lambda.UntagResourceOutput, error)) *MockLambdaAPI_UntagResourceWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAlias provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateAlias(_a0 *lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlias")
	}

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateAliasInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAlias'
type MockLambdaAPI_UpdateAlias_Call struct {
	*mock.Call
}

// UpdateAlias is a helper method to define mock.On call
//   - _a0 *lambda.UpdateAliasInput
func (_e *MockLambdaAPI_Expecter) UpdateAlias(_a0 interface{}) *MockLambdaAPI_UpdateAlias_Call {
	return &MockLambdaAPI_UpdateAlias_Call{Call: _e.mock.On("UpdateAlias", _a0)}
}

func (_c *MockLambdaAPI_UpdateAlias_Call) Run(run func(_a0 *lambda.UpdateAliasInput)) *MockLambdaAPI_UpdateAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateAlias_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *MockLambdaAPI_UpdateAlias_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateAlias_Call) RunAndReturn(run func(*lambda.UpdateAliasInput) (*lambda.AliasConfiguration, error)) *MockLambdaAPI_UpdateAlias_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAliasRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateAliasRequest(_a0 *lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAliasRequest")
	}

	var r0 *request.Request
	var r1 *lambda.AliasConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateAliasInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateAliasInput) *lambda.AliasConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.AliasConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateAliasRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAliasRequest'
type MockLambdaAPI_UpdateAliasRequest_Call struct {
	*mock.Call
}

// UpdateAliasRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateAliasInput
func (_e *MockLambdaAPI_Expecter) UpdateAliasRequest(_a0 interface{}) *MockLambdaAPI_UpdateAliasRequest_Call {
	return &MockLambdaAPI_UpdateAliasRequest_Call{Call: _e.mock.On("UpdateAliasRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateAliasRequest_Call) Run(run func(_a0 *lambda.UpdateAliasInput)) *MockLambdaAPI_UpdateAliasRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateAliasInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateAliasRequest_Call) Return(_a0 *request.Request, _a1 *lambda.AliasConfiguration) *MockLambdaAPI_UpdateAliasRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateAliasRequest_Call) RunAndReturn(run func(*lambda.UpdateAliasInput) (*request.Request, *lambda.AliasConfiguration)) *MockLambdaAPI_UpdateAliasRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAliasWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateAliasWithContext(_a0 context.Context, _a1 *lambda.UpdateAliasInput, _a2 ...request.Option) (*lambda.AliasConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAliasWithContext")
	}

	var r0 *lambda.AliasConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateAliasInput, ...request.Option) *lambda.AliasConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.AliasConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateAliasInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateAliasWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAliasWithContext'
type MockLambdaAPI_UpdateAliasWithContext_Call struct {
	*mock.Call
}

// UpdateAliasWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateAliasInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateAliasWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateAliasWithContext_Call {
	return &MockLambdaAPI_UpdateAliasWithContext_Call{Call: _e.mock.On("UpdateAliasWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateAliasWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateAliasInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateAliasWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateAliasInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateAliasWithContext_Call) Return(_a0 *lambda.AliasConfiguration, _a1 error) *MockLambdaAPI_UpdateAliasWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateAliasWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateAliasInput, ...request.Option) (*lambda.AliasConfiguration, error)) *MockLambdaAPI_UpdateAliasWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCodeSigningConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateCodeSigningConfig(_a0 *lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCodeSigningConfig")
	}

	var r0 *lambda.UpdateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) *lambda.UpdateCodeSigningConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateCodeSigningConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateCodeSigningConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCodeSigningConfig'
type MockLambdaAPI_UpdateCodeSigningConfig_Call struct {
	*mock.Call
}

// UpdateCodeSigningConfig is a helper method to define mock.On call
//   - _a0 *lambda.UpdateCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) UpdateCodeSigningConfig(_a0 interface{}) *MockLambdaAPI_UpdateCodeSigningConfig_Call {
	return &MockLambdaAPI_UpdateCodeSigningConfig_Call{Call: _e.mock.On("UpdateCodeSigningConfig", _a0)}
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfig_Call) Run(run func(_a0 *lambda.UpdateCodeSigningConfigInput)) *MockLambdaAPI_UpdateCodeSigningConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfig_Call) Return(_a0 *lambda.UpdateCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_UpdateCodeSigningConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfig_Call) RunAndReturn(run func(*lambda.UpdateCodeSigningConfigInput) (*lambda.UpdateCodeSigningConfigOutput, error)) *MockLambdaAPI_UpdateCodeSigningConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCodeSigningConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateCodeSigningConfigRequest(_a0 *lambda.UpdateCodeSigningConfigInput) (*request.Request, *lambda.UpdateCodeSigningConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCodeSigningConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.UpdateCodeSigningConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) (*request.Request, *lambda.UpdateCodeSigningConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateCodeSigningConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateCodeSigningConfigInput) *lambda.UpdateCodeSigningConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UpdateCodeSigningConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateCodeSigningConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCodeSigningConfigRequest'
type MockLambdaAPI_UpdateCodeSigningConfigRequest_Call struct {
	*mock.Call
}

// UpdateCodeSigningConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateCodeSigningConfigInput
func (_e *MockLambdaAPI_Expecter) UpdateCodeSigningConfigRequest(_a0 interface{}) *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call {
	return &MockLambdaAPI_UpdateCodeSigningConfigRequest_Call{Call: _e.mock.On("UpdateCodeSigningConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call) Run(run func(_a0 *lambda.UpdateCodeSigningConfigInput)) *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateCodeSigningConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UpdateCodeSigningConfigOutput) *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call) RunAndReturn(run func(*lambda.UpdateCodeSigningConfigInput) (*request.Request, *lambda.UpdateCodeSigningConfigOutput)) *MockLambdaAPI_UpdateCodeSigningConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCodeSigningConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateCodeSigningConfigWithContext(_a0 context.Context, _a1 *lambda.UpdateCodeSigningConfigInput, _a2 ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCodeSigningConfigWithContext")
	}

	var r0 *lambda.UpdateCodeSigningConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) *lambda.UpdateCodeSigningConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateCodeSigningConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCodeSigningConfigWithContext'
type MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call struct {
	*mock.Call
}

// UpdateCodeSigningConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateCodeSigningConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateCodeSigningConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call {
	return &MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call{Call: _e.mock.On("UpdateCodeSigningConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateCodeSigningConfigInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateCodeSigningConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call) Return(_a0 *lambda.UpdateCodeSigningConfigOutput, _a1 error) *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateCodeSigningConfigInput, ...request.Option) (*lambda.UpdateCodeSigningConfigOutput, error)) *MockLambdaAPI_UpdateCodeSigningConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventSourceMapping provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateEventSourceMapping(_a0 *lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventSourceMapping")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateEventSourceMappingInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateEventSourceMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventSourceMapping'
type MockLambdaAPI_UpdateEventSourceMapping_Call struct {
	*mock.Call
}

// UpdateEventSourceMapping is a helper method to define mock.On call
//   - _a0 *lambda.UpdateEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) UpdateEventSourceMapping(_a0 interface{}) *MockLambdaAPI_UpdateEventSourceMapping_Call {
	return &MockLambdaAPI_UpdateEventSourceMapping_Call{Call: _e.mock.On("UpdateEventSourceMapping", _a0)}
}

func (_c *MockLambdaAPI_UpdateEventSourceMapping_Call) Run(run func(_a0 *lambda.UpdateEventSourceMappingInput)) *MockLambdaAPI_UpdateEventSourceMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateEventSourceMapping_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_UpdateEventSourceMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateEventSourceMapping_Call) RunAndReturn(run func(*lambda.UpdateEventSourceMappingInput) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_UpdateEventSourceMapping_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventSourceMappingRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateEventSourceMappingRequest(_a0 *lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventSourceMappingRequest")
	}

	var r0 *request.Request
	var r1 *lambda.EventSourceMappingConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateEventSourceMappingInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateEventSourceMappingInput) *lambda.EventSourceMappingConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.EventSourceMappingConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateEventSourceMappingRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventSourceMappingRequest'
type MockLambdaAPI_UpdateEventSourceMappingRequest_Call struct {
	*mock.Call
}

// UpdateEventSourceMappingRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateEventSourceMappingInput
func (_e *MockLambdaAPI_Expecter) UpdateEventSourceMappingRequest(_a0 interface{}) *MockLambdaAPI_UpdateEventSourceMappingRequest_Call {
	return &MockLambdaAPI_UpdateEventSourceMappingRequest_Call{Call: _e.mock.On("UpdateEventSourceMappingRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateEventSourceMappingRequest_Call) Run(run func(_a0 *lambda.UpdateEventSourceMappingInput)) *MockLambdaAPI_UpdateEventSourceMappingRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateEventSourceMappingInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateEventSourceMappingRequest_Call) Return(_a0 *request.Request, _a1 *lambda.EventSourceMappingConfiguration) *MockLambdaAPI_UpdateEventSourceMappingRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateEventSourceMappingRequest_Call) RunAndReturn(run func(*lambda.UpdateEventSourceMappingInput) (*request.Request, *lambda.EventSourceMappingConfiguration)) *MockLambdaAPI_UpdateEventSourceMappingRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEventSourceMappingWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateEventSourceMappingWithContext(_a0 context.Context, _a1 *lambda.UpdateEventSourceMappingInput, _a2 ...request.Option) (*lambda.EventSourceMappingConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventSourceMappingWithContext")
	}

	var r0 *lambda.EventSourceMappingConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) *lambda.EventSourceMappingConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.EventSourceMappingConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateEventSourceMappingWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEventSourceMappingWithContext'
type MockLambdaAPI_UpdateEventSourceMappingWithContext_Call struct {
	*mock.Call
}

// UpdateEventSourceMappingWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateEventSourceMappingInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateEventSourceMappingWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call {
	return &MockLambdaAPI_UpdateEventSourceMappingWithContext_Call{Call: _e.mock.On("UpdateEventSourceMappingWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateEventSourceMappingInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateEventSourceMappingInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call) Return(_a0 *lambda.EventSourceMappingConfiguration, _a1 error) *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateEventSourceMappingInput, ...request.Option) (*lambda.EventSourceMappingConfiguration, error)) *MockLambdaAPI_UpdateEventSourceMappingWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionCode provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionCode(_a0 *lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionCode")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionCodeInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionCode'
type MockLambdaAPI_UpdateFunctionCode_Call struct {
	*mock.Call
}

// UpdateFunctionCode is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionCodeInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionCode(_a0 interface{}) *MockLambdaAPI_UpdateFunctionCode_Call {
	return &MockLambdaAPI_UpdateFunctionCode_Call{Call: _e.mock.On("UpdateFunctionCode", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionCode_Call) Run(run func(_a0 *lambda.UpdateFunctionCodeInput)) *MockLambdaAPI_UpdateFunctionCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionCodeInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionCode_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_UpdateFunctionCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionCode_Call) RunAndReturn(run func(*lambda.UpdateFunctionCodeInput) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_UpdateFunctionCode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionCodeRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionCodeRequest(_a0 *lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionCodeRequest")
	}

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionCodeInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionCodeInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionCodeRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionCodeRequest'
type MockLambdaAPI_UpdateFunctionCodeRequest_Call struct {
	*mock.Call
}

// UpdateFunctionCodeRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionCodeInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionCodeRequest(_a0 interface{}) *MockLambdaAPI_UpdateFunctionCodeRequest_Call {
	return &MockLambdaAPI_UpdateFunctionCodeRequest_Call{Call: _e.mock.On("UpdateFunctionCodeRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionCodeRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionCodeInput)) *MockLambdaAPI_UpdateFunctionCodeRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionCodeInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionCodeRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *MockLambdaAPI_UpdateFunctionCodeRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionCodeRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionCodeInput) (*request.Request, *lambda.FunctionConfiguration)) *MockLambdaAPI_UpdateFunctionCodeRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionCodeWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateFunctionCodeWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionCodeInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionCodeWithContext")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionCodeWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionCodeWithContext'
type MockLambdaAPI_UpdateFunctionCodeWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionCodeWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionCodeInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateFunctionCodeWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateFunctionCodeWithContext_Call {
	return &MockLambdaAPI_UpdateFunctionCodeWithContext_Call{Call: _e.mock.On("UpdateFunctionCodeWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateFunctionCodeWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionCodeInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateFunctionCodeWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionCodeInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionCodeWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_UpdateFunctionCodeWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionCodeWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionCodeInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_UpdateFunctionCodeWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionConfiguration provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionConfiguration(_a0 *lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionConfiguration")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionConfigurationInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionConfiguration'
type MockLambdaAPI_UpdateFunctionConfiguration_Call struct {
	*mock.Call
}

// UpdateFunctionConfiguration is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionConfiguration(_a0 interface{}) *MockLambdaAPI_UpdateFunctionConfiguration_Call {
	return &MockLambdaAPI_UpdateFunctionConfiguration_Call{Call: _e.mock.On("UpdateFunctionConfiguration", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionConfiguration_Call) Run(run func(_a0 *lambda.UpdateFunctionConfigurationInput)) *MockLambdaAPI_UpdateFunctionConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionConfiguration_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_UpdateFunctionConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionConfiguration_Call) RunAndReturn(run func(*lambda.UpdateFunctionConfigurationInput) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_UpdateFunctionConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionConfigurationRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionConfigurationRequest(_a0 *lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionConfigurationRequest")
	}

	var r0 *request.Request
	var r1 *lambda.FunctionConfiguration
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionConfigurationInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionConfigurationInput) *lambda.FunctionConfiguration); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.FunctionConfiguration)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionConfigurationRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionConfigurationRequest'
type MockLambdaAPI_UpdateFunctionConfigurationRequest_Call struct {
	*mock.Call
}

// UpdateFunctionConfigurationRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionConfigurationRequest(_a0 interface{}) *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call {
	return &MockLambdaAPI_UpdateFunctionConfigurationRequest_Call{Call: _e.mock.On("UpdateFunctionConfigurationRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionConfigurationInput)) *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call) Return(_a0 *request.Request, _a1 *lambda.FunctionConfiguration) *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionConfigurationInput) (*request.Request, *lambda.FunctionConfiguration)) *MockLambdaAPI_UpdateFunctionConfigurationRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionConfigurationWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateFunctionConfigurationWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionConfigurationInput, _a2 ...request.Option) (*lambda.FunctionConfiguration, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionConfigurationWithContext")
	}

	var r0 *lambda.FunctionConfiguration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) *lambda.FunctionConfiguration); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.FunctionConfiguration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionConfigurationWithContext'
type MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionConfigurationWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionConfigurationInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateFunctionConfigurationWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call {
	return &MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call{Call: _e.mock.On("UpdateFunctionConfigurationWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionConfigurationInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call) Return(_a0 *lambda.FunctionConfiguration, _a1 error) *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionConfigurationInput, ...request.Option) (*lambda.FunctionConfiguration, error)) *MockLambdaAPI_UpdateFunctionConfigurationWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionEventInvokeConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionEventInvokeConfig(_a0 *lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionEventInvokeConfig")
	}

	var r0 *lambda.UpdateFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) *lambda.UpdateFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionEventInvokeConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionEventInvokeConfig'
type MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call struct {
	*mock.Call
}

// UpdateFunctionEventInvokeConfig is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionEventInvokeConfig(_a0 interface{}) *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call {
	return &MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call{Call: _e.mock.On("UpdateFunctionEventInvokeConfig", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call) Run(run func(_a0 *lambda.UpdateFunctionEventInvokeConfigInput)) *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call) Return(_a0 *lambda.UpdateFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call) RunAndReturn(run func(*lambda.UpdateFunctionEventInvokeConfigInput) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_UpdateFunctionEventInvokeConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionEventInvokeConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionEventInvokeConfigRequest(_a0 *lambda.UpdateFunctionEventInvokeConfigInput) (*request.Request, *lambda.UpdateFunctionEventInvokeConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionEventInvokeConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.UpdateFunctionEventInvokeConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) (*request.Request, *lambda.UpdateFunctionEventInvokeConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionEventInvokeConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionEventInvokeConfigInput) *lambda.UpdateFunctionEventInvokeConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UpdateFunctionEventInvokeConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionEventInvokeConfigRequest'
type MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call struct {
	*mock.Call
}

// UpdateFunctionEventInvokeConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionEventInvokeConfigInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionEventInvokeConfigRequest(_a0 interface{}) *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call {
	return &MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call{Call: _e.mock.On("UpdateFunctionEventInvokeConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionEventInvokeConfigInput)) *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionEventInvokeConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UpdateFunctionEventInvokeConfigOutput) *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionEventInvokeConfigInput) (*request.Request, *lambda.UpdateFunctionEventInvokeConfigOutput)) *MockLambdaAPI_UpdateFunctionEventInvokeConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionEventInvokeConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateFunctionEventInvokeConfigWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionEventInvokeConfigInput, _a2 ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionEventInvokeConfigWithContext")
	}

	var r0 *lambda.UpdateFunctionEventInvokeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) *lambda.UpdateFunctionEventInvokeConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionEventInvokeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionEventInvokeConfigWithContext'
type MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionEventInvokeConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionEventInvokeConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateFunctionEventInvokeConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call {
	return &MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call{Call: _e.mock.On("UpdateFunctionEventInvokeConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionEventInvokeConfigInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionEventInvokeConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call) Return(_a0 *lambda.UpdateFunctionEventInvokeConfigOutput, _a1 error) *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionEventInvokeConfigInput, ...request.Option) (*lambda.UpdateFunctionEventInvokeConfigOutput, error)) *MockLambdaAPI_UpdateFunctionEventInvokeConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionUrlConfig provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionUrlConfig(_a0 *lambda.UpdateFunctionUrlConfigInput) (*lambda.UpdateFunctionUrlConfigOutput, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionUrlConfig")
	}

	var r0 *lambda.UpdateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) (*lambda.UpdateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) *lambda.UpdateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionUrlConfigInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionUrlConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionUrlConfig'
type MockLambdaAPI_UpdateFunctionUrlConfig_Call struct {
	*mock.Call
}

// UpdateFunctionUrlConfig is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionUrlConfig(_a0 interface{}) *MockLambdaAPI_UpdateFunctionUrlConfig_Call {
	return &MockLambdaAPI_UpdateFunctionUrlConfig_Call{Call: _e.mock.On("UpdateFunctionUrlConfig", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfig_Call) Run(run func(_a0 *lambda.UpdateFunctionUrlConfigInput)) *MockLambdaAPI_UpdateFunctionUrlConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfig_Call) Return(_a0 *lambda.UpdateFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_UpdateFunctionUrlConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfig_Call) RunAndReturn(run func(*lambda.UpdateFunctionUrlConfigInput) (*lambda.UpdateFunctionUrlConfigOutput, error)) *MockLambdaAPI_UpdateFunctionUrlConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionUrlConfigRequest provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) UpdateFunctionUrlConfigRequest(_a0 *lambda.UpdateFunctionUrlConfigInput) (*request.Request, *lambda.UpdateFunctionUrlConfigOutput) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionUrlConfigRequest")
	}

	var r0 *request.Request
	var r1 *lambda.UpdateFunctionUrlConfigOutput
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) (*request.Request, *lambda.UpdateFunctionUrlConfigOutput)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*lambda.UpdateFunctionUrlConfigInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(*lambda.UpdateFunctionUrlConfigInput) *lambda.UpdateFunctionUrlConfigOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*lambda.UpdateFunctionUrlConfigOutput)
		}
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionUrlConfigRequest'
type MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call struct {
	*mock.Call
}

// UpdateFunctionUrlConfigRequest is a helper method to define mock.On call
//   - _a0 *lambda.UpdateFunctionUrlConfigInput
func (_e *MockLambdaAPI_Expecter) UpdateFunctionUrlConfigRequest(_a0 interface{}) *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call {
	return &MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call{Call: _e.mock.On("UpdateFunctionUrlConfigRequest", _a0)}
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call) Run(run func(_a0 *lambda.UpdateFunctionUrlConfigInput)) *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.UpdateFunctionUrlConfigInput))
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call) Return(_a0 *request.Request, _a1 *lambda.UpdateFunctionUrlConfigOutput) *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call) RunAndReturn(run func(*lambda.UpdateFunctionUrlConfigInput) (*request.Request, *lambda.UpdateFunctionUrlConfigOutput)) *MockLambdaAPI_UpdateFunctionUrlConfigRequest_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFunctionUrlConfigWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) UpdateFunctionUrlConfigWithContext(_a0 context.Context, _a1 *lambda.UpdateFunctionUrlConfigInput, _a2 ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionUrlConfigWithContext")
	}

	var r0 *lambda.UpdateFunctionUrlConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) *lambda.UpdateFunctionUrlConfigOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lambda.UpdateFunctionUrlConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFunctionUrlConfigWithContext'
type MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call struct {
	*mock.Call
}

// UpdateFunctionUrlConfigWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.UpdateFunctionUrlConfigInput
//   - _a2 ...request.Option
func (_e *MockLambdaAPI_Expecter) UpdateFunctionUrlConfigWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call {
	return &MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call{Call: _e.mock.On("UpdateFunctionUrlConfigWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.UpdateFunctionUrlConfigInput, _a2 ...request.Option)) *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.Option, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.Option)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.UpdateFunctionUrlConfigInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call) Return(_a0 *lambda.UpdateFunctionUrlConfigOutput, _a1 error) *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call) RunAndReturn(run func(context.Context, *lambda.UpdateFunctionUrlConfigInput, ...request.Option) (*lambda.UpdateFunctionUrlConfigOutput, error)) *MockLambdaAPI_UpdateFunctionUrlConfigWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActive provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) WaitUntilFunctionActive(_a0 *lambda.GetFunctionConfigurationInput) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionActive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActive'
type MockLambdaAPI_WaitUntilFunctionActive_Call struct {
	*mock.Call
}

// WaitUntilFunctionActive is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionActive(_a0 interface{}) *MockLambdaAPI_WaitUntilFunctionActive_Call {
	return &MockLambdaAPI_WaitUntilFunctionActive_Call{Call: _e.mock.On("WaitUntilFunctionActive", _a0)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionActive_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *MockLambdaAPI_WaitUntilFunctionActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActive_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActive_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) error) *MockLambdaAPI_WaitUntilFunctionActive_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActiveV2 provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) WaitUntilFunctionActiveV2(_a0 *lambda.GetFunctionInput) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionActiveV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionActiveV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActiveV2'
type MockLambdaAPI_WaitUntilFunctionActiveV2_Call struct {
	*mock.Call
}

// WaitUntilFunctionActiveV2 is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionActiveV2(_a0 interface{}) *MockLambdaAPI_WaitUntilFunctionActiveV2_Call {
	return &MockLambdaAPI_WaitUntilFunctionActiveV2_Call{Call: _e.mock.On("WaitUntilFunctionActiveV2", _a0)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveV2_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *MockLambdaAPI_WaitUntilFunctionActiveV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveV2_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionActiveV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveV2_Call) RunAndReturn(run func(*lambda.GetFunctionInput) error) *MockLambdaAPI_WaitUntilFunctionActiveV2_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActiveV2WithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) WaitUntilFunctionActiveV2WithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionActiveV2WithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActiveV2WithContext'
type MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionActiveV2WithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.WaiterOption
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionActiveV2WithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call {
	return &MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call{Call: _e.mock.On("WaitUntilFunctionActiveV2WithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption)) *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error) *MockLambdaAPI_WaitUntilFunctionActiveV2WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionActiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) WaitUntilFunctionActiveWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionActiveWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionActiveWithContext'
type MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionActiveWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.WaiterOption
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionActiveWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call {
	return &MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call{Call: _e.mock.On("WaitUntilFunctionActiveWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption)) *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error) *MockLambdaAPI_WaitUntilFunctionActiveWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionExists provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) WaitUntilFunctionExists(_a0 *lambda.GetFunctionInput) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionExists'
type MockLambdaAPI_WaitUntilFunctionExists_Call struct {
	*mock.Call
}

// WaitUntilFunctionExists is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionExists(_a0 interface{}) *MockLambdaAPI_WaitUntilFunctionExists_Call {
	return &MockLambdaAPI_WaitUntilFunctionExists_Call{Call: _e.mock.On("WaitUntilFunctionExists", _a0)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionExists_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *MockLambdaAPI_WaitUntilFunctionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionExists_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionExists_Call) RunAndReturn(run func(*lambda.GetFunctionInput) error) *MockLambdaAPI_WaitUntilFunctionExists_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) WaitUntilFunctionExistsWithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionExistsWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionExistsWithContext'
type MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionExistsWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.WaiterOption
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionExistsWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call {
	return &MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call{Call: _e.mock.On("WaitUntilFunctionExistsWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption)) *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error) *MockLambdaAPI_WaitUntilFunctionExistsWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdated provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) WaitUntilFunctionUpdated(_a0 *lambda.GetFunctionConfigurationInput) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionUpdated")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdated'
type MockLambdaAPI_WaitUntilFunctionUpdated_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdated is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionUpdated(_a0 interface{}) *MockLambdaAPI_WaitUntilFunctionUpdated_Call {
	return &MockLambdaAPI_WaitUntilFunctionUpdated_Call{Call: _e.mock.On("WaitUntilFunctionUpdated", _a0)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdated_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *MockLambdaAPI_WaitUntilFunctionUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdated_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionUpdated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdated_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) error) *MockLambdaAPI_WaitUntilFunctionUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdatedV2 provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) WaitUntilFunctionUpdatedV2(_a0 *lambda.GetFunctionInput) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionUpdatedV2")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdatedV2'
type MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdatedV2 is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionInput
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionUpdatedV2(_a0 interface{}) *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call {
	return &MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call{Call: _e.mock.On("WaitUntilFunctionUpdatedV2", _a0)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call) Run(run func(_a0 *lambda.GetFunctionInput)) *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionInput))
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call) RunAndReturn(run func(*lambda.GetFunctionInput) error) *MockLambdaAPI_WaitUntilFunctionUpdatedV2_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdatedV2WithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) WaitUntilFunctionUpdatedV2WithContext(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionUpdatedV2WithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdatedV2WithContext'
type MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdatedV2WithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionInput
//   - _a2 ...request.WaiterOption
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionUpdatedV2WithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call {
	return &MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call{Call: _e.mock.On("WaitUntilFunctionUpdatedV2WithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionInput, _a2 ...request.WaiterOption)) *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionInput, ...request.WaiterOption) error) *MockLambdaAPI_WaitUntilFunctionUpdatedV2WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilFunctionUpdatedWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) WaitUntilFunctionUpdatedWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilFunctionUpdatedWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilFunctionUpdatedWithContext'
type MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call struct {
	*mock.Call
}

// WaitUntilFunctionUpdatedWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.WaiterOption
func (_e *MockLambdaAPI_Expecter) WaitUntilFunctionUpdatedWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call {
	return &MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call{Call: _e.mock.On("WaitUntilFunctionUpdatedWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption)) *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error) *MockLambdaAPI_WaitUntilFunctionUpdatedWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilPublishedVersionActive provides a mock function with given fields: _a0
func (_m *MockLambdaAPI) WaitUntilPublishedVersionActive(_a0 *lambda.GetFunctionConfigurationInput) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilPublishedVersionActive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*lambda.GetFunctionConfigurationInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilPublishedVersionActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilPublishedVersionActive'
type MockLambdaAPI_WaitUntilPublishedVersionActive_Call struct {
	*mock.Call
}

// WaitUntilPublishedVersionActive is a helper method to define mock.On call
//   - _a0 *lambda.GetFunctionConfigurationInput
func (_e *MockLambdaAPI_Expecter) WaitUntilPublishedVersionActive(_a0 interface{}) *MockLambdaAPI_WaitUntilPublishedVersionActive_Call {
	return &MockLambdaAPI_WaitUntilPublishedVersionActive_Call{Call: _e.mock.On("WaitUntilPublishedVersionActive", _a0)}
}

func (_c *MockLambdaAPI_WaitUntilPublishedVersionActive_Call) Run(run func(_a0 *lambda.GetFunctionConfigurationInput)) *MockLambdaAPI_WaitUntilPublishedVersionActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*lambda.GetFunctionConfigurationInput))
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilPublishedVersionActive_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilPublishedVersionActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilPublishedVersionActive_Call) RunAndReturn(run func(*lambda.GetFunctionConfigurationInput) error) *MockLambdaAPI_WaitUntilPublishedVersionActive_Call {
	_c.Call.Return(run)
	return _c
}

// WaitUntilPublishedVersionActiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockLambdaAPI) WaitUntilPublishedVersionActiveWithContext(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaitUntilPublishedVersionActiveWithContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitUntilPublishedVersionActiveWithContext'
type MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call struct {
	*mock.Call
}

// WaitUntilPublishedVersionActiveWithContext is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *lambda.GetFunctionConfigurationInput
//   - _a2 ...request.WaiterOption
func (_e *MockLambdaAPI_Expecter) WaitUntilPublishedVersionActiveWithContext(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call {
	return &MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call{Call: _e.mock.On("WaitUntilPublishedVersionActiveWithContext",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call) Run(run func(_a0 context.Context, _a1 *lambda.GetFunctionConfigurationInput, _a2 ...request.WaiterOption)) *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]request.WaiterOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(request.WaiterOption)
			}
		}
		run(args[0].(context.Context), args[1].(*lambda.GetFunctionConfigurationInput), variadicArgs...)
	})
	return _c
}

func (_c *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call) Return(_a0 error) *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call) RunAndReturn(run func(context.Context, *lambda.GetFunctionConfigurationInput, ...request.WaiterOption) error) *MockLambdaAPI_WaitUntilPublishedVersionActiveWithContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLambdaAPI creates a new instance of MockLambdaAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLambdaAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLambdaAPI {
	mock := &MockLambdaAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
